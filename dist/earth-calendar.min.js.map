{"version":3,"file":"earth-calendar.min.js","sources":["../src/ellipse.js","../src/data.js","../src/days.js","../src/time.js","../src/options.js","../src/gradients.js","../src/draw.js","../src/net.js","../src/tags.js","../src/calendar.js","../src/glyphs.js","../src/cusps.js","../src/earth.js"],"sourcesContent":["/**\n * Convert a target angle, relative to the centre of the ellipse,\n * to the corresponding parametric ellipse angle.\n *\n * https://www.petercollingridge.co.uk/tutorials/computational-geometry/finding-angle-around-ellipse/\n *\n * @param {Number} target Target angle (relative to centre), in radians\n * @param {Number} a Length of semimajor axis\n * @param {Number} b Length of semimimor axis\n * @returns Parametric angle in radians\n */\nexport function parametricAngle (target, a, b) {\n\n  // Convert target angle to parametric angle\n  let t = Math.atan(Math.tan(target) * a / b)\n\n  // Determine what quarter the angle is in\n  const quarter = Math.ceil(target / (Math.PI / 2))\n\n  // Rotate result into the correct quarter\n  if (quarter === 2 || quarter === 3) {\n    t += Math.PI\n  } else if (quarter === 4) {\n    t += 2 * Math.PI\n  }\n\n  return t\n}\n\n/**\n * Calculate the length of the radius of an ellipse at a given angle\n * relative to the major axis.\n *\n * https://en.wikipedia.org/wiki/Ellipse#Polar_form_relative_to_center\n *\n * @param {Number} major Radius of major axis\n * @param {Number} minor Radius of minor axis\n * @param {Number} angle Angle in radians relative to major axis\n */\n export function ellipticRadius (major, minor, angle) {\n  const aSinThetaSquared = Math.pow(major * Math.sin(angle), 2)\n  const bCosThetaSquared = Math.pow(minor * Math.cos(angle), 2)\n  return major * minor / Math.sqrt(aSinThetaSquared + bCosThetaSquared)\n}\n\n/**\n * Determine if the given point is inside the ellipse defined by the provided parameters.\n * \n * https://math.stackexchange.com/a/76463\n * \n * @param {number} x X coordinate of test point\n * @param {number} y Y coordinate of test point\n * @param {number} a Semi-major axis of ellipse\n * @param {number} b Semi-minor axis of ellipse\n * @param {number} rotation Drawing rotation in radians\n * @returns {boolean} Whether or not the point is in bounds\n */\nexport function isPointInEllipse (x, y, a, b, rotation) {\n  // Rotate the point into position (so we can calculate against the non-rotated ellipse)\n  const rotationSin = Math.sin(rotation)\n  const rotationCos = Math.cos(rotation)\n  const rx = x * rotationCos - y * rotationSin\n  const ry = y * rotationCos + x * rotationSin\n\n  // Use the equation of the ellipse area to determine if the point is in bounds\n  const bounds = (rx * rx) / (a * a) + (ry * ry) / (b * b)\n  return bounds <= 1 ? true : false\n}\n","\n/**\n * Data adapted from http://astropixels.com/ephemeris/soleq2001.html\n * and http://astropixels.com/ephemeris/perap2001.html\n * and https://www.yourzodiacsign.com/calendar/2021/\n * \n * Each year includes 14 dates: 12 sign cusps beginning with Aquarius,\n * followed by Perihelion and finally Aphelion. Times in UTC.\n */\nexport const yearlyData = {\n  '2021': [\n    '2021-01-19T20:39:00Z',\n    '2021-02-18T10:43:00Z',\n    '2021-03-20T09:37:00Z',\n    '2021-04-19T20:33:00Z',\n    '2021-05-20T19:37:00Z',\n    '2021-06-21T03:32:00Z',\n    '2021-07-22T14:26:00Z',\n    '2021-08-22T21:34:00Z',\n    '2021-09-22T19:21:00Z',\n    '2021-10-23T04:51:00Z',\n    '2021-11-22T02:33:00Z',\n    '2021-12-21T15:59:00Z',\n    '2021-01-02T13:51:00Z',\n    '2021-07-05T22:27:00Z'\n  ],\n  '2022': [\n    '2022-01-20T02:39:00Z',\n    '2022-02-18T16:42:00Z',\n    '2022-03-20T15:33:00Z',\n    '2022-04-20T02:24:00Z',\n    '2022-05-21T01:22:00Z',\n    '2022-06-21T09:13:00Z',\n    '2022-07-22T20:06:00Z',\n    '2022-08-23T03:16:00Z',\n    '2022-09-23T01:03:00Z',\n    '2022-10-23T10:35:00Z',\n    '2022-11-22T08:20:00Z',\n    '2022-12-21T21:48:00Z',\n    '2022-01-04T06:55:00Z',\n    '2022-07-04T07:11:00Z'\n  ],\n  // '2023': [\n  //   '2023-03-20T21:25:00Z',\n  //   '2023-06-21T14:58:00Z',\n  //   '2023-09-23T06:50:00Z',\n  //   '2023-12-22T03:28:00Z',\n  //   '2023-01-04T16:17:00Z',\n  //   '2023-07-06T20:07:00Z'\n  // ],\n  // '2024': [\n  //   '2024-03-20T03:07:00Z',\n  //   '2024-06-20T20:51:00Z',\n  //   '2024-09-22T12:44:00Z',\n  //   '2024-12-21T09:20:00Z',\n  //   '2024-01-03T00:39:00Z',\n  //   '2024-07-05T05:06:00Z'\n  // ],\n  // '2025': [\n  //   '2025-03-20T09:02:00Z',\n  //   '2025-06-21T02:42:00Z',\n  //   '2025-09-22T18:20:00Z',\n  //   '2025-12-21T15:03:00Z',\n  //   '2025-01-04T13:28:00Z',\n  //   '2025-07-03T19:55:00Z'\n  // ],\n  // '2026': [\n  //   '2026-03-20T14:46:00Z',\n  //   '2026-06-21T08:25:00Z',\n  //   '2026-09-23T00:06:00Z',\n  //   '2026-12-21T20:50:00Z',\n  //   '2026-01-03T17:16:00Z',\n  //   '2026-07-06T17:31:00Z'\n  // ],\n  // '2027': [\n  //   '2027-03-20T20:25:00Z',\n  //   '2027-06-21T14:11:00Z',\n  //   '2027-09-23T06:02:00Z',\n  //   '2027-12-22T02:43:00Z',\n  //   '2027-01-03T02:33:00Z',\n  //   '2027-07-05T05:06:00Z'\n  // ],\n  // '2028': [\n  //   '2028-03-20T02:17:00Z',\n  //   '2028-06-20T20:02:00Z',\n  //   '2028-09-22T11:45:00Z',\n  //   '2028-12-21T08:20:00Z',\n  //   '2028-01-05T12:28:00Z',\n  //   '2028-07-03T22:18:00Z'\n  // ],\n  // '2029': [\n  //   '2029-03-20T08:01:00Z',\n  //   '2029-06-21T01:48:00Z',\n  //   '2029-09-22T17:37:00Z',\n  //   '2029-12-21T14:14:00Z',\n  //   '2029-01-02T18:13:00Z',\n  //   '2029-07-06T05:12:00Z'\n  // ],\n  // '2030': [\n  //   '2030-03-20T13:51:00Z',\n  //   '2030-06-21T07:31:00Z',\n  //   '2030-09-22T23:27:00Z',\n  //   '2030-12-21T20:09:00Z',\n  //   '2030-01-03T10:12:00Z',\n  //   '2030-07-04T12:58:00Z'\n  // ]\n}\n","import { parametricAngle } from './ellipse.js'\nimport { timesFromDates } from './time.js'\n\nexport function currentDay (days, date) {\n\n  const t = date.getTime()\n  let time = 0\n  for (let i = 0; i < days.length; i++) {\n    time = days[i][4]\n    if (t === time) {\n      return i\n    } else if (t < time) {\n      return i - 1\n    }\n  }\n  return -1\n}\n\nexport function dayAngle (days, time, dimensions) {\n  const current = currentDay(days, time)\n  const next = current + 1 === days.length ? 0 : current + 1\n  const startAngle = days[current][0]\n  const endAngle = days[next][0]\n  let span = startAngle - endAngle\n  while (span < 0) {\n    span += Math.PI * 2\n  }\n  const progress = (time.getHours() + (time.getMinutes() + time.getSeconds() / 60) / 60) / 24\n  return startAngle - (span * progress)\n}\n\nfunction createSubDays (days, n, date, angle, increment, dimensions) {\n  let theta = 0\n  for (let j = 0; j <= n; j++, angle -= increment) {\n    theta = parametricAngle(angle, dimensions.a, dimensions.b)\n    days.push([\n      angle,\n      theta,\n      dimensions.cx + Math.cos(theta) * dimensions.a,\n      dimensions.cy + Math.sin(theta) * dimensions.b,\n      date.getTime(),\n      date.getDate() === 1 ? 1 : 0\n    ])\n    date.setDate(date.getDate() + 1)\n  }\n}\n\nexport function createDays (year, yearData, cusps, rotation, dimensions) {\n\n  // Extract times from yearData\n  const times = timesFromDates(yearData)\n  const newYear = new Date(year, 0, 1)\n  const newYearTime = newYear.getTime()\n  const nextYear = new Date(year + 1, 0, 1)\n  const nextYearTime = nextYear.getTime()\n\n  // Time between winter solstice and next new year\n  const delta1 = nextYearTime - times[11]\n  // Time between new year and perihelion\n  const delta2 = times[12] - newYearTime\n  // Estimate angle between new year's day and perihelion\n  let offset = rotation * delta2 / (delta1 + delta2)\n\n  let startAngle = Math.PI + offset\n\n  // Cusps array starts at winter solstice\n  let degreeIndex = 1\n  let endAngle = cusps[degreeIndex][0] // target angle\n  const days = []\n\n  let startTimeCusp = newYearTime\n  let startTimeMidnight = newYearTime\n  let endDateCusp = null\n  let endDateMidnight = null\n  let endTimeCusp = 0\n  let endTimeMidnight = 0\n\n  let totalPeriod = 0\n\n  let fullAngle = 0\n  let actualAngle = 0\n  let nDays = 0\n  let increment = 0\n  let date = newYear\n  // let theta = 0\n  let startOffset = 0\n  let startFraction = 0\n  let endOffset = 0\n  let endFraction = 0\n\n  for (let i = 0; i < 12; i++) {\n\n    // Timestamp of next cusp\n    endTimeCusp = times[i]\n    // Local time of next cusp\n    endDateCusp = new Date(endTimeCusp)\n    // Local start of day before next cusp\n    endDateMidnight = new Date(endDateCusp.getFullYear(), endDateCusp.getMonth(), endDateCusp.getDate())\n    // Timestamp of local start of day before next cusp\n    endTimeMidnight = endDateMidnight.getTime()\n\n    // Total milliseconds of current period\n    totalPeriod = endTimeCusp - startTimeCusp\n\n    // Offset in ms between start cusp and start of next day\n    startOffset = startTimeMidnight - startTimeCusp\n    // Start offset as a fraction of the total period\n    startFraction = startOffset / totalPeriod\n    // Offset in ms between end cusp and start of that day\n    endOffset = endTimeCusp - endTimeMidnight\n    // End offset as a fraction of the total period\n    endFraction = endOffset / totalPeriod\n\n    // Full angle from cusp to cusp\n    fullAngle = startAngle - endAngle\n    while (fullAngle < 0) {\n      fullAngle += Math.PI * 2\n    }\n\n    // Actual angle from start calendar day to end calendar day\n    actualAngle = fullAngle - fullAngle * startFraction - fullAngle * endFraction\n\n    nDays = Math.round((endTimeMidnight - startTimeMidnight) / 86400000)\n    increment = actualAngle / nDays\n    startAngle -= fullAngle * startFraction\n\n    createSubDays (days, nDays, date, startAngle, increment, dimensions)\n\n    // Advance to next pair of cusps\n    startAngle = endAngle\n\n    // Reset cusp angle\n    degreeIndex += 1\n    degreeIndex %= 12\n    endAngle = cusps[degreeIndex][0]\n\n    // Reset initial time to start of first day in next sign\n    endDateMidnight.setDate(endDateMidnight.getDate() + 1)\n    startTimeMidnight = endDateMidnight.getTime()\n    startTimeCusp = endTimeCusp\n  }\n\n  // New year of the following year\n  endTimeCusp = nextYearTime\n\n  // One day before the new year\n  nextYear.setDate(nextYear.getDate() - 1)\n  endTimeMidnight = nextYear.getTime()\n\n  // Total period\n  totalPeriod = endTimeCusp - startTimeCusp\n\n  // Offset in ms between start cusp and start of next day\n  startOffset = startTimeMidnight - startTimeCusp\n  // Start offset as a fraction of the total period\n  startFraction = startOffset / totalPeriod\n  // Offset in ms between end cusp and start of that day\n  endOffset = 86400000\n  // End offset as a fraction of the total period\n  endFraction = endOffset / totalPeriod\n\n  endAngle = Math.PI + offset\n\n  // Full angle from cusp to cusp\n  fullAngle = startAngle - endAngle\n  while (fullAngle < 0) {\n    fullAngle += Math.PI * 2\n  }\n\n  // Actual angle from start calendar day to end calendar day\n  actualAngle = fullAngle - fullAngle * startFraction - fullAngle * endFraction\n\n  nDays = Math.round((endTimeMidnight - startTimeMidnight) / 86400000)\n  increment = actualAngle / nDays\n  startAngle -= fullAngle * startFraction\n\n  createSubDays (days, nDays, date, startAngle, increment, dimensions)\n\n  return days\n}\n","\n/**\n * Determine whether the provided year is a leap year in the Gregorian calendar\n * \n * @param {Integer} year \n * @returns Boolean\n */\nexport function isLeapYear (year) {\n  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)\n}\n\n/**\n * Convert dates to timestamps.\n * \n * @param {Array} yearData Astronomical data for a single year (from `data.js`)\n * @returns Array\n */\nexport function timesFromDates (yearData) {\n  return [\n    (new Date(yearData[0])).getTime(),\n    (new Date(yearData[1])).getTime(),\n    (new Date(yearData[2])).getTime(),\n    (new Date(yearData[3])).getTime(),\n    (new Date(yearData[4])).getTime(),\n    (new Date(yearData[5])).getTime(),\n    (new Date(yearData[6])).getTime(),\n    (new Date(yearData[7])).getTime(),\n    (new Date(yearData[8])).getTime(),\n    (new Date(yearData[9])).getTime(),\n    (new Date(yearData[10])).getTime(),\n    (new Date(yearData[11])).getTime(),\n    (new Date(yearData[12])).getTime(),\n    (new Date(yearData[13])).getTime()\n  ]\n}","\n\nexport const options = {\n\n  // Proportional drawing height, relative to drawing width\n  relativeHeight: 0.8,\n\n  // UI colors\n  colorText: '#443e39',\n  colorDarkLine: '#393633',\n  colorDayLine: '#2f2717',\n  colorMonthLine: '#913907',\n  colorMonthName: '#aa4f1e',\n  colorCuspLine: '#1e4991',\n  colorHighlight: '#d6cdbf',\n  colorEcliptic: '#fffbe4',\n\n  // Sun colors\n  colorSunBorder: '#884408',\n  colorSunBody: '#f9f3d0',\n  colorSunShadow: '#d7b784',\n  \n  // Earth colors\n  colorEarthWater: '#93d0d9',\n  colorEarthLand: '#598742',\n  colorEarthShadow: '#394f3f',\n\n  // First quarter (Red) background gradient and hover gradient colors\n  colorQuarterRed1: '#f74718',\n  colorQuarterRed2: '#ffdeb1',\n  colorQuarterRedHover1: '#f73d07',\n  colorQuarterRedHover2: '#ff7733',\n\n  // Second quarter (Black) background gradient and hover gradient colors\n  colorQuarterBlack1: '#5c5457',\n  colorQuarterBlack2: '#dfc9cc',\n  colorQuarterBlackHover1: '#524248',\n  colorQuarterBlackHover2: '#ab9497',\n\n  // Third quarter (Yellow) bg gradient & hover gradient\n  colorQuarterYellow1: '#e3a327',\n  colorQuarterYellow2: '#f1dfa0',\n  colorQuarterYellowHover1: '#da9309',\n  colorQuarterYellowHover2: '#ebbb12',\n\n  // Fourth quarter (White) bg gradient & hover gradient\n  colorQuarterWhite1: '#f9ede1',\n  colorQuarterWhite2: '#ffffff',\n  colorQuarterWhiteHover1: '#fefdfc',\n  colorQuarterWhiteHover2: '#feca8f'\n}\n","import { options } from './options.js'\n\nfunction quarterRadialGradient (svg, color1, color2, extend) {\n  const start = extend ? 0.5 : 0.333\n  return svg.gradient('radial', function (add) {\n    add.stop(start, color1)\n    add.stop(1, color2)\n  }).from(1, 1).to(1, 1).radius(0.9)\n}\n\nexport function createGradients (svg) {\n  return {\n    quarter1: quarterRadialGradient(svg, options.colorQuarterRed1, options.colorQuarterRed2),\n    quarter2: quarterRadialGradient(svg, options.colorQuarterBlack1, options.colorQuarterBlack2),\n    quarter3: quarterRadialGradient(svg, options.colorQuarterYellow1, options.colorQuarterYellow2),\n    quarter4: quarterRadialGradient(svg, options.colorQuarterWhite1, options.colorQuarterWhite2, true),\n    quarter1Hover: quarterRadialGradient(svg, options.colorQuarterRedHover1, options.colorQuarterRedHover2),\n    quarter2Hover: quarterRadialGradient(svg, options.colorQuarterBlackHover1, options.colorQuarterBlackHover2),\n    quarter3Hover: quarterRadialGradient(svg, options.colorQuarterYellowHover1, options.colorQuarterYellowHover2),\n    quarter4Hover: quarterRadialGradient(svg, options.colorQuarterWhiteHover1, options.colorQuarterWhiteHover2, true)\n  }\n}","import { svgEarth } from './earth.js'\nimport { parametricAngle, isPointInEllipse } from './ellipse.js'\nimport { options } from './options.js'\nimport { SVG } from '@svgdotjs/svg.js'\nimport jQuery, { param } from 'jquery'\nconst $ = jQuery\n\n/**\n * Create a group with a given class name and stroke style.\n * \n * @param {SVG.G} layer SVG group to add the group to\n * @param {string} name Class name for the new group\n * @param {number} width Default line width for this group\n * @returns {SVG.G} New SVG group object\n */\nfunction dayLinesGroup (layer, name, width) {\n  return layer.group().addClass(name).stroke({\n    width: width,\n    color: options.colorDayLine\n  })\n}\n\n/**\n * Draw a line for each day of the year using precomputed angles.\n * \n * @param {SVG.G} layer SVG layer to which the day lines will be added\n * @param {Array.<Array.<number>>} days Precomputed angles and endpoints for each day of the year\n * @param {number} rotation Drawing rotation in radians\n * @param {Object.<string, number>} dimensions Drawing dimensions\n */\nexport function drawDayLines (layer, days, rotation, dimensions) {\n\n  // Create a group for each quarter\n  const g1 = dayLinesGroup(layer, 'q1-days', dimensions.thinLine)\n  const g2 = dayLinesGroup(layer, 'q2-days', dimensions.thinLine)\n  const g3 = dayLinesGroup(layer, 'q3-days', dimensions.thinLine)\n  const g4 = dayLinesGroup(layer, 'q4-days', dimensions.thinLine)\n\n  // Calculate bounds of (inner) ellipse\n  const a2 = dimensions.a - dimensions.inset\n  const b2 = dimensions.b - dimensions.inset\n\n  let angle, theta, x, y\n  for (let i = 0; i < days.length; i++) {\n\n    angle = days[i][0]\n    theta = parametricAngle(angle, a2, b2)\n    x = dimensions.cx + Math.cos(theta) * a2\n    y = dimensions.cy + Math.sin(theta) * b2\n\n    // Determine what quarter the line will be in when rotated into place\n    angle -= rotation\n    if (angle < 0) {\n      angle += Math.PI * 2\n    }\n    if (angle < Math.PI * 0.5) {\n      g1.line(dimensions.cx, dimensions.cy, x, y)\n    } else if (angle < Math.PI) {\n      g4.line(dimensions.cx, dimensions.cy, x, y)\n    } else if (angle < Math.PI * 1.5) {\n      g3.line(dimensions.cx, dimensions.cy, x, y)\n    } else {\n      g2.line(dimensions.cx, dimensions.cy, x, y)\n    }\n\n    // If it is the first of the month, draw a line segment on the outer ring\n    if (days[i][5] === 1) {\n      layer.line(x, y, days[i][2], days[i][3])\n        .stroke({ width: dimensions.line, color: options.colorMonthLine })\n    }\n  }\n\n  // Blend lines with transparency\n  const transparency = function (add) {\n    add.componentTransfer(function (add) {\n      add.funcA({\n        type: 'linear',\n        slope: 0.33,\n        intercept: 0\n      })\n    })\n  }\n  g1.filterWith(transparency)\n  g2.filterWith(transparency)\n  g3.filterWith(transparency)\n  g4.filterWith(transparency)\n}\n\nexport function drawEllipses (layer, under, rotation, gradients, dimensions) {\n  const stroke = {\n    width: dimensions.line,\n    color: options.colorDarkLine\n  }\n  const w1 = dimensions.a * 2\n  const h1 = dimensions.b * 2\n  const w2 = w1 - dimensions.inset * 2\n  const h2 = h1 - dimensions.inset * 2\n  const w3 = (w1 + w2) / 2\n  const h3 = (h1 + h2) / 2\n  let offset = dimensions.padding + dimensions.inset / 2\n  under.ellipse(w3, h3).stroke({\n    width: dimensions.inset,\n    color: options.colorEcliptic\n  }).fill('none').move(offset, offset).filterWith(function (add) {\n    const noise = add.turbulence('0.125 0.2', '1', Date.UTC(), 'noStitch', 'fractalNoise')\n      .colorMatrix('matrix', '1 0 0 0 0  1 0 0 0 0  1 0 0 0 0  0 0 0 0 1')\n      .componentTransfer(function (rgba) {\n        rgba.funcR({\n          type: 'linear',\n          slope: 0.99,\n          intercept: 0.25\n        })\n        rgba.funcG({\n          type: 'linear',\n          slope: 0.55,\n          intercept: 0.25\n        })\n        rgba.funcB({\n          type: 'linear',\n          slope: 0.11,\n          intercept: 0.25\n        })\n        rgba.funcA({\n          type: 'linear',\n          slope: 0,\n          intercept: 0.25\n        })\n      })\n    add.composite(noise, 'SourceGraphic', 'atop')\n  })\n\n  offset -= dimensions.inset / 2\n  layer.ellipse(w1, h1).stroke(stroke).fill('none').move(offset, offset)\n  offset += dimensions.inset\n  layer.ellipse(w2, h2).stroke(stroke).fill('none').move(offset, offset)\n\n  // Background gradient for the four quarters\n  const gradient = under.gradient('radial', function (add) {\n    add.stop(0, '#ffffff')\n    add.stop(1, '#4f4f4f')\n  })\n  const mask = under.mask()\n  mask.ellipse(w2, h2).stroke('none').fill(gradient).move(offset, offset).filterWith(function (add) {\n    const noise = add.turbulence('0.0333', '1', Date.UTC(), 'stitch', 'fractalNoise')\n      .colorMatrix('matrix', '1 0 0 0 0  1 0 0 0 0  1 0 0 0 0  0 0 0 0 1')\n      .componentTransfer(function (rgba) {\n        rgba.funcA({\n          type: 'linear',\n          slope: 0,\n          intercept: 0.2\n        })\n      })\n    add.composite(noise, 'SourceGraphic', 'atop')\n  })\n\n  const bg = under.group()\n  bg.maskWith(mask)\n\n  const rotateDegrees = (rotation * 180 / Math.PI)\n  drawBackground(bg, '1', dimensions.cx, dimensions.cy, rotateDegrees + 180, false, gradients.quarter1, gradients.quarter1Hover)\n  drawBackground(bg, '2', dimensions.cx, dimensions.cy, rotateDegrees + 180, true, gradients.quarter2, gradients.quarter2Hover)\n  drawBackground(bg, '3', dimensions.cx, dimensions.cy, rotateDegrees, false, gradients.quarter3, gradients.quarter3Hover)\n  drawBackground(bg, '4', dimensions.cx, dimensions.cy, rotateDegrees, true, gradients.quarter4, gradients.quarter4Hover)\n}\n\nfunction drawBackground(layer, label, cx, cy, rotation, flip, gradient1, gradient2) {\n  flip = flip ? 'y' : ''\n  const name = 'quarter' + label\n  layer.rect(cx, cy, cx, cy).addClass(name).fill(gradient1).transform({\n    rotate: rotation,\n    origin: [cx, cy],\n    flip: flip\n  })\n  layer.rect(cx, cy, cx, cy).addClass(name + '-hover').fill(gradient2).transform({\n    rotate: rotation,\n    origin: [cx, cy],\n    flip: flip\n  }).opacity(0)\n}\n\nexport function drawCusps (layer, cusps, dimensions) {\n  const months = layer.group()\n  const quarters = layer.group()\n  for (let i = 0; i < 6; i++) {\n    const degree0 = cusps[i]\n    const degree180 = cusps[i + 6]\n    // const line = layer.line(degree0[2], degree0[3], degree180[2], degree180[3])\n    if (i % 3 === 0) {\n      quarters.line(degree0[2], degree0[3], degree180[2], degree180[3])\n        .stroke({\n          width: dimensions.line,\n          color: options.colorDarkLine\n        })\n    } else {\n      months.line(degree0[2], degree0[3], degree180[2], degree180[3])\n        .stroke({\n          width: dimensions.line,\n          color: options.colorCuspLine\n        })\n    }\n  }\n  months.filterWith(function (add) {\n    add.componentTransfer(function (rgba) {\n      rgba.funcA({\n        type: 'linear',\n        slope: 0.667,\n        intercept: 0\n      })\n    })\n  })\n}\n\nexport function drawSun (element, layer, dimensions, tags) {\n  const gradient = layer.gradient('radial', function (add) {\n    add.stop(0, options.colorSunBody)\n    add.stop(0.85, options.colorSunBody)\n    add.stop(1, options.colorSunShadow)\n  })\n  const stroke = {\n    width: dimensions.line,\n    color: options.colorSunBorder\n  }\n  const solar = layer.circle(dimensions.height / 5).stroke(stroke).fill(gradient).attr({\n    cx: dimensions.cx - dimensions.a / 1.95,\n    cy: dimensions.cy\n  })\n\n  const selector = 'tooltip-sun'\n  drawTooltip(element, selector, 'The Sun', tags.theSun)\n  drawTagEvents(layer.root(), solar, element, selector, true, false)\n\n  solar.filterWith(function (add) {\n    const noise = add.turbulence('0.18', '2', Date.UTC(), 'noStitch', 'fractalNoise')\n      .colorMatrix('matrix', '1 0 0 0 0  1 0 0 0 0  1 0 0 0 0  0 0 0 0 1')\n      .componentTransfer(function (rgba) {\n        rgba.funcR({\n          type: 'linear',\n          slope: 0.99,\n          intercept: 0\n        })\n        rgba.funcG({\n          type: 'linear',\n          slope: 0.75,\n          intercept: 0\n        })\n        rgba.funcB({\n          type: 'linear',\n          slope: 0.1,\n          intercept: 0\n        })\n        rgba.funcA({\n          type: 'linear',\n          slope: 0,\n          intercept: 0.25\n        })\n      })\n    add.composite(noise, 'SourceGraphic', 'atop')\n  })\n\n  layer.circle(dimensions.height / 5).stroke({\n    width: dimensions.line / 2,\n    color: options.colorSunBorder\n  }).fill('none').attr({\n    cx: dimensions.cx - dimensions.a / 1.95,\n    cy: dimensions.cy\n  })\n\n}\n\nexport function drawEarth (layer, angle, dimensions) {\n  const theta = parametricAngle(angle, dimensions.a, dimensions.b)\n  const scale = dimensions.cx / 2160\n  const globe = svgEarth(layer, options.colorEarthWater, options.colorEarthLand)\n\n  const offsetX = 0.5 - Math.cos(angle) * 0.1\n  const offsetY = 0.5 + Math.sin(angle) * 0.1\n\n  const gradient = layer.gradient('radial', function (add) {\n    add.stop({\n      offset: 0,\n      color: options.colorEarthShadow,\n      opacity: 0\n    })\n    add.stop({\n      offset: 0.75,\n      color: options.colorEarthShadow,\n      opacity: 0.2\n    })\n    add.stop({\n      offset: 1,\n      color: options.colorEarthShadow,\n      opacity: 0.6\n    })\n  }).from(offsetX, offsetY).to(offsetX, offsetY)\n\n  globe.circle(300, 300).fill(gradient).stroke({\n    width: dimensions.thinLine / scale,\n    color: options.colorEarthShadow\n  }).transform({\n    translate: [\n      268, 171\n    ]\n  })\n  globe.transform({\n    scale: scale,\n    flip: 'y',\n    rotate: 5,\n    translate: [\n      Math.cos(theta) * (dimensions.a - dimensions.inset / 2),\n      Math.sin(theta) * (dimensions.b - dimensions.inset / 2)\n    ],\n    // Try to get the globe centered at cx, cy regardless of drawing scale\n    origin: [dimensions.cx - 31 + dimensions.cx / 30, dimensions.cy + 16 - dimensions.cy / 30]\n  })\n}\n\nexport function drawGlyphs (layer, glyphs, rotation, dimensions) {\n\n  const g = layer.group()\n\n  // 30 degree steps\n  const step = Math.PI / 6\n\n  // const rotateDegrees = rotation * 180 / Math.PI\n  const scale = dimensions.a / 4400\n  const r1 = dimensions.a - dimensions.inset * 2.4\n  const r2 = dimensions.b - dimensions.inset * 2.4\n  const paths = glyphs.paths\n\n  // Sin and cos required for rotating glyphs into final position\n  const rotationCos = Math.cos(-rotation)\n  const rotationSin = Math.sin(-rotation)\n\n  // Aries glyph goes at +75 degrees\n  let angle = rotation + Math.PI * 5 / 12\n  let theta = 0\n  let x1 = 0\n  let y1 = 0\n\n  for (let i = 0; i < paths.length; i++, angle -= step) {\n    if (angle < 0) {\n      angle += Math.PI * 2\n    }\n    theta = parametricAngle(angle, r1, r2)\n    x1 = Math.cos(theta) * r1\n    y1 = Math.sin(theta) * r2\n    g.use(paths[i]).fill(options.colorCuspLine).transform({\n      translate: [\n        // rotate the coordinates into place\n        dimensions.cx + x1 * rotationCos - y1 * rotationSin,\n        dimensions.cy + y1 * rotationCos + x1 * rotationSin\n      ],\n      scale: scale,\n      origin: [-180 * scale, -180 * scale]\n    })\n  }\n\n  g.filterWith(function (add) {\n    add.componentTransfer(function (rgba) {\n      rgba.funcA({\n        type: 'linear',\n        slope: 0.75,\n        intercept: 0\n      })\n    })\n  })\n}\n\nexport function drawMonthNames (layer, days, rotation, dimensions) {\n  const labels = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n  const a2 = dimensions.a - dimensions.inset * 0.23\n  const b2 = dimensions.b - dimensions.inset * 0.23\n  const a3 = dimensions.a - dimensions.inset * 0.77\n  const b3 = dimensions.b - dimensions.inset * 0.77\n\n  // Sin and cos required for rotating glyphs into final position\n  const rotationCos = Math.cos(-rotation)\n  const rotationSin = Math.sin(-rotation)\n  const rotationDeg = rotation * 180 / Math.PI\n\n  let theta = Math.PI - rotation\n  let x1 = 0\n  let y1 = 0\n  let x2 = 0\n  let y2 = 0\n  const limit = days.length\n  let angle1 = days[0][0]\n  let angle2 = 0\n  let day = null\n  let label = 0\n  let textLabel = null\n\n  for (let i = 31; i < limit; i++) {\n    day = days[i]\n    if (day[5] === 1) {\n      angle2 = day[0]\n      if (angle2 < 0) {\n        angle2 += Math.PI * 2\n      }\n\n      if (angle2 > angle1) {\n        angle2 -= Math.PI * 2\n      }\n\n      textLabel = layer.text(labels[label]).fill(options.colorMonthName)\n        .font({\n          family: 'Niconne, cursive',\n          anchor: 'middle',\n          size: dimensions.cy / 13\n        })\n\n      if (angle1 - rotation < Math.PI && angle1 > rotation) { \n        theta = parametricAngle(angle1, a2, b2)\n        x1 = Math.cos(theta) * a2\n        y1 = Math.sin(theta) * b2\n        x2 = dimensions.cx + x1 * rotationCos - y1 * rotationSin\n        y2 = dimensions.cy + y1 * rotationCos + x1 * rotationSin\n\n        let path = 'M ' + x2 + ' ' + y2 + ' A '\n        theta = parametricAngle(angle2, a2, b2)\n        x1 = Math.cos(theta) * a2\n        y1 = Math.sin(theta) * b2\n        x2 = dimensions.cx + x1 * rotationCos - y1 * rotationSin\n        y2 = dimensions.cy + y1 * rotationCos + x1 * rotationSin\n\n        path += a2 + ' ' + b2 + ' -' + rotationDeg + ' 0 0 ' + x2 + ' ' + y2\n        textLabel.path(path).attr('startOffset', '50%')\n      } else {\n        theta = parametricAngle(angle2, a3, b3)\n        x1 = Math.cos(theta) * a3\n        y1 = Math.sin(theta) * b3\n        x2 = dimensions.cx + x1 * rotationCos - y1 * rotationSin\n        y2 = dimensions.cy + y1 * rotationCos + x1 * rotationSin\n\n        let path = 'M ' + x2 + ' ' + y2 + ' A '\n        theta = parametricAngle(angle1, a3, b3)\n        x1 = Math.cos(theta) * a3\n        y1 = Math.sin(theta) * b3\n        x2 = dimensions.cx + x1 * rotationCos - y1 * rotationSin\n        y2 = dimensions.cy + y1 * rotationCos + x1 * rotationSin\n\n        path += a3 + ' ' + b3 + ' -' + rotationDeg + ' 0 1 ' + x2 + ' ' + y2\n        textLabel.path(path).attr('startOffset', '50%')\n      }\n\n      angle1 = angle2\n      if (angle1 < 0) {\n        angle1 += Math.PI * 2\n      }\n      label += 1\n    }\n    \n  }\n  angle2 = days[0][0]\n  textLabel = layer.text(labels[label]).fill(options.colorMonthName)\n    .font({\n      family: 'Niconne, cursive',\n      anchor: 'middle',\n      size: dimensions.cy / 13\n    })\n  theta = parametricAngle(angle2, a3, b3)\n  x1 = Math.cos(theta) * a3\n  y1 = Math.sin(theta) * b3\n  x2 = dimensions.cx + x1 * rotationCos - y1 * rotationSin\n  y2 = dimensions.cy + y1 * rotationCos + x1 * rotationSin\n\n  let path = 'M ' + x2 + ' ' + y2 + ' A '\n  theta = parametricAngle(angle1, a3, b3)\n  x1 = Math.cos(theta) * a3\n  y1 = Math.sin(theta) * b3\n  x2 = dimensions.cx + x1 * rotationCos - y1 * rotationSin\n  y2 = dimensions.cy + y1 * rotationCos + x1 * rotationSin\n\n  path += a3 + ' ' + b3 + ' -' + rotationDeg + ' 0 1 ' + x2 + ' ' + y2\n  textLabel.path(path).attr('startOffset', '50%')\n}\n\nexport function drawCardinalPoints (layer, rotation, dimensions) {\n  \n  const labels = ['N', 'E', 'S', 'W']\n  const a2 = dimensions.a + dimensions.padding * 0.6\n  const b2 = dimensions.b + dimensions.padding * 0.6\n\n  // Sin and cos required for rotating glyphs into final position\n  const rotationCos = Math.cos(-rotation)\n  const rotationSin = Math.sin(-rotation)\n\n  const step = Math.PI / 2\n  let angle = Math.PI + rotation\n  let theta = 0\n  let x1 = 0\n  let y1 = 0\n  for (let i = 0; i < 4; i++, angle -= step) {\n    theta = parametricAngle(angle, a2, b2)\n    x1 = Math.cos(theta) * a2\n    y1 = Math.sin(theta) * b2\n    layer.text(labels[i]).fill(options.colorText)\n      .font({\n        family: 'Niconne, cursive',\n        anchor: 'middle',\n        size: dimensions.cy / 10\n      })\n      .transform({\n      translate: [\n        dimensions.cx + x1 * rotationCos - y1 * rotationSin,\n        dimensions.cy + dimensions.cy / 30 + y1 * rotationCos + x1 * rotationSin\n      ]\n    })\n  }\n}\n\n\nexport function drawQuarterLabels (layer, dimensions) {\n  \n  const labels = ['Dawn', 'Midday', 'Sunset', 'Midnight']\n  const a2 = dimensions.a / 3.5\n  const b2 = dimensions.b / 3.5\n\n  const step = Math.PI / 2\n  let angle = Math.PI / 4 // + rotation\n  let theta = 0\n  let x1 = 0\n  let y1 = 0\n  const font = {\n    family: 'Niconne, cursive',\n    anchor: 'middle',\n    size: dimensions.cy / 10.5\n  }\n  for (let i = 0; i < 4; i++, angle += step) {\n    while (angle >= Math.PI * 2) {\n      angle -= Math.PI * 2\n    }\n    theta = parametricAngle(angle, a2, b2)\n    x1 = Math.cos(theta) * a2\n    y1 = Math.sin(theta) * b2\n\n    // Blurred highlight behind text\n    layer.text(labels[i]).fill(options.colorHighlight).font(font).transform({\n      translate: [\n        dimensions.cx + x1,\n        dimensions.cy + dimensions.cy / 30 + y1\n      ]\n    }).opacity(0.7).filterWith(function (add) {\n      add.gaussianBlur(dimensions.line * 4)\n    })\n\n    // Main text layer\n    layer.text(labels[i]).fill(options.colorText).font(font).transform({\n      translate: [\n        dimensions.cx + x1,\n        dimensions.cy + dimensions.cy / 30 + y1\n      ]\n    })\n\n  }\n}\n\nfunction showTag (svg, element, selector, x, y) {\n  const showing = svg.data('show')\n  if (showing && showing !== selector) {\n    hideTag(svg, element, showing)\n  }\n  const popup = $(element + '-' + selector)\n  svg.data('show', selector)\n  popup.css({\n    top: y + 'px',\n    left: x + 'px'\n  })\n  popup.show()\n}\n\nfunction hideTag (svg, element, selector) {\n  const popup = $(element + '-' + selector)\n  hideTagPopup(svg, popup)\n}\n\nfunction hideTagPopup (svg, popup) {\n  if (popup.is(':visible')) {\n    if (popup.is(':hover')) {\n      popup.on('mouseleave', function () {\n        svg.data('show', null)\n        setTimeout(() => {\n          popup.hide()\n        }, 100)\n      })\n    } else {\n      svg.data('show', null)\n      setTimeout(() => {\n        popup.hide()\n      }, 100)\n    }\n  } else {\n    svg.data('show', null)\n  }\n}\n\nfunction drawTagEvents (svg, target, element, selector, conditional, condition, state) {\n  const offset = $(element + '-frame').offset()\n  const popup = $(element + '-' + selector)\n  target.on('mouseover', (event) => {\n    const zoom = svg.data('zoom')\n    if ((!conditional || (conditional && !!zoom == condition)) && !popup.is(':visible')) {\n      showTag(svg, element, selector, event.pageX - offset.left, event.pageY - offset.top)\n    }\n  })\n  target.on('mouseleave', () => {\n    hideTagPopup(svg, popup)\n  })\n}\n\nfunction drawTooltip (element, selector, title, text) {\n  const tooltip = $(element + '-tooltip').clone().appendTo(element + '-frame')\n  tooltip.attr({\n    id: (element.substr(1) + '-' + selector),\n    top: 0,\n    left: 0\n  })\n  tooltip.html('<p><strong>' + title + '</strong> &ndash; ' + text + '</p>')\n}\n\nexport function drawSlices (element, slices, under, over, dimensions) {\n  // console.log(slices)\n  for (let i = 0; i < slices.length; i++) {\n    // console.log(slices[i])\n    const slice = slices[i]\n    const x1 = slice.r1[2]\n    const y1 = slice.r1[3]\n    const x2 = slice.r2[2]\n    const y2 = slice.r2[3]\n    const shape = under.path(\n      'M' + x1 + ' ' + y1 +\n      ' A' + dimensions.a + ' ' + dimensions.b + ' 0 0 0 ' + x2 + ' ' + y2 +\n      ' L' + dimensions.cx + ' ' + dimensions.cy + ' Z'\n    ).fill('#ddaa33').css({\n      'cursor': 'pointer'\n    })\n\n    const selector = 'tooltip-' + slice.id\n    drawTooltip(element, selector, slice.title, slice.text)\n    drawTagEvents(under.root(), shape, element, selector, true, true)\n\n  }\n}\n\nfunction resetHoverQuarter (svg, quarter) {\n  // Detect previous hover quadrant\n  const hover = svg.data('hover')\n  if (hover && hover != quarter) {\n    // Fade out the previous hover effect\n    SVG('.quarter' + hover + '-hover').animate(200).opacity(0)\n  }\n  // Save the hovered quarter\n  svg.data('hover', quarter)\n}\n\n/**\n * Activate the hover effect on a given quarter, and add clicke event for zooming\n * into that quarter.\n * \n * @param {SVG} svg SVG.js object \n * @param {number} quarter Quarter number (1-4)\n * @param {Array} viewbox Viewbox parameters (x, y, width, height)\n */\nfunction activateQuarter (svg, element, quarter, viewbox) {\n\n  // Fade out previously active quarter\n  resetHoverQuarter(svg, quarter)\n\n  // Fade in the new hover effect\n  SVG('.quarter' + quarter + '-hover').animate(200).opacity(1)\n  \n  \n  // Clear any previous click events\n  svg.click(null)\n\n  // Add event to zoom into currently active quarter\n  svg.click(function () {\n    svg.data('animating', 1)\n    svg.data('zoom', quarter)\n    const showing = svg.data('show')\n    if (showing) {\n      hideTag(svg, element, showing)\n    }\n    svg.animate(600).viewbox(viewbox[0], viewbox[1], viewbox[2], viewbox[3]).after(function() {\n      svg.data('animating', null)\n    })\n    // Fade out hover effect on active quarter\n    SVG('.quarter' + quarter + '-hover').animate(600).opacity(0)\n  })\n}\n\n\nexport function addMouseEvents (element, svg, rotation, gradients, dimensions, tags) {\n\n  drawTooltip(element, 'cosmic-dawn', 'Cosmic Dawn (red)', tags.cosmicDawn)\n  drawTooltip(element, 'cosmic-midnight', 'Cosmic Midnight (black)', tags.cosmicMidnight)\n  drawTooltip(element, 'cosmic-sunset', 'Cosmic Sunset (yellow)', tags.cosmicSunset)\n  drawTooltip(element, 'cosmic-midday', 'Cosmic Midday (white)', tags.cosmicMidday)\n  drawTooltip(element, 'tooltip-zodiac', 'The Zodiac', tags.theZodiac)\n  drawTooltip(element, 'tooltip-ecliptic', 'The Ecliptic', tags.theEcliptic)\n\n  svg.on('mousemove', (event) => {\n\n    if (svg.data('animating')) {\n      // If currently animating, reset click event and do nothing further\n      svg.click(null)\n      return\n    }\n\n    // Detect the offset of the container element using jQuery\n    const offset = $(element).offset()\n    // Also detect the vertical scroll offset\n    const scroll = $(window).scrollTop()\n\n    // Calculate the x,y coordinates relative to the centre of the SVG drawing\n    let x = event.clientX - offset.left - dimensions.cx\n    let y = event.clientY - offset.top + scroll - dimensions.cy\n\n    // Convert x and y to viewbox coordinates\n    const viewbox = svg.viewbox()\n    const zoomed = viewbox.width !== dimensions.width\n    if (zoomed) {\n      x = (viewbox.cx - dimensions.cx) + x * viewbox.width / dimensions.width\n      y = (viewbox.cy - dimensions.cy) + y * viewbox.height / dimensions.height\n    }\n\n    // Determine what quarter the mouse is in\n    const onLeft = x < 0\n    const onTop = y < 0\n    let showing = svg.data('show')\n    let toShow = ''\n\n    // Determine if the mouse is inside the outermost ellipse\n    let hitEllipseOuter = isPointInEllipse(x, y, dimensions.a, dimensions.b, rotation)\n    if (hitEllipseOuter && !zoomed && showing !== 'tooltip-sun') {\n      // We are not zoomed in, and hovered somewhere inside the outer ellipse\n      // Are we inside the inner ellipse?\n      if (isPointInEllipse(x, y, dimensions.a - dimensions.inset, dimensions.b - dimensions.inset, rotation)) {\n        // If so, are we inside the inner region?\n        if (isPointInEllipse(x, y, dimensions.a - dimensions.inset * 4, dimensions.b - dimensions.inset * 4, rotation)) {\n          // In the inner region (4 quarters)\n          if (onLeft) {\n            if (onTop) {\n              toShow = 'cosmic-sunset'\n            } else {\n              toShow = 'cosmic-midday'\n            }\n          } else {\n            if (onTop) {\n              toShow = 'cosmic-midnight'\n            } else {\n              toShow = 'cosmic-dawn'\n            }\n          }\n        } else {\n          // In the middle region (zodiac)\n          toShow = 'tooltip-zodiac'\n        }\n      } else {\n        // In the outer region (ecliptic)\n        toShow = 'tooltip-ecliptic'\n      }\n    }\n\n    // Hide previous tag if it has changed\n    if (showing && showing !== toShow && showing !== 'tooltip-sun') {\n      hideTag(svg, element, showing)\n      showing = svg.data('show')\n    }\n\n    // Show new tag if it has changed\n    if (!showing && toShow) {\n      showTag(svg, element, toShow, event.pageX - offset.left, event.pageY - offset.top)\n    }\n\n    // Previous hover and zoom data\n    const hover = svg.data('hover')\n    const zoom = svg.data('zoom')\n\n    if (hitEllipseOuter) {\n      if (zoom) {\n        // Inside ellipse and zoomed in\n        svg.click(null)\n        svg.css({\n          'cursor': 'default'\n        })\n      } else {\n        // Inside ellipse and not zoomed in\n        svg.css({\n          'cursor': 'pointer'\n        })\n        if (onLeft) {\n          if (onTop && hover !== 3) {\n            activateQuarter(svg, element, 3, [\n              0,\n              0,\n              dimensions.cx + dimensions.inset,\n              dimensions.cy + dimensions.inset\n            ])\n          } else if (!onTop && hover !== 4) {\n            activateQuarter(svg, element, 4, [\n              0,\n              dimensions.cy - dimensions.inset,\n              dimensions.cx + dimensions.inset,\n              dimensions.cy + dimensions.inset\n            ])\n          }\n        } else {\n          if (onTop && hover !== 2) {\n            activateQuarter(svg, element, 2, [\n              dimensions.cx - dimensions.inset,\n              0,\n              dimensions.cx + dimensions.inset,\n              dimensions.cy + dimensions.inset\n            ])\n          } else if (!onTop && hover !== 1) {\n            activateQuarter(svg, element, 1, [\n              dimensions.cx - dimensions.inset,\n              dimensions.cy - dimensions.inset,\n              dimensions.cx + dimensions.inset,\n              dimensions.cy + dimensions.inset\n            ])\n          }\n        }\n      }\n    } else {\n      if (zoom) {\n        // Outside ellipse and zoomed in -- add event to zoom back out\n        svg.css({\n          'cursor': 'pointer'\n        })\n        svg.data('hover', 0)\n        svg.click(null)\n        svg.click(function () {\n          svg.animate(600)\n            .viewbox(0, 0, dimensions.width, dimensions.height)\n            .after(function () {\n              svg.data('animating', null)\n            })\n          svg.data('animating', 1)\n          svg.data('zoom', 0)\n        })\n      } else {\n        // Outside ellipse and not zoomed in -- reset\n        svg.css({\n          'cursor': 'default'\n        })\n        resetHoverQuarter(svg, 0)\n        svg.click(null)\n        svg.data('hover', 0)\n        hideTag(svg, element, showing)\n      }\n    }\n    \n  })\n\n}\n","import { drawSlices } from './draw.js'\nimport jQuery from 'jquery'\nconst $ = jQuery\n\n/**\n * Look up the root URL for the current site (will not work if WordPress\n * is installed in a subdirectory).\n *\n * @returns WordPress site root url\n */\nexport function rootUrl () {\n  let url = window.location.protocol + '//' + window.location.hostname\n  if (window.location.port) {\n    url += ':' + window.location.port\n  }\n  return url\n}\n\nexport function lookupDatesForYear (element, year, days, under, over, dimensions) {\n  const wpRoot = rootUrl()\n  // Look up all years (custom taxonomy for calendar_date post type)\n  $.ajax({\n    // url: wpRoot + '/wp-json/wp/v2/calendar_date?year=2'\n    url: wpRoot + '/wp-json/wp/v2/year'\n    // url: wpRoot + '/wp-json/'\n  }).done(function (data) {\n\n    let yearId = 0\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].slug == year) {\n        yearId = data[i].id\n        break\n      }\n    }\n\n    $.ajax({\n      url: wpRoot + '/wp-json/wp/v2/calendar_date?year=' + yearId\n    }).done(function (dates) {\n      // console.log(dates)\n      const slices = new Array(dates.length)\n      for (let j = 0; j < dates.length; j++) {\n        const candidate = dates[j]\n        let candidateDate = null\n        if (candidate.calendar_time) {\n          candidateDate = new Date(candidate.calendar_date + 'T' + candidate.calendar_time + 'Z')\n        } else {\n          candidateDate = new Date(candidate.calendar_date + 'T00:00:00')\n        }\n        const candidateTime = candidateDate.getTime()\n        // console.log(candidateDate)\n        for (let k = 0; k < days.length; k++) {\n          const day = days[k]\n          const dayTime = day[4]\n          if (dayTime >= candidateTime) {\n            // Advance to next day\n            k += 1\n            if (k === days.length) {\n              k = 0\n            }\n            const nextDay = days[k]\n            // slices[j] = [day, nextDay, candidate.slug, candidate.title.rendered, candidate.description]\n            slices[j] = {\n              r1: day,\n              r2: nextDay,\n              id: candidate.slug,\n              title: candidate.title.rendered,\n              text: candidate.description\n            }\n            // Terminate inner loop\n            break\n          }\n        }\n      }\n      drawSlices(element, slices, under, over, dimensions)\n    })\n\n  })\n}\n","export const defaultTags = {\n  cosmicDawn: \"Aries, Taurus and Gemini. Earth begins her journey, we enter the great dance of Shiva to create a cosmos from this chaotic burst of solar energy - to become the Sun. (TNW3, p 258)\",\n  cosmicMidnight: \"Cancer, Leo, Virgo. Earth’s journey through the ecliptic is now farthest from the Sun. In the soul’s journey the true light is covered by veils of ego, waiting to be released. (Symbols, 18)\",\n  cosmicSunset: \"Libra, Scorpio and Sagittarius, The mellow rays of Sun shine forth once again; holding the hope of a greater light to come, both physically and spiritually. (TNW3, 257)\",\n  cosmicMidday: \"Capricorn, Aquarius and Pisces. Earth approaches closest to her Sun, unveiling fully the Earth and the soul’s perfection, instilling a new divine purpose in humanity. (TNW3, 256)\",\n  theSun: \"is the supreme symbol of the Eye that Sees, the Divine Consciousness, the upholding power that spurs the march of evolution and sustains the entire creation. (TMC, 144)\",\n  theEcliptic: \"The plane through which the Earth-family moves as they orbit around the sun on their yearly 'journey in Time'.\",\n  theZodiac: \"A belt of 9 degrees on either side of the ecliptic of the Sun – divided into twelve signs of 30 degrees each; Not to be confused with the Constellations of similar names. (TMC, 111)\",\n  ariesIngress: \"Sun enters Aries, opening of Zodiacal Year and leader of the ‘journey’; a Fire sign ruled by Mars, planet of vital force. Aries is related to Spirit, creation. (TMC, 112)\",\n  taurusIngress: \"Sun enters Taurus, Earth sign, of Fixed energy. Ruled by Venus. Taurus is related to physical matter; quickened by the spirit of Aries, it holds the potential of Divine life within. (TMC, 112)\",\n  geminiIngress: \"Sun enters Gemini, Air sign, related to Mind, of Mutable energy. Ruled by Mercury. A wavering, unsteady flow, sensitive and changeful but without force or direction. (TMC, 112)\",\n  cancerIngress: \"Sun enters Cancer/Summer Solstice. Ruled by Moon. Earth is farthest from her Sun; the soul is veiled by protective cover of ego until the true soul/light emerges. (TMC, 113)\",\n  leoIngress: \"Sun enters Leo, a Fire Sign ruled by the Sun, of Fixed energy quality; the true soul emerges which upholds the Play of creation, the active centre of light illuminating all. (TMC, 115)\",\n  virgoIngress: \"Sun enters Virgo, an Earth sign, ruled by Mercury. The body (our vehicle in this stage of evolution) is conscious of its potential, its need to return to an original stage of purity. (TMC, 116)\",\n  libraIngress: \"Sun enters Libra/Autumnal Equinox. An Air sign, ruled by Venus, sign of union or yoga, the soul emerges into the Light again moving beyond the hold of Mind, toward the Supramental harmony. (TMC, 117)\",\n  scorpioIngress: \"Sun enters Scorpio, water sign. The stagnant waters of this Fixed sign, are now unblocked and awakened from lower vital nature (Mars) to unveil the divinity within. (TMC, 119)\",\n  sagittariusIngress: \"Sun enters Sagittarius, Fire sign, ruled by Jupiter. Higher Mind emerges and leads Earth to the borderline, the realm of Supramental consciousness, the next evolutionary stage. (TMC, 121)\",\n  capricornIngress: \"Sun enters Capricorn, an Earth sign, ruled by Saturn. The bonds of ego created in Cancer are loosened as higher mind  forges a unity with all, humanity experiences their true ‘swadharma’. (TMC,123)\",\n  aquariusIngress: \"Sun enters Aquarius, air sign, ruled by Saturn and Uranus. The descending Supramental force flows into receptive vessels bringing forth the new consciousness, a new race. (TMC, 127)\",\n  piscesIngress: \"Sun enters Pisces, water sign, ruled by Jupiter/Pluto. Earth is bathed by the waters and the love of the Divine Mother, the annual revolution around her Sun is complete. (TMC, 128)\",\n  perihelion: \"Perihelion. The Sun has entered Capricorn, she is physically closest to her Sun – the symbol of Truth-Consciousness. It is Cosmic Midday in Earth’s journey. (TNW 1, p 330)\",\n  aphelion: \"Aphelion. Earth is farthest away from her Sun, Ancient societies celebrated the next six month period as a time of ‘gestation’ – preparing to receive ‘the light’ once again: Dakshinayan.\"\n}","import { createCusps } from './cusps.js'\nimport { yearlyData } from './data.js'\nimport { createDays, dayAngle } from './days.js'\nimport { zodiacGlyphDefs } from './glyphs.js'\nimport { createGradients } from './gradients.js'\nimport { lookupDatesForYear } from './net.js'\nimport { defaultTags } from './tags.js'\nimport { isLeapYear } from './time.js'\nimport { options } from './options.js'\nimport { drawDayLines, drawEllipses, drawCusps, drawGlyphs, drawSun, drawEarth,\n  drawMonthNames, drawCardinalPoints, drawQuarterLabels, addMouseEvents } from './draw.js'\nimport { SVG } from '@svgdotjs/svg.js'\n\n/**\n * Calculate the `a` and `b` parameters\n * \n * @param {Number} width Width of the full drawing area\n * @param {Number} height Height of the full drawing area\n * @returns Object Geometric dimensions\n */\nfunction calculateDimensions (width, height) {\n  const cx = width / 2\n  const cy = height / 2\n  const pad = width / 20\n  return {\n    a: cx - pad,\n    b: cy - pad,\n    cx: cx,\n    cy: cy,\n    padding: pad,\n    inset: width / 27,\n    line: pad / 30,\n    thinLine: pad / 60,\n    width: width,\n    height: height\n  }\n}\n\n/**\n * Estimate the angular offset between winter solstice and perihelion (projected forward a year)\n * - the whole drawing gets rotated by this amount.\n * \n * @param {number} currentYear Current year number\n * @param {Array.<string>} yearData Timings array for current year\n * @returns {number} Angle in radians\n */\nfunction calculateRotation (currentYear, yearData) {\n  const daysInYear = isLeapYear(currentYear) ? 366 : 365\n  const solstice = new Date(yearData[11])\n  const perihelion = new Date(yearData[12])\n  const solsticeTime = solstice.getTime()\n  const perihelionTime = perihelion.getTime()\n  // Calculate the number of days between the winter solstice and the perihelion (projected forward a year)\n  const perihelionDays = (perihelionTime + daysInYear * 86400000 - solsticeTime) / 86400000\n  return 2 * Math.PI * perihelionDays / daysInYear\n}\n\n/**\n * Combine default tags with any custom overrides that were provided.\n * \n * @param {Object} overrides Custom tags\n * @returns {Object} Tags\n */\nfunction parseTags (overrides) {\n  return {\n    cosmicDawn: overrides.tags.cosmicDawn ?? defaultTags.cosmicDawn,\n    cosmicMidnight: overrides.tags.cosmicMidnight ?? defaultTags.cosmicMidnight,\n    cosmicSunset: overrides.tags.cosmicSunset ?? defaultTags.cosmicSunset,\n    cosmicMidday: overrides.tags.cosmicMidday ?? defaultTags.cosmicMidday,\n    theSun: overrides.tags.theSun ?? defaultTags.theSun,\n    theEcliptic: overrides.tags.theEcliptic ?? defaultTags.theEcliptic,\n    theZodiac: overrides.tags.theZodiac ?? defaultTags.theZodiac,\n    solarIngress: [\n      overrides.tags.aquariusIngress ?? defaultTags.aquariusIngress,\n      overrides.tags.piscesIngress ?? defaultTags.piscesIngress,\n      overrides.tags.ariesIngress ?? defaultTags.ariesIngress,\n      overrides.tags.taurusIngress ?? defaultTags.taurusIngress,\n      overrides.tags.geminiIngress ?? defaultTags.geminiIngress,\n      overrides.tags.cancerIngress ?? defaultTags.cancerIngress,\n      overrides.tags.leoIngress ?? defaultTags.leoIngress,\n      overrides.tags.virgoIngress ?? defaultTags.virgoIngress,\n      overrides.tags.libraIngress ?? defaultTags.libraIngress,\n      overrides.tags.scorpioIngress ?? defaultTags.scorpioIngress,\n      overrides.tags.sagittariusIngress ?? defaultTags.sagittariusIngress,\n      overrides.tags.capricornIngress ?? defaultTags.capricornIngress,\n      overrides.tags.perihelion ?? defaultTags.perihelion,\n      overrides.tags.aphelion ?? defaultTags.aphelion\n    ]\n  }\n}\n\n/**\n * Render the Earth Calendar using SVG.js\n *\n * @param {string} element CSS query selector for target element\n * @param {Object} overrides Custom option overrides\n * @returns {Object} SVG.js object\n */\nexport function drawCalendar (element, overrides) {\n\n  const container = document.querySelector(element)\n  const w = container.clientWidth\n  const h = Math.max(container.clientHeight, w * options.relativeHeight)\n\n  const dimensions = calculateDimensions(w, h)\n\n  const draw = SVG().addTo(element).size(w, h).viewbox(0, 0, w, h)\n  const defs = draw.defs()\n  const glyphs = zodiacGlyphDefs(defs)\n  const group = draw.group().addClass('svg-base')\n  const under = group.group().addClass('svg-background')\n  const main = group.group().addClass('svg-lines')\n  const over = group.group().addClass('svg-overlay')\n  const text = draw.group().addClass('svg-text')\n  const top = draw.group().addClass('svg-top')\n\n  const time = new Date()\n  // time.setFullYear(time.getFullYear() + 1)\n\n  const currentYear = time.getFullYear() // local time\n  const yearData = yearlyData[currentYear]\n  const rotation = calculateRotation(currentYear, yearData)\n  const cusps = createCusps(rotation, dimensions)\n  const days = createDays(currentYear, yearData, cusps, rotation, dimensions)\n  const gradients = createGradients(draw)\n\n  const tags = parseTags(overrides)\n\n  // Async - fetch important dates from server and render them\n  lookupDatesForYear(element, currentYear, days, under, over, dimensions)\n\n  // drawQuarters(under, cusps, dimensions)\n\n  // Draw lines representing midnight local time of each day of the year\n  drawDayLines(main, days, rotation, dimensions)\n\n  // Draw outer rings\n  drawEllipses(main, under, rotation, gradients, dimensions)\n\n  // Draw glyphs\n  drawGlyphs(text, glyphs, rotation, dimensions)\n\n  // Draw month names\n  drawMonthNames(text, days, rotation, dimensions)\n\n  // Draw sign cusps\n  drawCusps(main, cusps, dimensions)\n\n  // Draw cardinal points\n  drawCardinalPoints(text, rotation, dimensions)\n\n  // Draw four quarters' labels\n  drawQuarterLabels(text, dimensions)\n\n  // Draw sun\n  drawSun(element, top, dimensions, tags)\n\n  // Draw earth\n  drawEarth(top, dayAngle(days, time), dimensions)\n\n  // Final adjustment (rotate into place)\n  const adjust = {\n    rotate: -(rotation * 180 / Math.PI),\n    origin: [dimensions.cx, dimensions.cy]\n  }\n  group.transform(adjust)\n  top.transform(adjust)\n\n  addMouseEvents(element, draw, rotation, gradients, dimensions, tags)\n\n  return draw\n}\n","/**\n * Write zodiac glyphs to SVG defs. Uses glyph paths from https://git.turiya.dev/solardisc/solardisc-lib/\n * \n * @param {Object} defs SVG.js defs object\n * @returns Object Glyph parameters and paths\n */\nexport function zodiacGlyphDefs (defs) {\n  return {\n    width: 360,\n    height: 360,\n    paths: [\n      // Aries\n      defs.path('m 202.53186,210.0205 c 0,24.03225 0.0988,48.06448 -0.0395,72.08683 -0.0791,14.94111 -5.61279,21.45313 -18.32062,22.32271 -13.19204,0.89924 -21.89779,-5.91912 -22.24366,-20.28707 -1.10674,-45.61383 -1.42296,-91.25729 -1.78857,-136.90075 -0.16804,-21.53217 -4.48633,-28.47899 -23.79513,-36.0286 -22.06578,-8.60693 -31.03834,-6.65036 -45.831212,9.94097 -1.284618,1.44272 -2.480301,3.01391 -3.992198,4.16019 -6.383562,4.88154 -10.869843,15.83044 -21.344421,9.35795 C 54.682218,128.19034 49.346113,118.47665 52.1031,105.32414 60.127022,66.91407 92.845254,49.018353 133.67634,61.657018 c 10.42517,3.231309 20.59342,7.984395 30.05018,13.468725 18.24158,10.573394 23.26146,10.296707 40.21842,-1.867637 23.08359,-16.56169 48.64749,-23.795077 75.76282,-11.838248 28.27147,12.480557 37.37249,45.623702 20.28708,71.325942 -3.15226,4.7432 -11.17618,10.01013 -15.74151,9.08126 -5.71162,-1.16604 -10.20778,-8.44883 -15.0992,-13.2118 -0.54349,-0.52373 -0.22728,-1.85775 -0.41504,-2.79652 -5.23729,-26.146909 -9.18007,-31.838757 -24.19034,-29.575853 -23.23183,3.507997 -42.24416,14.407483 -41.94772,38.805343 0.30633,24.98087 0.0692,49.98152 0.0692,74.97227 -0.0494,0 -0.0988,0 -0.13835,0'),\n      // Taurus\n      defs.path('m 238.64297,205.07242 c -0.68585,-15.45182 -4.59924,-29.4815 -14.07003,-41.11071 -13.42453,-16.46043 -30.70192,-27.44413 -52.51803,-22.97601 -26.28423,5.39603 -43.30948,22.6936 -50.19824,48.74585 -6.94929,26.32458 0.61525,48.5643 21.12017,66.44686 26.49604,23.11721 66.01316,18.51797 83.57296,-10.12639 7.71583,-12.5773 11.40732,-26.65741 12.09317,-40.9796 m -60.42549,105.57063 c -38.31688,2.09789 -92.226786,-41.65537 -98.248155,-81.01111 -5.275001,-34.45393 6.535757,-62.45278 28.735145,-87.98056 21.72533,-24.97305 18.8609,-18.48772 0.2824,-39.27506 C 101.15002,93.621637 93.06101,85.310737 92.718085,72.481289 92.274299,56.464651 101.11976,49.565797 115.7647,56.232672 c 10.74163,4.881645 21.12017,11.165251 30.49011,18.346514 22.22964,17.0555 44.71143,18.013674 66.9209,1.139723 7.35273,-5.587669 13.90865,-12.183941 21.16052,-17.912814 3.88313,-3.056072 8.18987,-6.364294 12.79919,-7.473759 4.90182,-1.180067 12.81936,-1.88609 15.06855,0.81697 3.49986,4.195794 5.7087,12.143597 4.23614,17.297565 -4.48829,15.703971 -10.51975,31.004499 -23.45005,42.421899 -7.99824,7.06023 -7.69566,7.71583 -0.78672,15.81492 6.69714,7.83686 13.8784,15.30053 19.97037,23.58117 20.01071,27.1718 24.33763,56.90546 12.80928,88.66641 -7.51411,20.68648 -17.90273,39.43643 -36.30976,52.82062 -16.1175,11.74015 -33.93954,17.94307 -60.45575,18.89116'),\n      // Gemini\n      defs.path('m 274.08331,59.751917 c -61.875,0.07423 -123.83398,0.15625 -185.708977,0.15625 -13.49914,0 -20.646475,6.183676 -21.376953,18.398438 -0.0022,0.02486 -0.0076,0.04735 -0.0098,0.07227 -0.07422,0.547403 -0.07422,1.105424 -0.07422,1.736329 10e-7,1.252529 -10e-7,2.5131 0.07422,3.691406 0.0063,0.111469 0.02023,0.213637 0.02734,0.324218 0.725485,14.092295 7.711301,21.218292 21.279297,21.531252 10.307862,0.15772 20.524143,0 31.054683,0 v 149.85938 c -13.52658,0.63078 -26.096884,0.31538 -38.445308,1.96679 -9.110999,1.10408 -13.36176,6.36496 -14.150391,17.13672 0.118167,-1.28592 0.29002,-2.49071 0.513672,-3.61718 -0.224013,1.12754 -0.393424,2.33377 -0.511719,3.62109 -0.23195,3.21947 -0.157248,6.99482 0.158203,11.24414 v 0.62109 c 0.705129,8.80483 6.207236,13.60205 17.0625,13.68555 64.704793,0.0742 129.483193,0.15725 194.197263,-0.1582 4.24933,-0.0835 10.53163,-2.43973 12.02539,-5.26953 3.14497,-6.28993 3.22876,-14.22997 2.05078,-21.38282 0.0376,0.41412 0.0475,0.83463 0.0723,1.25196 -0.0253,-0.41798 -0.036,-0.83915 -0.0742,-1.25391 -0.0789,-0.70512 -0.17858,-1.39253 -0.29688,-2.06055 0.11905,0.66624 0.22015,1.3528 0.29883,2.06055 -0.15772,-1.57661 -0.39952,-3.14357 -0.71484,-4.63672 -1.79994,-7.78424 -10.29926,-9.03712 -18,-8.88867 -10.84599,0.15772 -21.70085,0 -33.10352,0 v 0.71094 c -6.6e-4,0 -0.001,0 -0.002,0 v -0.71289 c 0,-49.99916 0.0835,-98.74751 0,-147.56836 v -0.71289 c 0,-1.08992 0.12058,-2.00384 0.34375,-2.76758 -0.22303,0.76524 -0.3418,1.68095 -0.3418,2.77344 v 0.70507 c 0,-5.81731 3.37858,-6.67966 7.94336,-6.60546 8.80483,0.23195 17.60923,0.31447 26.41406,0.38867 12.50674,0.167 17.76801,-4.5558 18.48242,-16.431647 -0.10079,1.223366 -0.26272,2.350309 -0.46484,3.416015 0.20163,-1.064764 0.3622,-2.189994 0.46289,-3.412109 0,-0.78863 0.0742,-1.568791 0.0742,-2.357422 0.0835,-2.755567 0,-5.584271 0,-8.414062 0,-0.705128 -2e-5,-1.335893 -0.0742,-1.966797 -0.15772,-3.105812 -0.58064,-5.691736 -1.33984,-7.820313 0.75976,2.129052 1.18401,4.715243 1.34179,7.822266 -0.47318,-12.970649 -5.34472,-17.136719 -19.1875,-17.136719 z m 16.01172,5.84375 c 0.45238,0.593398 0.85004,1.245682 1.19922,1.958985 -0.34904,-0.713403 -0.747,-1.365482 -1.19922,-1.958985 z M 75.839177,101.83199 c 0.544176,0.33316 1.114222,0.63999 1.708984,0.91993 0.594762,0.27994 1.213829,0.53296 1.859375,0.75976 -0.645401,-0.22669 -1.264695,-0.47985 -1.859375,-0.75976 -0.59468,-0.27992 -1.164844,-0.58672 -1.708984,-0.91993 z m 206.570313,2.8418 c -2.16862,0.52878 -4.68989,0.77555 -7.6211,0.75781 -6.57106,-0.11771 -13.14182,-0.20014 -19.71289,-0.29687 6.57259,0.0941 13.14745,0.17332 19.71094,0.29101 2.93272,0.02 5.4543,-0.22473 7.62305,-0.75195 z m -162.97852,0.36133 c 0.001,0 0.003,0 0.004,0 v 150.49023 h -0.084 v -0.004 h 0.0801 z m 42.21875,2.59766 h 36.63867 v 149.77539 h -36.63867 z m -42.29883,148.59375 v 0.004 c -5.11774,0.2071 -10.06534,0.30912 -14.94922,0.43164 4.88325,-0.12414 9.83216,-0.22848 14.94922,-0.43554 z m -44.306635,3.48437 c -1.254488,0.59658 -2.355529,1.34507 -3.3125,2.25195 -0.637612,0.60424 -1.212107,1.27766 -1.72461,2.02539 0.512453,-0.74762 1.08704,-1.42141 1.72461,-2.02539 0.957209,-0.90677 2.057564,-1.65613 3.3125,-2.25195 z m -5.03711,4.2793 c -1.02485,1.49562 -1.805417,3.28368 -2.363281,5.38086 0.557763,-2.09807 1.338283,-3.88508 2.363281,-5.38086 z m -1.009765,28.90039 c 0.470066,0.7769 1.01808,1.4882 1.644531,2.13281 -0.626518,-0.64488 -1.174601,-1.3555 -1.644531,-2.13281 z m 2.642578,3.04883 c 0.704999,0.57663 1.489222,1.08685 2.353516,1.52539 -0.864318,-0.43846 -1.6487,-0.94882 -2.353516,-1.52539 z m 3.712891,2.13086 c 0.472709,0.18404 0.967243,0.34981 1.480468,0.49804 -0.514001,-0.14831 -1.007159,-0.31384 -1.480468,-0.49804 z'),\n      // Cancer\n      defs.path('M 185.89062 66.103516 C 139.00383 65.989265 100.20372 80.727045 77.898438 104.69336 C 59.547991 124.39724 58.291049 153.40844 74.910156 173.24414 C 84.788461 185.02955 99.817349 188.84245 115.19727 183.38477 C 129.15346 178.42804 138.90843 169.57931 142.63477 156.90625 C 144.99888 148.83838 144.32137 140.11864 145.70117 131.78711 C 146.52729 126.83039 146.96603 120.26545 150.5957 117.54102 C 160.12246 110.37836 171.67071 106.00189 184.64258 104.85938 C 204.33767 103.11926 220.66701 110.43117 236.85547 118.64844 C 250.37223 125.52107 263.86217 132.47401 277.69531 138.81055 C 284.46248 141.90411 287.02052 139.93512 287.27539 133.0625 C 287.76754 119.77423 281.16737 109.21036 271.32422 99.701172 C 246.64604 75.857895 215.15642 66.62204 185.89062 66.103516 z M 101.99609 124.54688 C 109.71242 124.45898 116.56738 131.67432 116.41797 139.72461 C 116.26857 147.52004 109.61575 154.33006 102.11914 154.34766 C 93.989749 154.36523 87.87208 147.80904 87.96875 139.15234 C 88.065424 130.9087 94.077627 124.64357 101.99609 124.54688 z M 255.59961 162.47461 C 233.86642 162.61211 213.69986 179.44141 212.2168 201.53906 C 211.56645 211.27676 214.01019 220.39988 221.16406 227.9668 C 228.08063 235.27885 228.27387 236.5628 219.23047 241.48438 C 215.47776 243.52333 211.50462 245.53523 207.3125 246.60742 C 177.57212 254.16557 148.97592 252.0128 122.21484 237.6875 C 106.87007 229.47902 92.060582 220.48779 76.583984 212.49023 C 66.064117 207.05014 62.847697 209.1862 63.533203 219.96094 C 63.682607 222.22838 63.884831 224.68958 64.974609 226.67578 C 69.852242 235.54341 73.683024 245.1743 80.371094 252.85547 C 104.7241 280.84693 138.60394 292.41415 177.66016 293.83789 C 181.3074 293.83789 184.97289 293.99609 188.61133 293.80273 C 192.24979 293.6006 195.8967 293.21284 199.48242 292.61523 C 232.54487 287.13997 263.26973 277.7894 282.61328 251.16016 C 297.89653 230.10285 300.80508 207.4644 291.28711 183.9375 C 287.33227 174.15588 279.09012 167.56423 267.72656 164.18945 C 263.70306 162.99751 259.62427 162.44915 255.59961 162.47461 z M 256.03711 193.06836 C 264.06104 193.31444 269.88671 199.60694 269.76367 207.87695 C 269.64064 216.05906 263.46338 222.26291 255.45703 222.25391 C 247.0552 222.23633 241.39455 216.01507 241.60547 207.01562 C 241.79882 198.49076 247.67923 192.80471 256.03711 193.06836 z'),\n      // Leo\n      defs.path('m 149.56999,247.07957 c 0.31366,-9.43068 -5.80268,-15.91295 -15.2229,-16.14297 -10.60166,-0.26138 -19.02863,7.28734 -19.54094,17.4917 -0.44957,8.99155 7.74737,17.57534 17.24078,18.03537 9.25293,0.46003 17.14667,-8.27013 17.52306,-19.3841 m 126.509,-116.05371 c -0.2823,20.25189 -8.22832,39.22824 -15.98614,58.20459 -8.58379,20.98377 -18.91362,41.3193 -21.9352,64.22684 -1.96559,14.83606 0.24047,28.59522 9.32612,40.88018 1.43238,1.94469 2.572,4.15075 3.58616,6.35682 2.16425,4.68397 7.53827,10.5912 1.36965,14.12509 -3.31433,1.89241 -12.16996,-0.41821 -14.76287,-3.75345 -8.6988,-11.21852 -17.03167,-23.13755 -23.033,-35.93482 -8.57334,-18.29676 -5.21719,-37.04309 0.33457,-56.16582 7.06777,-24.35037 12.02358,-49.34896 16.84347,-74.26391 1.43237,-7.43371 0.18819,-15.7143 -1.29646,-23.32575 -3.04249,-15.5993 -16.55072,-28.166553 -29.3689,-28.553399 -12.77637,-0.397301 -29.76621,12.462709 -33.99015,26.263689 -5.56221,18.13992 -2.40471,35.65253 6.38818,51.81641 6.73321,12.3477 10.95714,25.18679 13.26776,38.89367 4.18212,24.94632 -1.67284,47.29973 -17.42896,66.92431 -5.06036,6.30454 -10.71667,12.2536 -16.73892,17.64853 -22.58342,20.22053 -52.673746,13.12138 -63.808628,-15.27518 -7.705548,-19.62458 -5.938604,-39.39553 2.310619,-58.46598 4.056652,-9.35748 11.783109,-15.36927 21.464709,-18.64178 2.56155,-0.86779 5.25901,-1.33827 7.82056,-2.19561 10.35073,-3.48161 13.22594,-8.87654 10.02662,-19.31092 -2.51973,-8.25967 -5.88633,-16.29979 -7.98784,-24.66402 -13.18412,-52.2869 23.56622,-105.640243 76.50134,-110.993351 16.36253,-1.651935 31.19859,3.052945 43.59856,13.957811 21.46471,18.882252 32.1291,42.95033 33.49875,72.24605'),\n      // Virgo\n      defs.path('m 289.70877,222.98425 c 14.77796,1.20963 27.67095,-17.13264 17.88349,-29.69852 -9.3615,-13.19935 -34.80785,-11.42412 -37.95987,6.09675 -3.46362,12.65354 7.56249,24.0291 20.07638,23.60177 z M 65.895579,189.2956 c -0.411295,-19.57509 1.132,-39.35232 -0.971817,-58.79762 -5.042983,-15.63923 -19.144473,4.84833 -29.814696,-0.60422 -13.210859,-0.76048 -18.78035,-16.1707 -12.15951,-26.61882 10.932771,-17.622892 33.72683,-26.277537 53.73741,-20.966289 23.958214,4.082284 47.968464,-1.722294 71.905844,-1.932964 17.04419,-3.675031 25.66346,21.786393 41.35019,13.228436 23.24729,-12.990445 53.3724,-15.662827 77.49606,-3.612768 17.48589,10.443545 26.93044,33.442185 19.86669,52.935985 -7.35822,15.02233 13.18225,10.27668 21.14486,14.95755 28.55581,9.24759 41.2165,48.43083 22.68767,72.28446 -10.19252,16.01052 -30.51094,23.95471 -48.86393,19.10543 -15.56628,-0.0368 -23.30346,-14.79875 -33.32035,-22.2224 -9.85594,7.35093 -6.6622,24.23241 -5.94984,35.39169 5.35034,7.66714 1.6854,26.36176 -7.6831,12.66842 -14.90475,-17.90025 -17.16763,-44.07962 -6.81686,-64.74467 9.34582,-22.72781 16.5099,-47.63367 13.265,-72.38234 -2.69106,-14.17628 -19.86663,-11.91229 -30.54253,-10.17686 -20.49958,2.41245 -12.55115,26.90384 -14.16366,40.87086 -0.64728,23.31683 0.19031,46.77909 -1.73655,69.99781 -1.0065,12.65699 -14.31378,23.99627 -26.85621,18.02883 -16.33264,-5.79972 -16.57282,-24.80564 -15.45562,-39.18301 -0.39878,-26.56164 0.77285,-53.22739 -0.52959,-79.72562 -4.34123,-16.81635 -30.08933,-21.24809 -40.57663,-7.71201 -3.18675,11.2858 -0.8952,23.48454 -1.63031,35.15723 -0.25158,26.55972 0.39322,53.14848 -0.2794,79.68963 -1.30474,15.24511 -20.62434,20.52746 -33.137318,16.2204 -12.886983,-3.61059 -10.72435,-18.99852 -10.998394,-29.34381 -0.154303,-14.17085 0.03245,-28.34228 0.03245,-42.51333 z'),\n      // Libra\n      defs.path('M 176.42969 81.919922 C 137.04283 81.834731 110.1033 105.27627 102.48242 147.78711 C 101.53325 153.10426 100.81244 158.50902 99.283203 163.66797 C 97.024504 171.28777 92.438086 175.08399 83.482422 175.24219 C 69.991799 175.47947 56.421295 177.01768 43.115234 179.30273 C 30.406804 181.49112 24.474652 189.16353 25.441406 199.33203 C 26.452104 209.9136 34.335523 216.28614 47.246094 216.48828 C 59.928158 216.68167 72.628483 216.52344 85.310547 216.52344 C 98.001398 216.52344 110.70074 216.69824 123.38281 216.47852 C 137.17224 216.24122 143.30574 210.82852 144.82617 197.26758 C 145.36229 192.57442 144.7031 187.71465 144.24609 182.96875 C 143.52542 175.49838 141.584 168.028 141.83008 160.61914 C 142.33104 144.72921 150.29363 133.07396 165.26953 127.20312 C 180.48275 121.2444 194.66849 124.05811 206.26953 135.47461 C 217.38721 146.43409 222.0878 160.10029 219.97852 175.83203 C 219.38089 180.29668 218.88965 184.7961 218.72266 189.28711 C 218.02836 207.25117 224.70782 215.36331 242.63672 215.96094 C 266.47163 216.74313 290.35943 216.63768 314.2207 216.40039 C 325.2417 216.30371 333.69528 208.24469 332.97461 198.5332 C 332.15726 187.59129 327.09513 176.35938 314.03516 176.51758 C 300.78184 176.68457 287.51113 175.57712 274.24023 175.05859 C 269.38008 174.86524 265.54 174.07298 264.66992 167.92969 C 263.4571 159.34315 261.75088 150.77501 259.50977 142.39062 C 250.52774 108.69483 228.83833 89.017335 194.05273 83.410156 C 187.93801 82.424726 182.05638 81.932092 176.42969 81.919922 z M 220.41211 236.0918 C 191.68411 236.09182 162.95627 236.10889 134.23047 236.14844 C 111.8545 236.18359 89.478516 236.20999 67.111328 236.83398 C 55.536637 237.15916 43.97233 238.92624 36.519531 249.50781 C 32.292175 255.4929 28.371259 261.91732 32.150391 269.53711 C 35.911946 277.12173 42.917328 278.10648 50.642578 278.08008 C 94.4893 277.93068 138.34468 278.00977 182.19141 278.00977 L 240.25 278.00977 C 265.35047 278.00977 290.45031 278.09667 315.55078 277.98242 C 331.56376 277.90332 337.21371 270.82062 333.61914 255.74805 C 330.88586 244.25245 319.94571 236.15822 306.5957 236.14062 C 277.8699 236.10997 249.1401 236.09177 220.41211 236.0918 z'),\n      // Scorpio\n      defs.path('m 254.40407,173.50773 c 0.008,13.64584 -0.0919,27.28466 0.0352,40.92345 0.13413,15.42484 8.65486,23.1549 24.15734,22.17363 21.1712,-1.33422 27.9906,-8.18892 29.17658,-29.24717 0.26826,-4.74393 1.36247,-9.55846 0.84006,-14.19649 -0.50121,-4.34154 0.86832,-15.74956 -0.55062,-19.97816 -4.0027,2.50609 -15.44601,14.04825 -18.57334,19.71695 -2.0331,3.67091 -8.82427,8.49955 -12.96109,6.93942 -4.96276,-1.8778 -8.81723,-5.24514 -7.32063,-8.85957 9.31138,-22.41365 24.01615,-41.20585 45.5615,-52.81859 2.32256,-1.25657 6.02169,-4.77922 9.49493,-4.65215 4.5392,0.16238 8.91603,4.41919 11.69039,6.55819 12.86226,9.92555 23.8679,22.29365 35.45947,33.83581 1.50366,1.49659 2.08253,4.09446 3.00025,5.80991 3.61442,6.77704 3.26851,13.90705 -1.47542,17.14026 -4.35566,2.97908 -10.40558,-2.3296 -15.13539,-4.51802 -2.97202,-1.36954 -4.80042,-5.03338 -7.59594,-7.03118 -2.92258,-2.0896 -10.94211,-10.04556 -14.16825,-11.70453 -1.03068,3.43088 1.93428,13.44113 1.56014,16.9426 -1.35543,12.57284 -1.73663,25.2798 -3.52266,37.78909 -4.03094,28.31534 -24.74327,38.66444 -50.77136,40.40105 -11.5633,0.77654 -23.47962,-0.63535 -34.95825,-2.63317 -18.30505,-3.17672 -26.44456,-17.69795 -31.64736,-33.32045 -3.03556,-9.11371 -3.40971,-19.25104 -4.06623,-28.98599 -0.97421,-14.53533 -0.90362,-29.14127 -1.71544,-43.69074 -0.72712,-12.98934 -6.29701,-19.22986 -16.22961,-19.22279 -15.82016,0.014 -24.06556,6.47348 -25.04683,20.03462 -1.0942,15.16365 -1.73661,30.36257 -2.90847,45.51915 -0.95302,12.31867 -2.03312,24.65149 -3.72033,36.89254 -1.90603,13.80116 -8.93721,20.14758 -20.91704,20.0205 -13.17994,-0.1412 -22.07481,-7.03825 -22.97136,-20.44409 -1.39777,-20.85351 -0.79065,-41.84117 -2.04018,-62.70882 -0.62827,-10.53971 -2.35784,-21.29826 -5.57693,-31.31558 -3.3391,-10.39147 -12.869315,-8.5419 -20.980586,-6.64293 -8.245404,1.92724 -11.619806,7.78655 -11.528033,16.23668 0.24002,20.93823 1.256577,41.95413 -0.204724,62.78647 -0.861249,12.31163 -4.150939,25.13154 -9.381969,36.29954 -6.92529,14.76125 -21.601824,14.58477 -27.517617,-0.61416 -5.50637,-14.15414 -8.492506,-29.819 -9.565537,-45.0391 -1.433062,-20.47939 0.472981,-41.18467 -0.08471,-61.76993 -0.127069,-4.9063 -3.204976,-11.83159 -7.05942,-13.94941 -3.819146,-2.0896 -10.33499,0.64946 -15.6436754,1.44012 -0.811833,0.12001 -14.6200567,10.84327 -22.0465676,4.40507 -5.70401,-4.94864 -5.965208,-17.96622 0.268259,-24.47501 10.320871,-10.80796 22.63956,-18.382708 38.304411,-18.185048 5.054546,0.0565 10.094971,1.094208 15.156574,1.341288 15.368357,0.76947 30.4261,2.73905 45.505021,-4.623919 15.276574,-7.468866 31.520304,-3.04261 45.865044,4.009739 13.9494,6.8547 26.3034,4.35568 38.84798,-1.913091 23.87496,-11.916299 46.90986,-7.723008 69.16114,3.903861 11.91629,6.2264 13.48349,18.47449 13.73057,30.4967 0.28944,13.63173 0.0707,27.27758 0.0707,40.92345'),\n      // Sagittarius\n      defs.path('m 155.63747,218.76558 c -20.90018,17.35249 -39.18064,32.66833 -57.649996,47.74602 -6.011367,4.92736 -12.359437,9.49337 -18.879964,13.7391 -6.906502,4.49211 -14.149707,10.86481 -21.729615,0.87872 -6.890078,-9.08276 -6.569801,-18.09981 1.97094,-25.63865 17.475669,-15.43082 34.984188,-30.86985 53.198965,-45.40554 22.61653,-18.05874 22.95323,-17.68097 5.68287,-41.75929 -7.90018,-11.00441 -21.286151,-22.87112 -6.77511,-35.7315 14.32216,-12.68793 24.91597,2.77574 35.3291,10.64307 9.14024,6.8983 17.21288,20.47314 26.16424,20.83448 8.59822,0.34492 17.62348,-12.63044 26.65696,-19.49588 12.75363,-9.70688 25.68792,-19.18381 43.27035,-32.27414 -23.06,-2.00379 -40.47819,-3.86797 -57.94564,-4.91914 -9.94504,-0.59128 -22.9204,2.75932 -22.08274,-12.868601 0.73089,-13.804792 11.01262,-21.130118 24.64496,-20.941237 14.95451,0.205307 29.90901,1.699936 44.81425,3.153504 14.31395,1.396083 28.6197,3.096019 42.82689,5.321539 21.10549,3.301324 34.04799,16.966504 32.13454,38.071995 -2.43904,26.77193 -7.01326,53.46175 -12.73721,79.73274 -1.56853,7.18572 -9.44409,16.00568 -16.39986,18.42007 -17.47567,6.07707 -24.88312,-2.71004 -20.21035,-20.75235 4.58244,-17.65634 8.61465,-35.45228 12.88502,-53.18253 -1.65066,-1.03475 -3.29311,-2.06127 -4.94377,-3.09602 -5.19014,3.25205 -10.60202,6.19203 -15.52937,9.80542 -15.41439,11.31648 -30.3689,23.26531 -46.03787,34.20403 -9.74795,6.80795 -14.68351,13.30384 -6.24132,24.63675 7.12003,9.55906 13.48452,19.71762 19.55337,29.97471 6.15098,10.3885 7.02969,21.3765 -4.28679,28.50473 -11.82565,7.4403 -21.01515,2.84143 -28.4226,-8.83639 -8.47504,-13.36954 -18.42008,-25.8111 -29.26025,-40.76561'),\n      // Capricorn\n      defs.path('m 166.13897,288.15971 c -10.18784,0 -16.66267,-7.65965 -20.21715,-16.3456 -16.82121,-41.71091 -33.10006,-83.56367 -49.595853,-125.42477 -1.109733,-2.84526 -2.686721,-5.53198 -4.747652,-9.63715 -9.470271,8.68595 -18.323097,16.58758 -27.009046,24.72283 -10.738536,9.87078 -19.265952,11.37267 -26.374913,4.42224 -8.21035,-8.06016 -8.06016,-23.69654 1.101388,-32.45758 17.146614,-16.35395 34.668702,-32.14886 52.132382,-48.18574 2.761815,-2.603281 5.365096,-5.290001 8.210349,-7.818188 9.311735,-8.293788 13.116535,-7.743094 17.688965,4.188613 13.58379,35.227745 26.70032,70.605665 40.04214,105.908505 3.24576,8.53576 6.63336,16.98808 11.0556,28.04368 3.63792,-12.16533 6.80024,-21.80248 9.32843,-31.51472 3.47938,-13.10819 6.55827,-26.29982 9.71224,-39.41636 3.62958,-15.47784 10.58,-20.92638 26.77542,-20.84294 11.84827,0.0751 23.77163,0 35.46137,0 0.78432,-1.97749 1.4268,-3.07888 1.74386,-4.2637 5.28166,-21.485422 14.05105,-29.069983 33.32534,-29.069983 22.58681,0 37.51396,10.187843 42.01964,29.069983 3.70467,15.47784 -3.39595,27.4012 -15.09403,36.08715 -7.80984,5.84904 -9.1532,11.5312 -7.01718,20.69275 3.22907,13.74232 5.20656,27.87681 6.62502,41.94454 2.92035,28.66947 -16.8212,53.15033 -45.24871,56.22921 -4.43058,0.4756 -11.13904,-1.18482 -13.27506,-4.3388 -1.9775,-2.84525 -0.30872,-9.56205 1.81896,-13.50869 3.23741,-6.00758 8.52741,-10.82198 12.54915,-16.42905 20.30893,-28.03534 8.76939,-53.07523 -14.61008,-70.13006 -12.47406,-9.1699 -27.80172,-2.68673 -34.03457,13.18328 -6.70846,17.2968 -12.87457,34.83558 -19.43283,52.20748 -3.87155,10.27128 -7.97672,20.53421 -11.99846,30.80549 -0.79267,1.96915 -1.73552,4.02174 -2.76181,5.92414 -3.95499,7.74309 -8.61086,15.87 -18.17291,15.95344 M 289.58624,111.47866 c -6.39973,-0.4005 -12.39896,5.29001 -12.55749,11.53121 -0.0834,6.2412 5.69051,12.0068 12.0819,12.0068 6.48317,-0.0834 12.4073,-5.7656 11.84826,-12.0068 -0.55069,-6.7919 -4.42224,-10.98051 -11.37267,-11.53121'),\n      // Aquarius\n      defs.path('M 180.39258 99.527344 C 171.32681 99.423381 162.6064 104.43432 153.73242 114.82031 C 138.09072 133.12167 122.44128 132.98319 107.36719 117.88477 C 85.254736 95.739884 64.164594 99.558303 42.068359 116.4082 C 32.82443 123.46278 23.806324 129.99966 31.193359 146.47656 C 38.35335 162.49126 48.376702 157.86139 57.3125 150.85547 C 68.924173 141.76561 78.44394 142.28396 90.671875 151.13867 C 104.1891 160.92589 118.95411 174.55662 136.78516 173.38086 C 148.04005 172.64296 158.00632 162.74255 166.60156 154.28516 C 178.26999 142.78701 187.5615 141.19769 200.79492 151.39844 C 220.47475 166.56984 242.6364 173.68936 263.71094 155.83398 C 276.83894 144.72504 287.37167 144.53841 299.86719 156.1582 C 310.59502 166.11569 322.63781 162.20646 326.99219 148 C 329.29506 140.46701 323.99902 124.19397 318.14453 118.50977 C 295.92666 96.948702 270.98536 96.2669 246.31055 112.37891 C 232.23383 121.56608 219.56713 124.00712 205.53906 111.56836 C 196.66002 103.69277 188.39179 99.619076 180.39258 99.527344 z M 184.375 185.05664 C 175.30923 184.94987 166.58882 190.06463 157.71484 200.66602 C 142.07314 219.33227 126.4237 219.18555 111.34961 203.78711 C 89.237157 181.19625 68.147016 185.08854 46.050781 202.28711 C 36.806852 209.47954 27.788746 216.14573 35.175781 232.95508 C 42.335772 249.29413 52.359124 244.56564 61.294922 237.42188 C 72.906595 228.14551 82.426362 228.68174 94.654297 237.71484 C 108.17152 247.70478 122.93653 261.59432 140.76758 260.40234 C 152.02247 259.64823 161.98874 249.55374 170.58398 240.91797 C 182.25241 229.18466 191.54588 227.57114 204.7793 237.97461 C 224.45913 253.45414 246.61882 260.71803 267.69336 242.50586 C 280.82136 231.16989 291.35604 230.98326 303.85156 242.83008 C 314.57939 252.99029 326.62023 249.00228 330.97461 234.50391 C 333.27748 226.82496 327.98954 210.22546 322.12695 204.42773 C 299.90908 182.42069 274.96778 181.73161 250.29297 198.16797 C 236.21625 207.54163 223.54955 210.03974 209.52148 197.34961 C 200.64245 189.31058 192.37421 185.15085 184.375 185.05664 z'),\n      // Pisces\n      defs.path('m 178.42334,240.67576 c -15.7102,25.44745 -35.8665,44.25937 -63.05206,54.28469 -9.45877,3.48583 -19.608942,5.38719 -29.615071,6.87563 -3.130517,0.46093 -8.786573,-2.07421 -9.69884,-4.55174 -0.998693,-2.71759 1.219557,-8.00875 3.735494,-10.30382 4.40769,-4.00437 9.929307,-6.99085 15.33569,-9.68923 33.340967,-16.66089 48.791887,-46.52563 61.477197,-81.53748 -6.44348,0 -10.99522,0.0384 -15.54695,-0.01 -15.99829,-0.17285 -31.99657,-0.18246 -47.994852,-0.63379 -10.467064,-0.29768 -15.018797,-4.8014 -15.172442,-13.90487 -0.153645,-10.14057 4.964654,-16.0367 15.191649,-16.18074 20.338755,-0.29769 40.696725,-0.0864 62.408675,-0.0864 -6.41468,-26.04284 -18.83111,-46.71769 -36.90361,-63.74348 -9.10346,-8.565711 -19.820201,-15.431722 -29.864742,-22.989134 -2.707993,-2.035797 -6.52031,-3.216942 -8.248815,-5.828908 -2.343087,-3.55304 -5.569632,-9.794867 -4.119607,-11.830664 2.208646,-3.111311 8.373652,-5.502411 12.368422,-4.907037 39.342722,5.886525 69.457142,26.081237 89.853502,60.747393 9.57401,-10.42865 18.19734,-20.732473 27.78095,-30.047203 17.13141,-16.660879 38.38243,-25.581891 61.69806,-29.115726 4.68617,-0.710607 12.24359,1.584464 14.64428,5.099094 4.35008,6.347458 -1.7285,11.081645 -6.86601,14.701904 -2.20864,1.555656 -4.64775,2.871242 -7.15409,3.898742 -36.77877,15.220456 -52.83467,46.717689 -65.86569,83.611689 10.38065,0 19.35927,-0.0576 28.3187,0.01 11.23529,0.0864 22.47058,0.0864 33.69626,0.46094 10.8992,0.3553 14.88437,4.17722 15.01881,13.58797 0.13444,11.16807 -3.59146,16.12313 -14.6635,16.59366 -16.99698,0.72022 -34.04197,0.43213 -51.05815,0.55697 -3.69709,0.0288 -7.40377,0.01 -12.05153,0.01 5.71367,26.9743 19.79139,47.87962 38.87219,65.41436 9.44916,8.69054 20.96293,15.11482 30.82502,23.42125 4.15802,3.52424 9.72765,9.97733 8.9018,13.86646 -1.7285,8.10478 -10.02533,6.04977 -16.32478,4.83982 -33.78269,-6.53952 -59.91194,-24.71764 -79.45366,-52.74825 -1.93017,-2.76561 -3.71628,-5.64645 -6.4723,-9.87169')\n    ]\n  }\n}","import { parametricAngle } from './ellipse.js'\n\nexport function createCusps (offset, dimensions) {\n  const cusps = new Array(12)\n  const step = Math.PI / 6\n  let target = Math.PI + offset\n  let actual = target\n\n  const a2 = dimensions.a - dimensions.inset\n  const b2 = dimensions.b - dimensions.inset\n\n  for (let i = 0; i < 12; i++, target -= step) {\n    if (target < 0) {\n      target += Math.PI * 2\n    }\n    actual = parametricAngle(target, a2, b2)\n    cusps[i] = [\n      target,\n      actual,\n      dimensions.cx + Math.cos(actual) * a2,\n      dimensions.cy + Math.sin(actual) * b2\n    ]\n  }\n  return cusps\n}\n","/**\n * Render an image of the Earth on the provided SVG object.\n * Adapted from http://superawesomevectors.com/globe-flat-vector/\n * N.B. the license does not allow resale. https://superawesomevectors.com/licence/\n *\n * @param {Object} svg SVG.js object\n * @param {String} waterColor Background color for oceans\n * @param {String} landColor Background color for land masses\n */\nexport function svgEarth (svg, waterColor, landColor) {\n\n  // Create a group to contain the different paths\n  const g = svg.group()\n\n  g.path(\n    'm 0,0 c 18.826,-81.506 -30.381,-162.469 -109.905,-180.837 -79.528,-18.368 -159.256,32.814 -178.081,114.319 -18.826,81.507 30.382,162.471 109.906,180.838 C -98.552,132.69 -18.822,81.505 0,0'\n  ).fill(waterColor).transform({\n    a: 1, b: 0, c: 0, d: 1, e: 562.5703, f: 355.6021\n  })\n  g.path(\n    'm 0,0 c -0.391,-0.335 -0.498,-0.689 -0.36,-1.186 0.151,-0.544 0.218,-1.11 0.343,-1.784 -1.674,-0.099 -3.204,-0.187 -4.77,-0.279 -0.155,0.675 -0.31,1.298 -0.444,1.925 -0.132,0.632 -0.247,1.267 -0.368,1.902 -0.054,0.301 -0.02,0.563 0.178,0.836 0.422,0.581 0.799,1.201 1.2,1.798 0.064,0.098 0.155,0.216 0.259,0.246 0.99,0.32 1.984,0.624 3.029,0.949 C -0.29,3.263 0.33,2.168 0.974,1.019 0.644,0.67 0.344,0.307 0,0 m -14.345,-15.861 c 0.084,-0.364 0.172,-0.744 0.27,-1.164 0.613,0.022 1.199,0.041 1.745,0.061 0.219,-0.953 0.472,-1.84 0.613,-2.743 0.108,-0.663 0.277,-1.236 0.785,-1.716 0.542,-0.512 1.021,-1.09 1.523,-1.642 0.131,-0.143 0.246,-0.3 0.418,-0.516 -0.243,-0.084 -0.418,-0.162 -0.594,-0.205 -2.651,-0.615 -5.299,-1.218 -7.947,-1.85 -0.445,-0.104 -0.761,-0.037 -1.065,0.302 -0.212,0.241 -0.502,0.416 -0.714,0.66 -0.788,0.906 -1.798,1.378 -2.974,1.536 -0.314,0.042 -0.62,0.148 -1.018,0.246 1.243,2.244 2.611,4.346 3.174,6.864 -0.135,0.103 -0.283,0.23 -0.441,0.336 -0.355,0.232 -0.698,0.491 -1.076,0.675 -1.984,0.958 -3.254,2.665 -4.581,4.314 -0.259,0.324 -0.351,0.676 -0.401,1.09 -0.122,1.014 -0.317,2.018 -0.502,3.024 -0.078,0.416 -0.185,0.823 -0.296,1.295 0.465,0.211 0.855,0.426 1.27,0.559 0.407,0.131 0.677,0.384 0.926,0.709 0.832,1.09 1.684,2.163 2.52,3.255 0.216,0.291 0.462,0.414 0.832,0.492 0.775,0.159 1.523,0.454 2.277,0.702 0.374,0.123 0.748,0.261 1.166,0.408 1.004,-1.513 1.955,-2.938 2.985,-4.479 -0.354,-0.083 -0.6,-0.154 -0.852,-0.196 -0.765,-0.123 -1.526,-0.251 -2.291,-0.347 -0.385,-0.049 -0.58,-0.244 -0.634,-0.615 -0.009,-0.074 -0.046,-0.148 -0.037,-0.218 0.102,-1.01 -0.302,-1.901 -0.653,-2.804 -0.047,-0.111 -0.064,-0.234 -0.111,-0.412 0.337,-0.246 0.653,-0.529 1.02,-0.723 0.56,-0.296 0.813,-0.748 0.941,-1.346 0.121,-0.547 0.33,-1.076 0.522,-1.669 1.351,0.397 2.61,0.767 3.925,1.154 0.939,-0.883 1.88,-1.764 2.9,-2.724 -1.25,-0.797 -2.423,-1.545 -3.625,-2.313 m -23.865,-0.96 c -0.493,-0.141 -0.647,-0.463 -0.688,-0.935 -0.037,-0.494 -0.135,-0.984 -0.208,-1.491 -0.163,-0.055 -0.297,-0.119 -0.438,-0.148 -1.271,-0.246 -2.541,-0.5 -3.818,-0.719 -0.249,-0.044 -0.542,0.008 -0.791,0.096 -0.775,0.269 -1.543,0.566 -2.306,0.876 -0.326,0.133 -0.607,0.151 -0.91,-0.061 -0.882,-0.63 -1.856,-0.691 -2.906,-0.541 -1.207,0.176 -2.432,0.216 -3.643,0.349 -0.617,0.069 -1.176,-0.045 -1.744,-0.276 -2.029,-0.826 -4.066,-1.632 -6.101,-2.443 -0.183,-0.074 -0.377,-0.119 -0.606,-0.19 -0.3,0.369 -0.591,0.733 -0.939,1.16 -0.532,-0.202 -1.081,-0.41 -1.686,-0.641 -0.07,0.203 -0.152,0.375 -0.189,0.557 -0.15,0.731 -0.348,1.461 -0.407,2.202 -0.035,0.468 0.15,0.952 0.229,1.393 0.204,0.057 0.305,0.121 0.394,0.106 1.016,-0.163 1.373,0.622 1.801,1.274 0.094,0.141 0.121,0.394 0.065,0.556 -0.495,1.347 -0.269,2.701 -0.094,4.061 0.036,0.266 0.074,0.531 0.122,0.854 0.574,-0.148 1.094,-0.313 1.627,-0.411 0.357,-0.066 0.738,-0.088 1.093,-0.037 0.976,0.136 1.942,0.32 2.995,0.367 -0.504,-0.632 -1.007,-1.263 -1.565,-1.964 0.516,-0.207 0.969,-0.393 1.425,-0.573 0.418,-0.165 0.861,-0.283 1.248,-0.498 0.524,-0.292 1.002,-0.189 1.501,0.015 0.578,0.236 1.151,0.476 1.735,0.689 0.332,0.119 0.543,0.308 0.647,0.655 0.179,0.595 0.388,1.177 0.612,1.846 -0.873,0.217 -1.683,0.418 -2.66,0.662 2.572,2.053 4.964,4.125 7.663,6.068 -0.021,-0.504 0.018,-0.883 -0.071,-1.23 -0.059,-0.234 -0.251,-0.499 -0.458,-0.623 -0.629,-0.374 -0.928,-0.851 -0.745,-1.596 0.056,-0.212 0.022,-0.446 0.039,-0.668 0.088,-1.148 0.109,-2.286 -0.438,-3.352 -0.054,-0.103 -0.053,-0.235 -0.093,-0.43 0.267,0.01 0.485,0.008 0.696,0.034 1.506,0.175 3.015,0.369 4.521,0.531 0.196,0.021 0.462,-0.041 0.603,-0.171 1.739,-1.602 3.467,-3.222 5.195,-4.841 0.013,-0.013 0.013,-0.045 0.041,-0.136 -0.24,-0.125 -0.479,-0.299 -0.748,-0.376 M 84.325,-36.462 c 0.539,0.521 0.977,1.036 1.506,1.421 0.297,0.216 0.741,0.25 1.129,0.312 0.886,0.144 1.775,0.273 2.664,0.381 1.203,0.143 2.332,0.524 3.427,1.019 0.387,0.177 0.677,0.143 1.024,-0.098 2.065,-1.405 4.14,-2.794 6.222,-4.167 0.374,-0.248 0.606,-0.568 0.775,-0.964 0.707,-1.674 1.429,-3.345 2.119,-5.026 0.175,-0.436 0.425,-0.666 0.91,-0.724 1.017,-0.116 2.018,-0.303 3.032,-0.455 0.165,-0.027 0.334,-0.027 0.559,-0.042 0.135,1.742 0.259,3.446 0.398,5.27 0.643,-0.507 1.196,-0.926 1.728,-1.367 0.094,-0.083 0.135,-0.251 0.161,-0.388 0.021,-0.089 -0.006,-0.199 -0.037,-0.293 -0.356,-1.096 -0.06,-2.042 0.49,-3.03 1.077,-1.936 2.061,-3.924 2.998,-5.926 0.485,-1.033 0.798,-2.146 1.178,-3.224 0.553,-1.55 1.095,-3.098 1.638,-4.65 0.523,-1.479 1.044,-2.956 1.539,-4.445 0.202,-0.608 0.459,-1.117 1.001,-1.513 1.136,-0.82 2.21,-1.712 3.325,-2.556 0.358,-0.268 0.57,-0.585 0.695,-1.016 0.353,-1.196 0.744,-2.379 1.141,-3.559 0.058,-0.176 0.182,-0.363 0.33,-0.469 2.372,-1.701 4.75,-3.391 7.136,-5.078 0.054,-0.039 0.135,-0.037 0.303,-0.079 -0.347,0.661 -0.623,1.268 -0.967,1.837 -0.835,1.378 -1.381,2.86 -1.782,4.418 -0.313,1.23 -0.738,2.435 -1.088,3.658 -0.084,0.276 -0.253,0.409 -0.482,0.527 -0.727,0.379 -1.452,0.776 -2.186,1.14 -0.439,0.214 -0.813,0.482 -1.075,0.898 -0.077,0.126 -0.185,0.236 -0.273,0.357 -1.331,1.846 -2.769,3.596 -4.461,5.126 -0.276,0.246 -0.404,0.522 -0.43,0.901 -0.125,1.567 -0.29,3.128 -0.428,4.693 -0.041,0.485 -0.186,0.911 -0.476,1.312 -0.676,0.925 -1.32,1.877 -2.01,2.874 0.528,0.512 1.037,1.011 1.606,1.568 0.495,-0.732 0.974,-1.394 1.401,-2.089 0.297,-0.481 0.671,-0.845 1.157,-1.136 1.323,-0.797 2.631,-1.628 3.948,-2.443 0.165,-0.101 0.34,-0.192 0.559,-0.317 0.084,0.214 0.171,0.385 0.222,0.566 0.809,2.648 1.601,5.303 2.419,7.947 0.125,0.422 0.125,0.76 -0.191,1.092 -1.213,1.277 -1.796,2.852 -2.012,4.567 -0.145,1.123 -0.697,1.945 -1.513,2.717 -2.611,2.468 -5.154,5.006 -7.745,7.494 -0.404,0.386 -0.525,0.758 -0.495,1.309 0.091,1.666 0.209,3.34 0.124,5.003 -0.05,0.97 0.192,1.754 0.674,2.53 1.18,1.915 2.534,3.701 4.084,5.411 -0.307,0.821 -0.613,1.66 -0.934,2.493 -0.764,1.997 -1.536,3.993 -2.3,5.991 -4.492,6.955 -9.501,13.479 -14.965,19.53 -0.118,0.042 -0.24,0.088 -0.361,0.128 -0.384,0.135 -0.606,0.32 -0.728,0.741 -0.047,0.16 -0.105,0.32 -0.154,0.48 -23.442,25.338 -54.918,42.072 -89.036,46.738 -0.044,-0.051 -0.09,-0.1 -0.13,-0.162 C 11.057,59.843 10.394,58.94 9.729,58.002 8.699,58.14 7.695,58.27 6.694,58.408 5.07,58.632 3.446,58.857 1.826,59.088 1.607,59.12 1.401,59.196 1.192,59.251 1.045,59.22 0.896,59.186 0.751,59.152 0.239,58.519 -0.296,57.901 -0.785,57.249 c -0.38,-0.512 -0.859,-0.701 -1.483,-0.681 -0.44,0.015 -0.888,-0.044 -1.334,-0.096 -0.295,-0.034 -0.562,-0.106 -0.748,-0.408 -0.586,-0.958 -1.192,-1.899 -1.845,-2.932 2.354,-1.27 4.663,-2.515 6.97,-3.76 -0.017,-0.045 -0.03,-0.094 -0.05,-0.141 -0.981,0.079 -1.961,0.155 -2.945,0.242 -0.994,0.088 -1.981,0.152 -2.965,0.298 -0.798,0.118 -1.496,-0.082 -2.213,-0.39 -1.156,-0.499 -2.341,-0.939 -3.598,-1.437 0.725,-1.543 1.701,-2.914 2.365,-4.501 -2.177,1.142 -4.349,2.284 -6.597,3.468 -0.037,-0.263 -0.081,-0.445 -0.081,-0.628 -0.03,-1.22 -0.074,-2.436 -0.063,-3.656 0.007,-0.402 -0.146,-0.607 -0.476,-0.731 -0.535,-0.196 -1.078,-0.392 -1.617,-0.572 -1.182,-0.393 -2.368,-0.767 -3.547,-1.164 -1.149,-0.388 -2.301,-0.797 -3.446,-1.198 -0.54,-0.187 -1.092,-0.349 -1.621,-0.564 -1.213,-0.492 -2.425,-0.997 -3.625,-1.526 -1.25,-0.549 -2.48,-1.137 -3.719,-1.702 -0.371,-0.167 -0.738,-0.204 -1.156,-0.059 -1.246,0.433 -2.506,0.821 -3.8,1.239 -0.852,-0.999 -1.695,-1.978 -2.56,-2.992 -0.577,0.232 -1.132,0.45 -1.682,0.675 -2.789,1.142 -5.588,2.275 -8.375,3.44 -0.528,0.222 -0.985,0.187 -1.499,-0.017 -0.994,-0.395 -2.006,-0.743 -3.01,-1.108 -1.029,-0.374 -2.055,-0.746 -3.083,-1.117 -0.352,-0.126 -0.702,-0.258 -1.058,-0.365 -1.736,-0.523 -3.215,-1.547 -4.77,-2.419 -3.98,-2.234 -7.954,-4.481 -11.919,-6.74 -0.285,-0.164 -0.564,-0.419 -0.729,-0.701 -0.707,-1.204 -1.375,-2.43 -2.047,-3.657 -0.209,-0.382 -0.48,-0.67 -0.861,-0.901 -2.084,-1.252 -4.147,-2.54 -6.238,-3.781 -0.488,-0.291 -0.761,-0.641 -0.916,-1.178 -0.376,-1.321 -0.804,-2.623 -1.209,-3.933 -0.036,-0.115 -0.058,-0.234 -0.117,-0.491 0.617,0.284 1.136,0.521 1.653,0.759 1.058,0.488 2.114,0.976 3.173,1.46 0.13,0.059 0.276,0.126 0.41,0.121 0.865,-0.033 1.73,-0.087 2.678,-0.138 -1.1,-2.629 -2.171,-5.195 -3.244,-7.76 4.452,2.956 7.839,6.975 11.484,10.897 -1.061,0.559 -2.08,1.096 -3.163,1.666 0.229,0.208 0.379,0.36 0.545,0.493 3.125,2.517 6.259,5.02 9.372,7.547 0.429,0.347 0.806,0.474 1.352,0.272 0.77,-0.281 1.575,-0.466 2.365,-0.7 0.181,-0.053 0.355,-0.128 0.649,-0.238 -1.328,-0.797 -2.689,-1.298 -3.799,-2.237 -1.081,-0.915 -2.229,-1.747 -3.433,-2.682 0.772,-0.368 1.417,-0.776 2.121,-0.977 0.47,-0.132 1.029,0 1.539,0.07 0.912,0.123 1.815,0.306 2.728,0.429 0.338,0.046 0.697,0.027 1.036,-0.024 0.729,-0.104 1.455,-0.251 2.21,-0.515 -0.184,-0.091 -0.366,-0.194 -0.556,-0.271 -2.564,-1.038 -5.128,-2.08 -7.806,-2.795 -0.426,-0.114 -0.75,-0.319 -0.945,-0.759 -0.332,-0.748 -0.73,-1.468 -1.105,-2.214 0.657,-0.527 1.256,-1.007 1.91,-1.529 -0.187,-0.155 -0.322,-0.294 -0.476,-0.389 -1.448,-0.882 -2.891,-1.764 -4.348,-2.623 -0.266,-0.157 -0.593,-0.249 -0.901,-0.295 -0.617,-0.088 -1.239,-0.143 -1.862,-0.168 -0.342,-0.012 -0.546,-0.143 -0.714,-0.431 -0.409,-0.686 -0.859,-1.348 -1.262,-2.037 -0.192,-0.329 -0.434,-0.519 -0.815,-0.571 -1.962,-0.266 -3.692,-1.131 -5.388,-2.089 -0.799,-0.451 -1.621,-0.86 -2.495,-1.322 -0.526,0.631 -0.893,1.331 -1.279,2.013 -0.071,0.126 0.044,0.381 0.111,0.562 0.309,0.843 0.635,1.68 0.947,2.522 0.083,0.219 0.143,0.448 0.111,0.738 -0.696,-0.625 -1.393,-1.25 -2.083,-1.88 -1.49,-1.363 -2.996,-2.709 -4.456,-4.102 -0.911,-0.87 -1.951,-1.558 -3.03,-2.156 -1.976,-1.093 -3.645,-2.495 -4.938,-4.349 -0.281,-0.405 -0.631,-0.761 -1.013,-1.112 0.158,1.189 -0.016,2.449 0.885,3.44 0.233,0.256 0.351,0.536 0.186,0.882 -0.492,1.023 -0.485,2.125 -0.506,3.221 -0.008,0.472 -0.079,0.954 -0.015,1.418 0.077,0.573 -0.183,0.832 -0.67,0.982 -0.116,0.036 -0.228,0.092 -0.467,0.184 0.396,0.283 0.693,0.578 1.051,0.733 0.883,0.388 1.184,0.987 0.984,1.939 -0.126,0.611 -0.207,1.194 -0.6,1.728 -0.338,0.462 -0.668,0.768 -1.266,0.711 -0.245,-0.022 -0.492,0.022 -0.777,0.039 -0.027,-0.13 -0.093,-0.253 -0.071,-0.358 0.211,-0.876 -0.153,-1.67 -0.36,-2.481 -0.079,-0.313 -0.31,-0.623 -0.549,-0.856 -0.795,-0.768 -1.282,-1.696 -1.585,-2.823 0.485,-0.016 0.934,-0.033 1.4,-0.049 -0.006,-0.136 0.015,-0.224 -0.017,-0.274 -0.541,-0.856 -0.709,-1.803 -0.61,-2.786 0.049,-0.502 -0.165,-0.728 -0.592,-0.884 -0.675,-0.251 -1.332,-0.563 -2.016,-0.794 -1.039,-0.35 -1.719,-1.135 -2.508,-1.925 0.617,-0.32 1.186,-0.617 1.892,-0.981 -0.696,-0.328 -1.282,-0.611 -1.875,-0.88 -0.52,-0.235 -1.065,-0.427 -1.565,-0.7 -0.322,-0.172 -0.595,-0.441 -0.868,-0.69 -0.343,-0.319 -0.663,-0.661 -1.125,-1.124 1.417,-0.062 2.635,-0.6 3.914,0.057 0.744,0.383 1.576,0.608 2.373,0.883 0.374,0.126 0.711,0.158 1.129,-0.062 0.67,-0.351 1.451,-0.339 2.196,-0.235 0.281,0.041 0.541,0.255 0.808,0.388 0.034,-0.045 0.064,-0.091 0.098,-0.138 -0.379,-0.345 -0.754,-0.694 -1.135,-1.038 -0.424,-0.387 -0.876,-0.746 -1.27,-1.162 -0.332,-0.35 -0.684,-0.418 -1.142,-0.34 -0.735,0.128 -1.479,0.212 -2.224,0.279 -0.224,0.021 -0.515,-0.008 -0.685,-0.135 -1.37,-1.034 -2.723,-2.097 -4.075,-3.154 -0.037,-0.027 -0.05,-0.081 -0.105,-0.174 0.413,-0.502 0.827,-1.029 1.27,-1.528 0.265,-0.298 0.315,-0.559 0.145,-0.941 -0.599,-1.343 -1.155,-2.706 -1.734,-4.058 -0.09,-0.202 -0.196,-0.41 -0.339,-0.578 -1.198,-1.435 -2.406,-2.861 -3.634,-4.314 -1.543,0.308 -3.075,0.613 -4.677,0.933 -0.455,-0.873 -0.913,-1.748 -1.367,-2.629 -1.873,-3.637 -3.736,-7.279 -5.616,-10.914 -0.591,-1.149 -0.604,-1.139 0.14,-2.233 0.772,-1.129 1.538,-2.263 2.311,-3.403 0.689,0.158 1.349,0.281 1.99,0.463 1.223,0.349 2.441,0.714 3.651,1.105 0.538,0.175 1.07,0.394 1.572,0.655 0.797,0.413 1.555,0.9 2.347,1.317 0.402,0.211 0.642,0.506 0.811,0.92 1.127,2.746 2.281,5.483 3.407,8.232 0.16,0.389 0.383,0.671 0.739,0.891 2.749,1.712 5.495,3.43 8.234,5.158 0.318,0.203 0.595,0.26 0.97,0.142 1.688,-0.531 3.395,-1.015 5.082,-1.547 0.317,-0.099 0.633,-0.3 0.869,-0.534 1.729,-1.726 3.445,-3.468 5.146,-5.223 0.252,-0.261 0.437,-0.607 0.588,-0.94 0.49,-1.083 0.95,-2.178 1.481,-3.408 0.413,0.529 0.794,0.948 1.093,1.422 0.484,0.756 1.097,1.246 2.027,1.322 0.441,0.035 0.872,0.189 1.315,0.29 -0.01,0.123 0.01,0.209 -0.023,0.259 -0.682,1.013 -1.314,2.067 -2.072,3.022 -1.535,1.934 -3.128,3.822 -4.72,5.713 -0.364,0.431 -0.8,0.818 -1.248,1.165 -0.784,0.608 -1.602,1.169 -2.408,1.75 0.011,0.052 0.021,0.107 0.029,0.16 1.218,0.049 2.438,0.098 3.704,0.152 0.115,0.664 0.218,1.27 0.337,1.944 0.165,-0.098 0.319,-0.157 0.438,-0.258 2.237,-1.875 4.476,-3.751 6.696,-5.645 0.256,-0.215 0.479,-0.51 0.628,-0.812 0.92,-1.878 1.808,-3.769 2.721,-5.648 0.104,-0.214 0.266,-0.434 0.461,-0.559 1.387,-0.888 2.792,-1.75 4.191,-2.619 0.037,-0.022 0.095,-0.016 0.226,-0.034 -0.027,0.276 -0.045,0.536 -0.086,0.793 -0.229,1.454 -0.446,2.909 -0.707,4.358 -0.078,0.428 0.016,0.767 0.22,1.129 0.573,1.024 1.132,2.057 1.668,3.098 0.157,0.308 0.453,0.606 0.225,1.029 -0.042,0.079 0.085,0.271 0.165,0.391 0.545,0.806 1.106,1.603 1.638,2.417 0.192,0.291 0.46,0.362 0.765,0.38 1.14,0.06 2.284,0.112 3.424,0.176 0.307,0.015 0.512,-0.079 0.655,-0.374 0.701,-1.43 1.485,-2.824 2.113,-4.286 0.526,-1.233 0.881,-2.54 1.309,-3.813 0.344,-1.016 0.658,-2.04 1.034,-3.042 0.082,-0.218 0.349,-0.413 0.576,-0.519 0.816,-0.376 1.643,-0.729 2.478,-1.055 1.892,-0.736 3.637,-1.756 5.416,-2.72 0.237,-0.13 0.478,-0.255 0.812,-0.43 0.527,0.736 1.066,1.444 1.551,2.188 0.672,1.031 2.255,1.294 3.143,0.491 0.342,-0.31 0.468,-0.62 0.288,-1.114 -1.368,-3.748 -2.712,-7.504 -4.042,-11.266 -0.169,-0.476 -0.422,-0.704 -0.917,-0.839 -1.37,-0.368 -2.722,-0.805 -4.071,-1.237 -0.386,-0.127 -0.713,-0.092 -1.077,0.064 -1.125,0.474 -2.263,0.921 -3.401,1.377 -0.156,0.063 -0.323,0.106 -0.54,0.175 -0.531,-1.197 -1.058,-2.378 -1.591,-3.576 -1.797,0.052 -3.561,0.1 -5.321,0.155 -1.539,0.051 -3.081,0.123 -4.62,0.16 -0.46,0.01 -0.789,0.15 -1.065,0.539 -0.615,0.875 -1.275,1.715 -1.942,2.6 -1.366,-0.864 -2.685,-1.7 -4.006,-2.532 -0.483,-0.307 -0.95,-0.644 -1.457,-0.905 -0.463,-0.239 -0.6,-0.591 -0.636,-1.074 -0.095,-1.242 -0.233,-2.478 -0.356,-3.716 -0.018,-0.166 -0.062,-0.329 -0.103,-0.541 -1.469,0.195 -2.895,0.384 -4.319,0.576 -0.544,0.072 -1.085,0.192 -1.63,0.214 -0.539,0.02 -0.774,0.303 -0.954,0.764 -0.485,1.227 -1.012,2.438 -1.548,3.724 -0.759,-0.019 -1.524,-0.033 -2.289,-0.058 -1.194,-0.042 -2.39,-0.083 -3.583,-0.142 -0.391,-0.02 -0.721,0.075 -1.051,0.29 -0.745,0.492 -1.513,0.953 -2.32,1.461 1.355,2.701 2.691,5.362 4.114,8.198 -0.438,-0.103 -0.691,-0.16 -0.948,-0.219 -2.529,-0.583 -5.057,-1.176 -7.589,-1.742 -0.378,-0.082 -0.792,-0.092 -1.174,-0.037 -1.255,0.186 -2.51,0.388 -3.755,0.645 -0.566,0.118 -0.982,0.025 -1.435,-0.343 -1.545,-1.263 -3.133,-2.473 -4.688,-3.721 -0.359,-0.289 -0.697,-0.389 -1.159,-0.32 -1.826,0.269 -3.657,0.48 -5.484,0.744 -0.427,0.062 -0.686,-0.052 -0.96,-0.37 -2.426,-2.786 -4.86,-5.559 -7.306,-8.328 -0.248,-0.282 -0.361,-0.572 -0.357,-0.942 0.015,-1.391 0.012,-2.788 0.023,-4.179 0.004,-0.368 -0.101,-0.659 -0.345,-0.949 -2.296,-2.73 -4.56,-5.486 -6.867,-8.208 -0.59,-0.696 -1.035,-1.461 -1.442,-2.259 -1.643,-3.222 -3.294,-6.438 -4.917,-9.667 -0.152,-0.297 -0.215,-0.664 -0.226,-1.002 -0.221,-6.159 -0.428,-12.322 -0.645,-18.481 -0.009,-0.264 -0.095,-0.527 -0.147,-0.79 0.046,-0.195 0.091,-0.391 0.135,-0.584 0.266,-0.522 0.571,-1.03 0.788,-1.572 0.703,-1.752 1.366,-3.522 2.052,-5.281 0.689,-1.757 1.405,-3.505 2.077,-5.27 0.591,-1.557 1.228,-3.095 1.632,-4.726 0.343,-1.399 0.81,-2.771 1.255,-4.145 0.066,-0.214 0.27,-0.408 0.451,-0.561 1.929,-1.619 3.868,-3.226 5.8,-4.839 1.434,-1.2 2.865,-2.404 4.299,-3.605 0.15,-0.126 0.308,-0.245 0.542,-0.424 1.099,1.051 2.187,2.095 3.317,3.171 1.481,-0.593 2.958,-1.184 4.464,-1.787 3.222,2.356 6.436,4.703 9.697,7.086 0.664,-0.929 1.286,-1.797 1.902,-2.668 1.024,-1.441 2.062,-2.878 3.061,-4.337 0.306,-0.449 0.658,-0.661 1.206,-0.705 2.01,-0.165 4.017,-0.372 6.024,-0.565 0.22,-0.022 0.439,-0.058 0.692,-0.09 0.263,-1.318 0.522,-2.616 0.775,-3.909 0.508,-2.595 1.026,-5.186 1.514,-7.786 0.083,-0.438 0.265,-0.785 0.541,-1.118 2.579,-3.107 5.137,-6.233 7.732,-9.325 0.601,-0.722 1.064,-1.483 1.394,-2.359 1.055,-2.796 2.136,-5.579 3.209,-8.368 0.189,-0.492 0.452,-0.931 0.821,-1.317 1.13,-1.194 2.228,-2.423 3.36,-3.616 0.317,-0.337 0.436,-0.646 0.356,-1.125 -0.364,-2.135 -0.633,-4.292 -1.033,-6.422 -0.182,-0.979 -0.025,-1.845 0.329,-2.749 0.796,-2.01 1.551,-4.042 2.311,-6.07 0.168,-0.451 0.407,-0.829 0.783,-1.152 2.405,-2.062 4.794,-4.144 7.181,-6.226 0.278,-0.243 0.536,-0.522 0.751,-0.822 2.259,-3.133 4.536,-6.256 6.743,-9.427 1.323,-1.892 2.889,-3.54 4.597,-5.08 2.256,-2.038 4.457,-4.137 6.703,-6.185 0.605,-0.552 0.771,-1.321 1.105,-2.001 0.296,-0.6 0.535,-1.227 0.781,-1.853 0.176,-0.448 0.497,-0.697 0.935,-0.89 2.534,-1.101 5.064,-2.226 7.594,-3.355 0.168,-0.074 0.31,-0.209 0.464,-0.316 0.098,0.019 0.199,0.046 0.294,0.067 0.006,1.165 0.01,2.331 0.017,3.544 0.923,0.094 1.799,0.195 2.681,0.279 0.987,0.098 1.971,0.182 2.958,0.274 1.358,0.128 2.719,0.249 4.073,0.377 0.543,0.053 1.085,0.121 1.631,0.168 0.401,0.034 0.674,0.222 0.909,0.552 3.332,4.677 6.678,9.339 10.013,14.009 0.101,0.141 0.195,0.286 0.34,0.498 -0.168,0.253 -0.343,0.519 -0.522,0.775 -0.509,0.742 -1.004,1.489 -1.546,2.207 -0.266,0.357 -0.31,0.67 -0.169,1.094 0.674,2.066 1.294,4.145 1.982,6.206 0.161,0.493 0.053,0.762 -0.33,1.078 -2.133,1.769 -4.243,3.558 -6.358,5.347 -0.185,0.151 -0.354,0.323 -0.603,0.563 1.236,0.404 2.358,0.795 3.497,1.138 0.39,0.118 0.66,0.297 0.852,0.654 0.957,1.802 2.308,3.298 3.713,4.756 2.682,2.787 5.319,5.614 7.974,8.423 0.172,0.182 0.33,0.37 0.539,0.6 -0.138,0.235 -0.263,0.472 -0.405,0.697 -2.381,3.895 -4.752,7.792 -7.159,11.674 -0.653,1.044 -1.155,2.143 -1.549,3.301 -0.459,1.347 -0.896,2.709 -1.456,4.012 -0.316,0.746 -0.832,1.409 -1.31,2.073 -0.741,1.024 -0.387,0.876 -1.694,0.73 -0.89,-0.097 -1.78,-0.225 -2.82,-0.356 0.205,0.34 0.336,0.569 0.471,0.788 3.669,5.858 7.351,11.714 10.993,17.588 0.829,1.332 1.526,2.747 2.288,4.12 0.825,1.482 1.623,2.983 2.496,4.435 0.411,0.677 0.99,1.245 1.459,1.883 0.326,0.442 0.651,0.893 0.889,1.382 1.719,3.491 3.443,6.98 5.104,10.499 1.099,2.324 2.096,4.694 3.144,7.041 0.256,0.579 0.387,1.172 0.437,1.806 0.293,3.628 0.614,7.257 0.923,10.883 0.021,0.298 0.034,0.596 0.055,0.917 -0.311,0.107 -0.479,-0.125 -0.668,-0.253 -3.184,-2.192 -6.367,-4.391 -9.551,-6.588 -2.563,-1.769 -5.14,-3.524 -7.694,-5.311 -0.428,-0.299 -0.818,-0.374 -1.317,-0.262 -0.995,0.226 -1.995,0.4 -3.063,0.609 0.367,1.304 0.714,2.545 1.088,3.867 -0.751,0.248 -1.476,0.495 -2.21,0.726 -3.705,1.184 -7.412,2.36 -11.114,3.548 -0.428,0.138 -0.839,0.32 -1.24,0.527 -1.021,0.525 -2.024,1.075 -3.103,1.654 0.125,2.273 0.253,4.555 0.385,6.906 -0.206,0.075 -0.405,0.164 -0.614,0.22 -1.752,0.481 -3.51,0.977 -5.269,1.43 -0.438,0.111 -0.684,0.331 -0.828,0.744 -0.644,1.834 -1.307,3.661 -1.951,5.498 -0.152,0.445 -0.374,0.822 -0.761,1.068 -0.846,0.534 -1.681,1.083 -2.561,1.545 -0.685,0.355 -1.219,0.803 -1.652,1.45 -1.22,1.825 -2.468,3.63 -3.765,5.401 -0.657,0.892 -0.923,1.927 -1.277,2.931 -0.943,2.678 -1.853,5.37 -2.774,8.058 -0.022,0.063 -0.016,0.135 -0.037,0.396 1.258,-1.511 2.412,-2.897 3.566,-4.28 0.047,0.013 0.097,0.029 0.148,0.042 0.152,1.337 0.101,2.693 0.232,4.178 0.324,-0.363 0.556,-0.614 0.78,-0.872 1.053,-1.202 2.138,-2.375 3.14,-3.613 0.77,-0.948 1.437,-1.972 2.138,-2.971 0.488,-0.694 1,-1.375 1.422,-2.105 1.01,-1.744 2.529,-3.006 3.985,-4.328 0.923,-0.84 1.637,-1.764 2.123,-2.922 0.623,-1.468 1.38,-2.876 2.048,-4.321 0.202,-0.437 0.472,-0.618 0.953,-0.664 1.115,-0.104 2.224,-0.298 3.339,-0.403 0.465,-0.044 0.687,-0.239 0.873,-0.652 0.552,-1.201 1.158,-2.375 1.731,-3.561 0.199,-0.419 0.482,-0.724 0.886,-0.968 1.681,-1.028 3.339,-2.091 5.023,-3.12 0.377,-0.232 0.64,-0.517 0.836,-0.913 1.249,-2.466 2.52,-4.92 3.786,-7.378 0.114,-0.221 0.237,-0.438 0.384,-0.711 0.974,0.105 1.965,0.189 2.945,0.329 0.408,0.059 0.71,-0.015 1.028,-0.282 0.485,-0.416 1.006,-0.791 1.556,-1.219 0.414,0.522 0.782,0.989 1.149,1.455 0.788,0.999 1.462,2.126 2.391,2.963 0.91,0.818 2.103,1.318 3.141,1.998 2.352,1.526 4.898,2.665 7.367,3.957 0.391,0.202 0.617,0.453 0.748,0.861 0.404,1.208 0.86,2.393 1.26,3.601 0.148,0.448 0.385,0.779 0.775,1.048 1.048,0.719 2.085,1.452 3.093,2.224 0.347,0.26 0.663,0.608 0.886,0.98 1.264,2.124 2.493,4.267 3.729,6.406 0.149,0.258 0.29,0.524 0.398,0.803 0.913,2.401 1.816,4.808 2.719,7.213 0.046,0.115 0.077,0.233 0.141,0.425 -0.542,0.264 -1.068,0.531 -1.603,0.783 -2.14,1.012 -4.279,2.033 -6.435,3.022 -0.422,0.195 -0.678,0.463 -0.852,0.875 -0.31,0.735 -0.644,1.461 -0.967,2.189 -0.115,0.244 -0.237,0.485 -0.391,0.804 -0.169,-0.191 -0.31,-0.319 -0.418,-0.469 -1.233,-1.694 -2.476,-3.384 -3.689,-5.092 -0.333,-0.475 -0.721,-0.753 -1.314,-0.872 -1.466,-0.292 -2.918,-0.657 -4.457,-1.015 0.027,0.216 0.02,0.383 0.077,0.528 0.351,0.958 0.704,1.917 1.078,2.867 0.149,0.369 0.159,0.706 0.021,1.083 -0.357,1.004 -0.69,2.021 -1.055,3.108 -0.192,-0.15 -0.334,-0.235 -0.448,-0.349 -0.718,-0.758 -1.429,-1.533 -2.166,-2.279 -0.263,-0.27 -0.374,-0.566 -0.401,-0.928 -0.043,-0.563 -0.115,-1.122 -0.185,-1.799 -0.206,0.172 -0.337,0.259 -0.445,0.375 -2.786,3.034 -5.562,6.068 -8.352,9.099 -0.228,0.247 -0.397,0.491 -0.384,0.848 0.064,1.318 0.112,2.635 0.172,4.038 0.744,0.037 1.459,0.076 2.17,0.106 0.323,0.012 0.656,-0.044 0.967,0.017 0.644,0.128 1.067,-0.13 1.502,-0.58 1.91,-1.969 3.861,-3.899 5.781,-5.858 0.311,-0.315 0.593,-0.44 1.045,-0.317 0.919,0.248 1.85,0.423 2.766,0.654 0.353,0.089 0.616,0.025 0.883,-0.224 0.693,-0.637 1.411,-1.247 2.159,-1.9 1.759,1.213 3.467,2.397 5.239,3.618 0.521,-0.62 1.01,-1.208 1.502,-1.796 0.064,-0.076 0.142,-0.147 0.188,-0.231 0.307,-0.523 0.735,-0.699 1.359,-0.645 2.354,0.199 4.713,0.344 7.071,0.507 0.249,0.019 0.498,0.056 0.748,0.039 1.398,-0.089 2.523,0.667 3.702,1.226 3.554,1.683 7.102,3.386 10.646,5.079 0.044,0.02 0.097,0.023 0.243,0.057 0.653,-0.423 1.378,-0.862 2.068,-1.349 0.179,-0.124 0.307,-0.382 0.368,-0.605 0.165,-0.576 0.29,-1.163 0.411,-1.75 0.063,-0.311 0.202,-0.531 0.478,-0.711 3.77,-2.442 7.529,-4.898 11.292,-7.349 0.065,-0.041 0.139,-0.059 0.253,-0.11 0.63,0.576 1.257,1.178 1.924,1.737 0.256,0.214 0.579,0.377 0.899,0.472 0.667,0.192 1.355,0.323 2.079,0.492 0.189,-0.816 0.377,-1.579 0.542,-2.347 0.102,-0.512 0.156,-1.034 0.24,-1.55 0.148,-0.86 0.272,-1.723 0.462,-2.573 0.063,-0.299 0.214,-0.619 0.427,-0.838 5.094,-5.304 10.208,-10.597 15.312,-15.893 1.513,-1.559 3.022,-3.119 4.528,-4.678 0.172,-0.175 0.347,-0.346 0.681,-0.685 0.077,0.258 0.1,0.436 0.178,0.588 1.122,2.257 2.244,4.514 3.379,6.763 0.185,0.355 0.229,0.692 0.162,1.078 -0.711,3.876 -1.169,7.788 -1.618,11.699 -0.044,0.372 -0.07,0.727 0.169,1.073 2.611,3.773 4.434,7.974 6.489,12.05 1.529,3.029 3.022,6.077 4.531,9.117 0.077,0.157 0.142,0.316 0.239,0.537 -0.711,0.359 -1.418,0.71 -2.21,1.107'\n  ).fill(landColor).transform({\n    a: 1, b: 0, c: 0, d: 1, e: 424.8037, f: 411.3901\n  })\n  g.path(\n    'm 0,0 c -0.22,3.636 -0.479,7.264 -0.701,10.902 -0.024,0.435 0.044,0.897 0.169,1.314 0.384,1.345 0.798,2.675 1.239,4.003 0.132,0.404 0.084,0.69 -0.205,1.01 -1.264,1.416 -2.514,2.84 -3.753,4.275 -0.216,0.253 -0.452,0.35 -0.771,0.367 -0.699,0.027 -1.392,0.088 -2.089,0.129 -0.493,0.026 -0.981,0.047 -1.594,0.073 0.151,-1.121 0.263,-2.108 0.425,-3.089 0.08,-0.488 0.047,-0.916 -0.172,-1.371 -0.843,-1.728 -1.652,-3.469 -2.456,-5.215 -0.199,-0.431 -0.483,-0.721 -0.89,-0.957 -1.556,-0.889 -3.093,-1.816 -4.652,-2.709 -0.334,-0.191 -0.495,-0.423 -0.549,-0.811 -0.132,-1.015 -0.29,-2.025 -0.479,-3.029 -0.087,-0.461 0.034,-0.795 0.344,-1.146 1.388,-1.566 2.745,-3.159 4.113,-4.746 0.128,-0.146 0.247,-0.3 0.391,-0.482 -1.078,-1.213 -2.133,-2.395 -3.127,-3.514 1.335,-3.193 3.154,-5.986 4.953,-8.789 0.256,-0.398 0.539,-0.587 1.018,-0.587 1.266,0 2.533,-0.03 3.8,-0.067 0.374,-0.013 0.59,0.141 0.774,0.452 0.569,0.943 1.18,1.852 1.735,2.802 0.223,0.377 0.402,0.802 0.499,1.234 0.64,2.796 1.263,5.592 1.87,8.398 C 0,-1.051 0.033,-0.516 0,0'\n  ).fill(landColor).transform({\n    translate: [441.7197, 233.5059]\n  })\n  g.path(\n    'm 0,0 c -0.041,-0.393 -0.125,-0.788 -0.267,-1.154 -0.599,-1.558 -1.215,-3.113 -1.852,-4.654 -0.179,-0.421 -0.139,-0.733 0.131,-1.1 0.95,-1.304 1.846,-2.651 2.82,-3.943 0.734,-0.971 1.28,-1.99 1.462,-3.212 0.128,-0.86 0.381,-1.704 0.579,-2.549 0.051,-0.214 0.125,-0.425 0.19,-0.657 0.744,0.025 1.481,-0.029 2.216,-0.044 C 4.753,-8.871 3.54,-0.354 1.569,8.175 1.465,8.633 1.348,9.086 1.236,9.542 0.855,7.437 0.481,5.33 0.319,3.19 0.239,2.124 0.128,1.06 0,0'\n  ).fill(landColor).transform({\n    translate: [561.001, 347.4272]\n  })\n  g.path(\n    'm 0,0 c 0.172,0.128 0.276,0.194 0.367,0.274 1.348,1.291 2.689,2.593 4.053,3.867 0.397,0.368 0.506,0.732 0.348,1.251 -0.49,1.597 -0.93,3.207 -1.422,4.801 -0.077,0.261 -0.304,0.509 -0.519,0.689 -1.092,0.911 -2.2,1.799 -3.308,2.692 -0.186,0.153 -0.388,0.291 -0.58,0.432 -0.097,-0.079 -0.175,-0.114 -0.209,-0.172 -0.68,-1.187 -1.371,-2.373 -2.032,-3.572 -0.077,-0.147 -0.07,-0.387 -0.023,-0.557 0.25,-0.811 0.512,-1.615 0.785,-2.414 0.576,-1.67 1.155,-3.336 1.738,-5 C -0.542,1.544 -0.279,0.8 0,0'\n  ).fill(landColor).transform({\n    translate: [506.1875, 323.0142]\n  })\n  g.path(\n    'm 0,0 c -0.214,-0.716 -0.652,-1.284 -1.304,-1.66 -0.512,-0.294 -0.802,-0.727 -0.901,-1.295 -0.096,-0.542 -0.339,-0.979 -0.841,-1.246 -0.687,-0.371 -1.007,-0.869 -0.723,-1.692 0.132,-0.38 -10e-4,-0.842 0.307,-1.214 0.699,0.069 1.388,0.143 2.079,0.2 0.852,0.073 1.661,0.216 2.329,0.839 0.455,0.42 0.991,0.747 1.479,1.131 0.174,0.136 0.373,0.288 0.453,0.476 0.223,0.527 0.401,1.073 0.577,1.621 0.04,0.128 0.022,0.298 -0.02,0.429 C 3.113,-1.417 2.774,-0.43 2.425,0.608 1.912,0.621 1.463,0.623 1.017,0.645 0.521,0.672 0.16,0.529 0,0'\n  ).fill(landColor).transform({\n    translate: [315.0317, 414.7949]\n  })\n  g.path(\n    'm 0,0 c -0.249,0.226 -0.475,0.512 -0.626,0.815 -0.89,1.813 -1.769,3.634 -2.628,5.465 -0.185,0.404 -0.438,0.702 -0.808,0.94 -1.146,0.753 -2.292,1.508 -3.423,2.289 -1.453,1.007 -3.016,1.856 -4.302,3.099 -1.025,0.988 -2.1,1.924 -3.148,2.883 -0.4,0.367 -0.807,0.727 -1.211,1.093 -0.062,-0.024 -0.119,-0.042 -0.183,-0.064 0.027,-0.239 0.034,-0.484 0.081,-0.718 0.175,-0.881 0.377,-1.755 0.553,-2.639 0.128,-0.667 0.374,-1.266 0.76,-1.838 2.184,-3.214 4.273,-6.491 6.51,-9.66 2.773,-3.929 5.659,-7.774 8.499,-11.652 0.092,-0.128 0.223,-0.229 0.358,-0.364 0.057,0.122 0.101,0.185 0.118,0.254 0.657,2.46 1.306,4.921 1.973,7.375 0.102,0.379 -0.016,0.603 -0.299,0.834 C 1.47,-1.275 0.725,-0.65 0,0'\n  ).fill(landColor).transform({\n    translate: [559.5684, 326.2988]\n  })\n\n  return g\n}\n"],"names":["parametricAngle","target","a","b","t","Math","atan","tan","quarter","ceil","PI","isPointInEllipse","x","y","rotation","rotationSin","sin","rotationCos","cos","rx","ry","yearlyData","createSubDays","days","n","date","angle","increment","dimensions","theta","j","push","cx","cy","getTime","getDate","setDate","createDays","year","yearData","cusps","times","Date","timesFromDates","newYear","newYearTime","nextYear","nextYearTime","delta1","delta2","offset","startAngle","degreeIndex","endAngle","startTimeCusp","startTimeMidnight","endDateCusp","endDateMidnight","endTimeCusp","endTimeMidnight","totalPeriod","fullAngle","actualAngle","nDays","startFraction","endFraction","i","getFullYear","getMonth","round","options","quarterRadialGradient","svg","color1","color2","extend","start","gradient","add","stop","from","to","radius","$","jQuery","dayLinesGroup","layer","name","width","group","addClass","stroke","color","drawBackground","label","flip","gradient1","gradient2","rect","fill","transform","rotate","origin","opacity","showTag","element","selector","showing","data","hideTag","popup","css","top","left","show","hideTagPopup","is","on","setTimeout","hide","drawTagEvents","conditional","condition","state","event","zoom","pageX","pageY","drawTooltip","title","text","tooltip","clone","appendTo","attr","id","substr","html","resetHoverQuarter","hover","SVG","animate","activateQuarter","viewbox","click","after","lookupDatesForYear","under","over","url","wpRoot","window","location","protocol","hostname","port","ajax","done","yearId","length","slug","dates","slices","Array","candidate","candidateTime","calendar_time","calendar_date","k","day","nextDay","r1","r2","rendered","description","slice","x1","y1","x2","y2","shape","path","root","drawSlices","defaultTags","overrides","height","pad","container","document","querySelector","w","clientWidth","h","max","clientHeight","padding","inset","line","thinLine","draw","addTo","size","glyphs","defs","paths","zodiacGlyphDefs","main","time","currentYear","daysInYear","solstice","perihelion","solsticeTime","perihelionDays","calculateRotation","step","actual","a2","b2","createCusps","gradients","quarter1","quarter2","quarter3","quarter4","quarter1Hover","quarter2Hover","quarter3Hover","quarter4Hover","tags","cosmicDawn","cosmicMidnight","cosmicSunset","cosmicMidday","theSun","theEcliptic","theZodiac","solarIngress","aquariusIngress","piscesIngress","ariesIngress","taurusIngress","geminiIngress","cancerIngress","leoIngress","virgoIngress","libraIngress","scorpioIngress","sagittariusIngress","capricornIngress","aphelion","parseTags","g1","g2","g3","g4","transparency","componentTransfer","funcA","type","slope","intercept","filterWith","drawDayLines","w1","h1","w2","h2","w3","h3","ellipse","move","noise","turbulence","UTC","colorMatrix","rgba","funcR","funcG","funcB","composite","mask","bg","maskWith","rotateDegrees","drawEllipses","g","scale","use","translate","drawGlyphs","labels","a3","b3","rotationDeg","limit","angle1","angle2","textLabel","font","family","anchor","drawMonthNames","months","quarters","degree0","degree180","drawCusps","drawCardinalPoints","gaussianBlur","drawQuarterLabels","solar","circle","drawSun","waterColor","landColor","globe","c","d","e","f","offsetX","offsetY","drawEarth","current","currentDay","next","span","getHours","getMinutes","getSeconds","dayAngle","adjust","scroll","scrollTop","clientX","clientY","zoomed","onLeft","onTop","toShow","hitEllipseOuter","addMouseEvents"],"mappings":"+NAWO,SAASA,EAAiBC,EAAQC,EAAGC,OAGtCC,EAAIC,KAAKC,KAAKD,KAAKE,IAAIN,GAAUC,EAAIC,GAGnCK,EAAUH,KAAKI,KAAKR,GAAUI,KAAKK,GAAK,WAG9B,IAAZF,GAA6B,IAAZA,EACnBJ,GAAKC,KAAKK,GACW,IAAZF,IACTJ,GAAK,EAAIC,KAAKK,IAGTN,EA+BF,SAASO,EAAkBC,EAAGC,EAAGX,EAAGC,EAAGW,OAEtCC,EAAcV,KAAKW,IAAIF,GACvBG,EAAcZ,KAAKa,IAAIJ,GACvBK,EAAKP,EAAIK,EAAcJ,EAAIE,EAC3BK,EAAKP,EAAII,EAAcL,EAAIG,SAGjBI,EAAKA,GAAOjB,EAAIA,GAAMkB,EAAKA,GAAOjB,EAAIA,IACrC,ECzDZ,IAAMkB,EAAa,MAChB,CACN,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,6BAEM,CACN,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,yBCTJ,SAASC,EAAeC,EAAMC,EAAGC,EAAMC,EAAOC,EAAWC,WACnDC,EAAQ,EACHC,EAAI,EAAGA,GAAKN,EAAGM,IAAKJ,GAASC,EACpCE,EAAQ7B,EAAgB0B,EAAOE,EAAW1B,EAAG0B,EAAWzB,GACxDoB,EAAKQ,KAAK,CACRL,EACAG,EACAD,EAAWI,GAAK3B,KAAKa,IAAIW,GAASD,EAAW1B,EAC7C0B,EAAWK,GAAK5B,KAAKW,IAAIa,GAASD,EAAWzB,EAC7CsB,EAAKS,UACc,IAAnBT,EAAKU,UAAkB,EAAI,IAE7BV,EAAKW,QAAQX,EAAKU,UAAY,GAI3B,SAASE,EAAYC,EAAMC,EAAUC,EAAO1B,EAAUc,WAGrDa,ECjCD,SAAyBF,SACvB,CACJ,IAAIG,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,IAAKL,UACvB,IAAIQ,KAAKH,EAAS,KAAML,UACxB,IAAIQ,KAAKH,EAAS,KAAML,UACxB,IAAIQ,KAAKH,EAAS,KAAML,UACxB,IAAIQ,KAAKH,EAAS,KAAML,WDkBbS,CAAeJ,GACvBK,EAAU,IAAIF,KAAKJ,EAAM,EAAG,GAC5BO,EAAcD,EAAQV,UACtBY,EAAW,IAAIJ,KAAKJ,EAAO,EAAG,EAAG,GACjCS,EAAeD,EAASZ,UAGxBc,EAASD,EAAeN,EAAM,IAE9BQ,EAASR,EAAM,IAAMI,EAEvBK,EAASpC,EAAWmC,GAAUD,EAASC,GAEvCE,EAAa9C,KAAKK,GAAKwC,EAGvBE,EAAc,EACdC,EAAWb,EAAMY,GAAa,GAC5B7B,EAAO,GAET+B,EAAgBT,EAChBU,EAAoBV,EACpBW,EAAc,KACdC,EAAkB,KAClBC,EAAc,EACdC,EAAkB,EAElBC,EAAc,EAEdC,EAAY,EACZC,EAAc,EACdC,EAAQ,EAERtC,EAAOmB,EAGPoB,EAAgB,EAEhBC,EAAc,EAETC,EAAI,EAAGA,EAAI,GAAIA,IAAK,KAG3BR,EAAcjB,EAAMyB,GAEpBV,EAAc,IAAId,KAAKgB,GAYvBM,GAFcT,EAAoBD,IAHlCM,EAAcF,EAAcJ,GAS5BW,GAFYP,GAVZC,GAFAF,EAAkB,IAAIf,KAAKc,EAAYW,cAAeX,EAAYY,WAAYZ,EAAYrB,YAExDD,YAYR0B,EAG1BC,EAAYV,EAAaE,EAClBQ,EAAY,GACjBA,GAAuB,EAAVxD,KAAKK,GAIpBoD,EAAcD,EAAYA,EAAYG,EAAgBH,EAAYI,EAMlE3C,EAAeC,EAJfwC,EAAQ1D,KAAKgE,OAAOV,EAAkBJ,GAAqB,OAI/B9B,EAF5B0B,GAAcU,EAAYG,EADdF,EAAcC,EAG+BnC,GAGzDuB,EAAaE,EAGbD,GAAe,EAEfC,EAAWb,EADXY,GAAe,IACe,GAG9BK,EAAgBrB,QAAQqB,EAAgBtB,UAAY,GACpDoB,EAAoBE,EAAgBvB,UACpCoB,EAAgBI,MAIlBA,EAAcX,EAGdD,EAASV,QAAQU,EAASX,UAAY,GACtCwB,EAAkBb,EAASZ,UAQ3B8B,GAFcT,EAAoBD,IAHlCM,EAAcF,EAAcJ,GAS5BW,EAFY,MAEcL,EAK1BC,EAAYV,GAHZE,EAAWhD,KAAKK,GAAKwC,GAIdW,EAAY,GACjBA,GAAuB,EAAVxD,KAAKK,UAIpBoD,EAAcD,EAAYA,EAAYG,EAAgBH,EAAYI,EAMlE3C,EAAeC,EAJfwC,EAAQ1D,KAAKgE,OAAOV,EAAkBJ,GAAqB,OAI/B9B,EAF5B0B,GAAcU,EAAYG,EADdF,EAAcC,EAG+BnC,GAElDL,EEhLF,IAAM+C,EAGK,GAHLA,EAMA,UANAA,EAOI,UAPJA,EAQG,UARHA,EASK,UATLA,EAUK,UAVLA,EAWI,UAXJA,EAYK,UAZLA,EAaI,UAbJA,EAgBK,UAhBLA,EAiBG,UAjBHA,EAkBK,UAlBLA,EAqBM,UArBNA,EAsBK,UAtBLA,EAuBO,UAvBPA,EA0BO,UA1BPA,EA2BO,UA3BPA,EA4BY,UA5BZA,EA6BY,UA7BZA,EAgCS,UAhCTA,EAiCS,UAjCTA,EAkCc,UAlCdA,EAmCc,UAnCdA,EAsCU,UAtCVA,EAuCU,UAvCVA,EAwCe,UAxCfA,EAyCe,UAzCfA,EA4CS,UA5CTA,EA6CS,UA7CTA,EA8Cc,UA9CdA,EA+Cc,UC/C3B,SAASC,EAAuBC,EAAKC,EAAQC,EAAQC,OAC7CC,EAAQD,EAAS,GAAM,YACtBH,EAAIK,SAAS,UAAU,SAAUC,GACtCA,EAAIC,KAAKH,EAAOH,GAChBK,EAAIC,KAAK,EAAGL,MACXM,KAAK,EAAG,GAAGC,GAAG,EAAG,GAAGC,OAAO,ICFhC,IAAMC,EAAIC,UAUV,SAASC,EAAeC,EAAOC,EAAMC,UAC5BF,EAAMG,QAAQC,SAASH,GAAMI,OAAO,CACzCH,MAAOA,EACPI,MAAOtB,IAmJX,SAASuB,EAAeP,EAAOQ,EAAO9D,EAAIC,EAAInB,EAAUiF,EAAMC,EAAWC,GACvEF,EAAOA,EAAO,IAAM,OACdR,EAAO,UAAYO,EACzBR,EAAMY,KAAKlE,EAAIC,EAAID,EAAIC,GAAIyD,SAASH,GAAMY,KAAKH,GAAWI,UAAU,CAClEC,OAAQvF,EACRwF,OAAQ,CAACtE,EAAIC,GACb8D,KAAMA,IAERT,EAAMY,KAAKlE,EAAIC,EAAID,EAAIC,GAAIyD,SAASH,EAAO,UAAUY,KAAKF,GAAWG,UAAU,CAC7EC,OAAQvF,EACRwF,OAAQ,CAACtE,EAAIC,GACb8D,KAAMA,IACLQ,QAAQ,GAyYb,SAASC,EAAShC,EAAKiC,EAASC,EAAU9F,EAAGC,OACrC8F,EAAUnC,EAAIoC,KAAK,QACrBD,GAAWA,IAAYD,GACzBG,EAAQrC,EAAKiC,EAASE,OAElBG,EAAQ3B,EAAEsB,EAAU,IAAMC,GAChClC,EAAIoC,KAAK,OAAQF,GACjBI,EAAMC,IAAI,CACRC,IAAKnG,EAAI,KACToG,KAAMrG,EAAI,OAEZkG,EAAMI,OAGR,SAASL,EAASrC,EAAKiC,EAASC,GAE9BS,EAAa3C,EADCW,EAAEsB,EAAU,IAAMC,IAIlC,SAASS,EAAc3C,EAAKsC,GACtBA,EAAMM,GAAG,YACPN,EAAMM,GAAG,UACXN,EAAMO,GAAG,cAAc,WACrB7C,EAAIoC,KAAK,OAAQ,MACjBU,YAAW,WACTR,EAAMS,SACL,SAGL/C,EAAIoC,KAAK,OAAQ,MACjBU,YAAW,WACTR,EAAMS,SACL,MAGL/C,EAAIoC,KAAK,OAAQ,MAIrB,SAASY,EAAehD,EAAKvE,EAAQwG,EAASC,EAAUe,EAAaC,EAAWC,OACxEzE,EAASiC,EAAEsB,EAAU,UAAUvD,SAC/B4D,EAAQ3B,EAAEsB,EAAU,IAAMC,GAChCzG,EAAOoH,GAAG,aAAa,SAACO,OAChBC,EAAOrD,EAAIoC,KAAK,QAChBa,KAAgBA,KAAiBI,GAAQH,IAAgBZ,EAAMM,GAAG,aACtEZ,EAAQhC,EAAKiC,EAASC,EAAUkB,EAAME,MAAQ5E,EAAO+D,KAAMW,EAAMG,MAAQ7E,EAAO8D,QAGpF/G,EAAOoH,GAAG,cAAc,WACtBF,EAAa3C,EAAKsC,MAItB,SAASkB,EAAavB,EAASC,EAAUuB,EAAOC,OACxCC,EAAUhD,EAAEsB,EAAU,YAAY2B,QAAQC,SAAS5B,EAAU,UACnE0B,EAAQG,KAAK,CACXC,GAAK9B,EAAQ+B,OAAO,GAAK,IAAM9B,EAC/BM,IAAK,EACLC,KAAM,IAERkB,EAAQM,KAAK,cAAgBR,EAAQ,qBAAuBC,EAAO,QA2BrE,SAASQ,EAAmBlE,EAAKhE,OAEzBmI,EAAQnE,EAAIoC,KAAK,SACnB+B,GAASA,GAASnI,GAEpBoI,MAAI,WAAaD,EAAQ,UAAUE,QAAQ,KAAKtC,QAAQ,GAG1D/B,EAAIoC,KAAK,QAASpG,GAWpB,SAASsI,EAAiBtE,EAAKiC,EAASjG,EAASuI,GAG/CL,EAAkBlE,EAAKhE,GAGvBoI,MAAI,WAAapI,EAAU,UAAUqI,QAAQ,KAAKtC,QAAQ,GAI1D/B,EAAIwE,MAAM,MAGVxE,EAAIwE,OAAM,WACRxE,EAAIoC,KAAK,YAAa,GACtBpC,EAAIoC,KAAK,OAAQpG,OACXmG,EAAUnC,EAAIoC,KAAK,QACrBD,GACFE,EAAQrC,EAAKiC,EAASE,GAExBnC,EAAIqE,QAAQ,KAAKE,QAAQA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IAAIE,OAAM,WAC7EzE,EAAIoC,KAAK,YAAa,SAGxBgC,MAAI,WAAapI,EAAU,UAAUqI,QAAQ,KAAKtC,QAAQ,MC1rB9D,IAAMpB,EAAIC,UAgBH,SAAS8D,EAAoBzC,EAASnE,EAAMf,EAAM4H,EAAOC,EAAMxH,OAPhEyH,EAQEC,GARFD,EAAME,OAAOC,SAASC,SAAW,KAAOF,OAAOC,SAASE,SACxDH,OAAOC,SAASG,OAClBN,GAAO,IAAME,OAAOC,SAASG,MAExBN,GAMPlE,EAAEyE,KAAK,CAELP,IAAKC,EAAS,wBAEbO,MAAK,SAAUjD,WAEZkD,EAAS,EACJ5F,EAAI,EAAGA,EAAI0C,EAAKmD,OAAQ7F,OAC3B0C,EAAK1C,GAAG8F,MAAQ1H,EAAM,CACxBwH,EAASlD,EAAK1C,GAAGqE,SAKrBpD,EAAEyE,KAAK,CACLP,IAAKC,EAAS,qCAAuCQ,IACpDD,MAAK,SAAUI,WAEVC,EAAS,IAAIC,MAAMF,EAAMF,QACtBjI,EAAI,EAAGA,EAAImI,EAAMF,OAAQjI,YAC1BsI,EAAYH,EAAMnI,GAOlBuI,GALFD,EAAUE,cACI,IAAI5H,KAAK0H,EAAUG,cAAgB,IAAMH,EAAUE,cAAgB,KAEnE,IAAI5H,KAAK0H,EAAUG,cAAgB,cAEjBrI,UAE3BsI,EAAI,EAAGA,EAAIjJ,EAAKwI,OAAQS,IAAK,KAC9BC,EAAMlJ,EAAKiJ,MACDC,EAAI,IACLJ,EAAe,EAE5BG,GAAK,KACKjJ,EAAKwI,SACbS,EAAI,OAEAE,EAAUnJ,EAAKiJ,GAErBN,EAAOpI,GAAK,CACV6I,GAAIF,EACJG,GAAIF,EACJnC,GAAI6B,EAAUJ,KACd/B,MAAOmC,EAAUnC,MAAM4C,SACvB3C,KAAMkC,EAAUU,qBDujBvB,SAAqBrE,EAASyD,EAAQf,EAAOC,EAAMxH,OAEnD,IAAIsC,EAAI,EAAGA,EAAIgG,EAAOH,OAAQ7F,IAAK,KAEhC6G,EAAQb,EAAOhG,GACf8G,EAAKD,EAAMJ,GAAG,GACdM,EAAKF,EAAMJ,GAAG,GACdO,EAAKH,EAAMH,GAAG,GACdO,EAAKJ,EAAMH,GAAG,GACdQ,EAAQjC,EAAMkC,KAClB,IAAML,EAAK,IAAMC,EACjB,KAAOrJ,EAAW1B,EAAI,IAAM0B,EAAWzB,EAAI,UAAY+K,EAAK,IAAMC,EAClE,KAAOvJ,EAAWI,GAAK,IAAMJ,EAAWK,GAAK,MAC7CkE,KAAK,WAAWY,IAAI,QACV,YAGNL,EAAW,WAAaqE,EAAMxC,GACpCP,EAAYvB,EAASC,EAAUqE,EAAM9C,MAAO8C,EAAM7C,MAClDV,EAAc2B,EAAMmC,OAAQF,EAAO3E,EAASC,GAAU,GAAM,ICnkB1D6E,CAAW9E,EAASyD,EAAQf,EAAOC,EAAMxH,SCzExC,IAAM4J,GACC,sLADDA,GAEK,gMAFLA,GAGG,2KAHHA,GAIG,qLAJHA,GAKH,2KALGA,GAME,iHANFA,GAOA,wLAPAA,GAQG,6KARHA,GASI,mMATJA,GAUI,mLAVJA,GAWI,gLAXJA,GAYC,2LAZDA,GAaG,oMAbHA,GAcG,0MAdHA,GAeK,kLAfLA,GAgBS,8LAhBTA,GAiBO,wMAjBPA,GAkBM,wLAlBNA,GAmBI,uLAnBJA,GAoBC,8KApBDA,GAqBD,mNC6EL,SAAuB/E,EAASgF,OA9ETjG,EAAOkG,EAC7B1J,EACAC,EACA0J,EJbyBnH,EI0FzBoH,GAAYC,SAASC,cAAcrF,GACnCsF,GAAIH,GAAUI,YACdC,GAAI5L,KAAK6L,IAAIN,GAAUO,aAAcJ,GAAIzH,GAEzC1C,GAhFC,CACL1B,GAJI8B,GADsBwD,EAoFWuG,IAnFpB,IAEbJ,EAAMnG,EAAQ,IAGlBrF,GAJI8B,GAF6ByJ,EAoFOO,IAlFtB,GAIVN,EACR3J,GAAIA,EACJC,GAAIA,EACJmK,QAAST,EACTU,MAAO7G,EAAQ,GACf8G,KAAMX,EAAM,GACZY,SAAUZ,EAAM,GAChBnG,MAAOA,EACPkG,OAAQA,GAwEJc,GAAO5D,QAAM6D,MAAMhG,GAASiG,KAAKX,GAAGE,IAAGlD,QAAQ,EAAG,EAAGgD,GAAGE,IAExDU,GCtGD,SAA0BC,SACxB,CACLpH,MAAO,IACPkG,OAAQ,IACRmB,MAAO,CAELD,EAAKvB,KAAK,upCAEVuB,EAAKvB,KAAK,qzCAEVuB,EAAKvB,KAAK,mmHAEVuB,EAAKvB,KAAK,qwEAEVuB,EAAKvB,KAAK,qmDAEVuB,EAAKvB,KAAK,6vDAEVuB,EAAKvB,KAAK,umEAEVuB,EAAKvB,KAAK,mvFAEVuB,EAAKvB,KAAK,0lDAEVuB,EAAKvB,KAAK,44DAEVuB,EAAKvB,KAAK,09DAEVuB,EAAKvB,KAAK,w5DD0ECyB,CADFN,GAAKI,QAEZnH,GAAQ+G,GAAK/G,QAAQC,SAAS,YAC9ByD,GAAQ1D,GAAMA,QAAQC,SAAS,kBAC/BqH,GAAOtH,GAAMA,QAAQC,SAAS,aAE9BwC,IADOzC,GAAMA,QAAQC,SAAS,eACvB8G,GAAK/G,QAAQC,SAAS,aAC7BsB,GAAMwF,GAAK/G,QAAQC,SAAS,WAE5BsH,GAAO,IAAItK,KAGXuK,GAAcD,GAAK7I,cACnB5B,GAAWlB,EAAW4L,IACtBnM,GA3ER,SAA4BmM,EAAa1K,ONvCbD,EMwCpB4K,GNxCoB5K,EMwCI2K,GNvCd,GAAM,GAAO3K,EAAO,KAAQ,GAAQA,EAAO,KAAQ,EMuCtB,IAAM,IAC7C6K,EAAW,IAAIzK,KAAKH,EAAS,KAC7B6K,EAAa,IAAI1K,KAAKH,EAAS,KAC/B8K,EAAeF,EAASjL,UAGxBoL,GAFiBF,EAAWlL,UAEoB,MAAbgL,EAAwBG,GAAgB,aAC1E,EAAIhN,KAAKK,GAAK4M,EAAiBJ,EAmErBK,CAAkBN,GAAa1K,IAC1CC,GExHD,SAAsBU,EAAQtB,WAC7BY,EAAQ,IAAI2H,MAAM,IAClBqD,EAAOnN,KAAKK,GAAK,EACnBT,EAASI,KAAKK,GAAKwC,EACnBuK,EAASxN,EAEPyN,EAAK9L,EAAW1B,EAAI0B,EAAWyK,MAC/BsB,EAAK/L,EAAWzB,EAAIyB,EAAWyK,MAE5BnI,EAAI,EAAGA,EAAI,GAAIA,IAAKjE,GAAUuN,EACjCvN,EAAS,IACXA,GAAoB,EAAVI,KAAKK,IAEjB+M,EAASzN,EAAgBC,EAAQyN,EAAIC,GACrCnL,EAAM0B,GAAK,CACTjE,EACAwN,EACA7L,EAAWI,GAAK3B,KAAKa,IAAIuM,GAAUC,EACnC9L,EAAWK,GAAK5B,KAAKW,IAAIyM,GAAUE,UAGhCnL,EFmGOoL,CAAY9M,GAAUc,IAC9BL,GAAOc,EAAW4K,GAAa1K,GAAUC,GAAO1B,GAAUc,IAC1DiM,GJjHC,CACLC,SAAUvJ,EAFmBC,EIkHGgI,GJhHKlI,EAA0BA,GAC/DyJ,SAAUxJ,EAAsBC,EAAKF,EAA4BA,GACjE0J,SAAUzJ,EAAsBC,EAAKF,EAA6BA,GAClE2J,SAAU1J,EAAsBC,EAAKF,EAA4BA,GAA4B,GAC7F4J,cAAe3J,EAAsBC,EAAKF,EAA+BA,GACzE6J,cAAe5J,EAAsBC,EAAKF,EAAiCA,GAC3E8J,cAAe7J,EAAsBC,EAAKF,EAAkCA,GAC5E+J,cAAe9J,EAAsBC,EAAKF,EAAiCA,GAAiC,II2GxGgK,GA/DR,SAAoB7C,uDACX,CACL8C,oBAAY9C,EAAU6C,KAAKC,cAAc/C,GACzCgD,wBAAgB/C,EAAU6C,KAAKE,kBAAkBhD,GACjDiD,sBAAchD,EAAU6C,KAAKG,gBAAgBjD,GAC7CkD,sBAAcjD,EAAU6C,KAAKI,gBAAgBlD,GAC7CmD,gBAAQlD,EAAU6C,KAAKK,UAAUnD,GACjCoD,qBAAanD,EAAU6C,KAAKM,eAAepD,GAC3CqD,mBAAWpD,EAAU6C,KAAKO,aAAarD,GACvCsD,aAAc,UACZrD,EAAU6C,KAAKS,mBAAmBvD,YAClCC,EAAU6C,KAAKU,iBAAiBxD,YAChCC,EAAU6C,KAAKW,gBAAgBzD,YAC/BC,EAAU6C,KAAKY,iBAAiB1D,YAChCC,EAAU6C,KAAKa,iBAAiB3D,YAChCC,EAAU6C,KAAKc,iBAAiB5D,YAChCC,EAAU6C,KAAKe,cAAc7D,YAC7BC,EAAU6C,KAAKgB,gBAAgB9D,YAC/BC,EAAU6C,KAAKiB,gBAAgB/D,YAC/BC,EAAU6C,KAAKkB,kBAAkBhE,YACjCC,EAAU6C,KAAKmB,sBAAsBjE,YACrCC,EAAU6C,KAAKoB,oBAAoBlE,YACnCC,EAAU6C,KAAKlB,cAAc5B,YAC7BC,EAAU6C,KAAKqB,YAAYnE,KAwClBoE,CAAUnE,GAGvBvC,EAAmBzC,EAASwG,GAAa1L,GAAM4H,GAAOC,EAAMxH,IHnGvD,SAAuB0D,EAAO/D,EAAMT,EAAUc,WAY/CF,EAAOG,EAAOjB,EAAGC,EATfgP,EAAKxK,EAAcC,EAAO,UAAW1D,EAAW2K,UAChDuD,EAAKzK,EAAcC,EAAO,UAAW1D,EAAW2K,UAChDwD,EAAK1K,EAAcC,EAAO,UAAW1D,EAAW2K,UAChDyD,EAAK3K,EAAcC,EAAO,UAAW1D,EAAW2K,UAGhDmB,EAAK9L,EAAW1B,EAAI0B,EAAWyK,MAC/BsB,EAAK/L,EAAWzB,EAAIyB,EAAWyK,MAG5BnI,EAAI,EAAGA,EAAI3C,EAAKwI,OAAQ7F,IAG/BrC,EAAQ7B,EADR0B,EAAQH,EAAK2C,GAAG,GACewJ,EAAIC,GACnC/M,EAAIgB,EAAWI,GAAK3B,KAAKa,IAAIW,GAAS6L,EACtC7M,EAAIe,EAAWK,GAAK5B,KAAKW,IAAIa,GAAS8L,GAGtCjM,GAASZ,GACG,IACVY,GAAmB,EAAVrB,KAAKK,IAEZgB,EAAkB,GAAVrB,KAAKK,GACfmP,EAAGvD,KAAK1K,EAAWI,GAAIJ,EAAWK,GAAIrB,EAAGC,GAChCa,EAAQrB,KAAKK,GACtBsP,EAAG1D,KAAK1K,EAAWI,GAAIJ,EAAWK,GAAIrB,EAAGC,GAChCa,EAAkB,IAAVrB,KAAKK,GACtBqP,EAAGzD,KAAK1K,EAAWI,GAAIJ,EAAWK,GAAIrB,EAAGC,GAEzCiP,EAAGxD,KAAK1K,EAAWI,GAAIJ,EAAWK,GAAIrB,EAAGC,GAIxB,IAAfU,EAAK2C,GAAG,IACVoB,EAAMgH,KAAK1L,EAAGC,EAAGU,EAAK2C,GAAG,GAAI3C,EAAK2C,GAAG,IAClCyB,OAAO,CAAEH,MAAO5D,EAAW0K,KAAM1G,MAAOtB,QAKzC2L,EAAe,SAAUnL,GAC7BA,EAAIoL,mBAAkB,SAAUpL,GAC9BA,EAAIqL,MAAM,CACRC,KAAM,SACNC,MAAO,IACPC,UAAW,QAIjBT,EAAGU,WAAWN,GACdH,EAAGS,WAAWN,GACdF,EAAGQ,WAAWN,GACdD,EAAGO,WAAWN,GGiDdO,CAAazD,GAAMxL,GAAMT,GAAUc,IH9C9B,SAAuB0D,EAAO6D,EAAOrI,EAAU+M,EAAWjM,OACzD+D,EAAS,CACbH,MAAO5D,EAAW0K,KAClB1G,MAAOtB,GAEHmM,EAAoB,EAAf7O,EAAW1B,EAChBwQ,EAAoB,EAAf9O,EAAWzB,EAChBwQ,EAAKF,EAAwB,EAAnB7O,EAAWyK,MACrBuE,EAAKF,EAAwB,EAAnB9O,EAAWyK,MACrBwE,GAAMJ,EAAKE,GAAM,EACjBG,GAAMJ,EAAKE,GAAM,EACnB1N,EAAStB,EAAWwK,QAAUxK,EAAWyK,MAAQ,EACrDlD,EAAM4H,QAAQF,EAAIC,GAAInL,OAAO,CAC3BH,MAAO5D,EAAWyK,MAClBzG,MAAOtB,IACN6B,KAAK,QAAQ6K,KAAK9N,EAAQA,GAAQqN,YAAW,SAAUzL,OAClDmM,EAAQnM,EAAIoM,WAAW,YAAa,IAAKxO,KAAKyO,MAAO,WAAY,gBACpEC,YAAY,SAAU,8CACtBlB,mBAAkB,SAAUmB,GAC3BA,EAAKC,MAAM,CACTlB,KAAM,SACNC,MAAO,IACPC,UAAW,MAEbe,EAAKE,MAAM,CACTnB,KAAM,SACNC,MAAO,IACPC,UAAW,MAEbe,EAAKG,MAAM,CACTpB,KAAM,SACNC,MAAO,IACPC,UAAW,MAEbe,EAAKlB,MAAM,CACTC,KAAM,SACNC,MAAO,EACPC,UAAW,SAGjBxL,EAAI2M,UAAUR,EAAO,gBAAiB,WAGxC/N,GAAUtB,EAAWyK,MAAQ,EAC7B/G,EAAMyL,QAAQN,EAAIC,GAAI/K,OAAOA,GAAQQ,KAAK,QAAQ6K,KAAK9N,EAAQA,GAC/DA,GAAUtB,EAAWyK,MACrB/G,EAAMyL,QAAQJ,EAAIC,GAAIjL,OAAOA,GAAQQ,KAAK,QAAQ6K,KAAK9N,EAAQA,OAGzD2B,EAAWsE,EAAMtE,SAAS,UAAU,SAAUC,GAClDA,EAAIC,KAAK,EAAG,WACZD,EAAIC,KAAK,EAAG,cAER2M,EAAOvI,EAAMuI,OACnBA,EAAKX,QAAQJ,EAAIC,GAAIjL,OAAO,QAAQQ,KAAKtB,GAAUmM,KAAK9N,EAAQA,GAAQqN,YAAW,SAAUzL,OACrFmM,EAAQnM,EAAIoM,WAAW,SAAU,IAAKxO,KAAKyO,MAAO,SAAU,gBAC/DC,YAAY,SAAU,8CACtBlB,mBAAkB,SAAUmB,GAC3BA,EAAKlB,MAAM,CACTC,KAAM,SACNC,MAAO,EACPC,UAAW,QAGjBxL,EAAI2M,UAAUR,EAAO,gBAAiB,eAGlCU,EAAKxI,EAAM1D,QACjBkM,EAAGC,SAASF,OAENG,EAA4B,IAAX/Q,EAAiBT,KAAKK,GAC7CmF,EAAe8L,EAAI,IAAK/P,EAAWI,GAAIJ,EAAWK,GAAI4P,EAAgB,KAAK,EAAOhE,EAAUC,SAAUD,EAAUK,eAChHrI,EAAe8L,EAAI,IAAK/P,EAAWI,GAAIJ,EAAWK,GAAI4P,EAAgB,KAAK,EAAMhE,EAAUE,SAAUF,EAAUM,eAC/GtI,EAAe8L,EAAI,IAAK/P,EAAWI,GAAIJ,EAAWK,GAAI4P,GAAe,EAAOhE,EAAUG,SAAUH,EAAUO,eAC1GvI,EAAe8L,EAAI,IAAK/P,EAAWI,GAAIJ,EAAWK,GAAI4P,GAAe,EAAMhE,EAAUI,SAAUJ,EAAUQ,eGzBzGyD,CAAa/E,GAAM5D,GAAOrI,GAAU+M,GAAWjM,IHmL1C,SAAqB0D,EAAOqH,EAAQ7L,EAAUc,WAE7CmQ,EAAIzM,EAAMG,QAGV+H,EAAOnN,KAAKK,GAAK,EAGjBsR,EAAQpQ,EAAW1B,EAAI,KACvByK,EAAK/I,EAAW1B,EAAuB,IAAnB0B,EAAWyK,MAC/BzB,EAAKhJ,EAAWzB,EAAuB,IAAnByB,EAAWyK,MAC/BQ,EAAQF,EAAOE,MAGf5L,EAAcZ,KAAKa,KAAKJ,GACxBC,EAAcV,KAAKW,KAAKF,GAG1BY,EAAQZ,EAAqB,EAAVT,KAAKK,GAAS,GACjCmB,EAAQ,EACRmJ,EAAK,EACLC,EAAK,EAEA/G,EAAI,EAAGA,EAAI2I,EAAM9C,OAAQ7F,IAAKxC,GAAS8L,EAC1C9L,EAAQ,IACVA,GAAmB,EAAVrB,KAAKK,IAEhBmB,EAAQ7B,EAAgB0B,EAAOiJ,EAAIC,GACnCI,EAAK3K,KAAKa,IAAIW,GAAS8I,EACvBM,EAAK5K,KAAKW,IAAIa,GAAS+I,EACvBmH,EAAEE,IAAIpF,EAAM3I,IAAIiC,KAAK7B,GAAuB8B,UAAU,CACpD8L,UAAW,CAETtQ,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,EACxCa,EAAWK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,GAE1CiR,MAAOA,EACP1L,OAAQ,EAAE,IAAM0L,GAAQ,IAAMA,KAIlCD,EAAExB,YAAW,SAAUzL,GACrBA,EAAIoL,mBAAkB,SAAUmB,GAC9BA,EAAKlB,MAAM,CACTC,KAAM,SACNC,MAAO,IACPC,UAAW,UG9NjB6B,CAAWjK,GAAMyE,GAAQ7L,GAAUc,IHoO9B,SAAyB0D,EAAO/D,EAAMT,EAAUc,WAC/CwQ,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEI1E,EAAK9L,EAAW1B,EAAuB,IAAnB0B,EAAWyK,MAC/BsB,EAAK/L,EAAWzB,EAAuB,IAAnByB,EAAWyK,MAC/BgG,EAAKzQ,EAAW1B,EAAuB,IAAnB0B,EAAWyK,MAC/BiG,EAAK1Q,EAAWzB,EAAuB,IAAnByB,EAAWyK,MAG/BpL,EAAcZ,KAAKa,KAAKJ,GACxBC,EAAcV,KAAKW,KAAKF,GACxByR,EAAyB,IAAXzR,EAAiBT,KAAKK,GAEtCmB,EAAQxB,KAAKK,GAAKI,EAClBkK,EAAK,EACLC,EAAK,EAGHuH,EAAQjR,EAAKwI,OACf0I,EAASlR,EAAK,GAAG,GACjBmR,EAAS,EACTjI,EAAM,KACN3E,EAAQ,EACR6M,EAAY,KAEPzO,EAAI,GAAIA,EAAIsO,EAAOtO,OAEX,KADfuG,EAAMlJ,EAAK2C,IACH,GAAU,KAChBwO,EAASjI,EAAI,IACA,IACXiI,GAAoB,EAAVrS,KAAKK,IAGbgS,EAASD,IACXC,GAAoB,EAAVrS,KAAKK,IAGjBiS,EAAYrN,EAAM4C,KAAKkK,EAAOtM,IAAQK,KAAK7B,GACxCsO,KAAK,CACJC,OAAQ,mBACRC,OAAQ,SACRpG,KAAM9K,EAAWK,GAAK,KAGtBwQ,EAAS3R,EAAWT,KAAKK,IAAM+R,EAAS3R,EAAU,CACpDe,EAAQ7B,EAAgByS,EAAQ/E,EAAIC,GACpC3C,EAAK3K,KAAKa,IAAIW,GAAS6L,EACvBzC,EAAK5K,KAAKW,IAAIa,GAAS8L,MAInBtC,EAAO,MAHNzJ,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,GAGtB,KAFlBa,EAAWK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,GAEX,MAClCc,EAAQ7B,EAAgB0S,EAAQhF,EAAIC,GACpC3C,EAAK3K,KAAKa,IAAIW,GAAS6L,EACvBzC,EAAK5K,KAAKW,IAAIa,GAAS8L,EAIvBtC,GAAQqC,EAAK,IAAMC,EAAK,KAAO4E,EAAc,SAHxC3Q,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,GAGe,KAFvDa,EAAWK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,GAG7C4R,EAAUtH,KAAKA,GAAM/C,KAAK,cAAe,WACpC,CACLzG,EAAQ7B,EAAgB0S,EAAQL,EAAIC,GACpCtH,EAAK3K,KAAKa,IAAIW,GAASwQ,EACvBpH,EAAK5K,KAAKW,IAAIa,GAASyQ,MAInBjH,EAAO,MAHNzJ,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,GAGtB,KAFlBa,EAAWK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,GAEX,MAClCc,EAAQ7B,EAAgByS,EAAQJ,EAAIC,GACpCtH,EAAK3K,KAAKa,IAAIW,GAASwQ,EACvBpH,EAAK5K,KAAKW,IAAIa,GAASyQ,EAIvBjH,GAAQgH,EAAK,IAAMC,EAAK,KAAOC,EAAc,SAHxC3Q,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,GAGe,KAFvDa,EAAWK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,GAG7C4R,EAAUtH,KAAKA,GAAM/C,KAAK,cAAe,QAG3CmK,EAASC,GACI,IACXD,GAAoB,EAAVpS,KAAKK,IAEjBoF,GAAS,EAIb4M,EAASnR,EAAK,GAAG,GACjBoR,EAAYrN,EAAM4C,KAAKkK,EAAOtM,IAAQK,KAAK7B,GACxCsO,KAAK,CACJC,OAAQ,mBACRC,OAAQ,SACRpG,KAAM9K,EAAWK,GAAK,KAE1BJ,EAAQ7B,EAAgB0S,EAAQL,EAAIC,GACpCtH,EAAK3K,KAAKa,IAAIW,GAASwQ,EACvBpH,EAAK5K,KAAKW,IAAIa,GAASyQ,MAInBjH,EAAO,MAHNzJ,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,GAGtB,KAFlBa,EAAWK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,GAEX,MAClCc,EAAQ7B,EAAgByS,EAAQJ,EAAIC,GACpCtH,EAAK3K,KAAKa,IAAIW,GAASwQ,EACvBpH,EAAK5K,KAAKW,IAAIa,GAASyQ,EAIvBjH,GAAQgH,EAAK,IAAMC,EAAK,KAAOC,EAAc,SAHxC3Q,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,GAGe,KAFvDa,EAAWK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,GAG7C4R,EAAUtH,KAAKA,GAAM/C,KAAK,cAAe,OGxVzCyK,CAAe7K,GAAM3G,GAAMT,GAAUc,IHqChC,SAAoB0D,EAAO9C,EAAOZ,WACjCoR,EAAS1N,EAAMG,QACfwN,EAAW3N,EAAMG,QACdvB,EAAI,EAAGA,EAAI,EAAGA,IAAK,KACpBgP,EAAU1Q,EAAM0B,GAChBiP,EAAY3Q,EAAM0B,EAAI,GAExBA,EAAI,GAAM,EACZ+O,EAAS3G,KAAK4G,EAAQ,GAAIA,EAAQ,GAAIC,EAAU,GAAIA,EAAU,IAC3DxN,OAAO,CACNH,MAAO5D,EAAW0K,KAClB1G,MAAOtB,IAGX0O,EAAO1G,KAAK4G,EAAQ,GAAIA,EAAQ,GAAIC,EAAU,GAAIA,EAAU,IACzDxN,OAAO,CACNH,MAAO5D,EAAW0K,KAClB1G,MAAOtB,IAIf0O,EAAOzC,YAAW,SAAUzL,GAC1BA,EAAIoL,mBAAkB,SAAUmB,GAC9BA,EAAKlB,MAAM,CACTC,KAAM,SACNC,MAAO,KACPC,UAAW,UG5DjB8C,CAAUrG,GAAMvK,GAAOZ,IHwVlB,SAA6B0D,EAAOxE,EAAUc,WAE7CwQ,EAAS,CAAC,IAAK,IAAK,IAAK,KACzB1E,EAAK9L,EAAW1B,EAAyB,GAArB0B,EAAWwK,QAC/BuB,EAAK/L,EAAWzB,EAAyB,GAArByB,EAAWwK,QAG/BnL,EAAcZ,KAAKa,KAAKJ,GACxBC,EAAcV,KAAKW,KAAKF,GAExB0M,EAAOnN,KAAKK,GAAK,EACnBgB,EAAQrB,KAAKK,GAAKI,EAClBe,EAAQ,EACRmJ,EAAK,EACLC,EAAK,EACA/G,EAAI,EAAGA,EAAI,EAAGA,IAAKxC,GAAS8L,EACnC3L,EAAQ7B,EAAgB0B,EAAOgM,EAAIC,GACnC3C,EAAK3K,KAAKa,IAAIW,GAAS6L,EACvBzC,EAAK5K,KAAKW,IAAIa,GAAS8L,EACvBrI,EAAM4C,KAAKkK,EAAOlO,IAAIiC,KAAK7B,GACxBsO,KAAK,CACJC,OAAQ,mBACRC,OAAQ,SACRpG,KAAM9K,EAAWK,GAAK,KAEvBmE,UAAU,CACX8L,UAAW,CACTtQ,EAAWI,GAAKgJ,EAAK/J,EAAcgK,EAAKlK,EACxCa,EAAWK,GAAKL,EAAWK,GAAK,GAAKgJ,EAAKhK,EAAc+J,EAAKjK,KGjXnEsS,CAAmBnL,GAAMpH,GAAUc,IHwX9B,SAA4B0D,EAAO1D,WAElCwQ,EAAS,CAAC,OAAQ,SAAU,SAAU,YACtC1E,EAAK9L,EAAW1B,EAAI,IACpByN,EAAK/L,EAAWzB,EAAI,IAEpBqN,EAAOnN,KAAKK,GAAK,EACnBgB,EAAQrB,KAAKK,GAAK,EAClBmB,EAAQ,EACRmJ,EAAK,EACLC,EAAK,EACH2H,EAAO,CACXC,OAAQ,mBACRC,OAAQ,SACRpG,KAAM9K,EAAWK,GAAK,MAEfiC,EAAI,EAAGA,EAAI,EAAGA,IAAKxC,GAAS8L,EAAM,MAClC9L,GAAmB,EAAVrB,KAAKK,IACnBgB,GAAmB,EAAVrB,KAAKK,GAEhBmB,EAAQ7B,EAAgB0B,EAAOgM,EAAIC,GACnC3C,EAAK3K,KAAKa,IAAIW,GAAS6L,EACvBzC,EAAK5K,KAAKW,IAAIa,GAAS8L,EAGvBrI,EAAM4C,KAAKkK,EAAOlO,IAAIiC,KAAK7B,GAAwBsO,KAAKA,GAAMxM,UAAU,CACtE8L,UAAW,CACTtQ,EAAWI,GAAKgJ,EAChBpJ,EAAWK,GAAKL,EAAWK,GAAK,GAAKgJ,KAEtC1E,QAAQ,IAAKgK,YAAW,SAAUzL,GACnCA,EAAIwO,aAA+B,EAAlB1R,EAAW0K,SAI9BhH,EAAM4C,KAAKkK,EAAOlO,IAAIiC,KAAK7B,GAAmBsO,KAAKA,GAAMxM,UAAU,CACjE8L,UAAW,CACTtQ,EAAWI,GAAKgJ,EAChBpJ,EAAWK,GAAKL,EAAWK,GAAK,GAAKgJ,MG3Z3CsI,CAAkBrL,GAAMtG,IH4DnB,SAAkB6E,EAASnB,EAAO1D,EAAY0M,OAC7CzJ,EAAWS,EAAMT,SAAS,UAAU,SAAUC,GAClDA,EAAIC,KAAK,EAAGT,GACZQ,EAAIC,KAAK,IAAMT,GACfQ,EAAIC,KAAK,EAAGT,MAERqB,EAAS,CACbH,MAAO5D,EAAW0K,KAClB1G,MAAOtB,GAEHkP,EAAQlO,EAAMmO,OAAO7R,EAAW8J,OAAS,GAAG/F,OAAOA,GAAQQ,KAAKtB,GAAUyD,KAAK,CACnFtG,GAAIJ,EAAWI,GAAKJ,EAAW1B,EAAI,KACnC+B,GAAIL,EAAWK,KAGXyE,EAAW,cACjBsB,EAAYvB,EAASC,EAAU,UAAW4H,EAAKK,QAC/CnH,EAAclC,EAAMgG,OAAQkI,EAAO/M,EAASC,GAAU,GAAM,GAE5D8M,EAAMjD,YAAW,SAAUzL,OACnBmM,EAAQnM,EAAIoM,WAAW,OAAQ,IAAKxO,KAAKyO,MAAO,WAAY,gBAC/DC,YAAY,SAAU,8CACtBlB,mBAAkB,SAAUmB,GAC3BA,EAAKC,MAAM,CACTlB,KAAM,SACNC,MAAO,IACPC,UAAW,IAEbe,EAAKE,MAAM,CACTnB,KAAM,SACNC,MAAO,IACPC,UAAW,IAEbe,EAAKG,MAAM,CACTpB,KAAM,SACNC,MAAO,GACPC,UAAW,IAEbe,EAAKlB,MAAM,CACTC,KAAM,SACNC,MAAO,EACPC,UAAW,SAGjBxL,EAAI2M,UAAUR,EAAO,gBAAiB,WAGxC3L,EAAMmO,OAAO7R,EAAW8J,OAAS,GAAG/F,OAAO,CACzCH,MAAO5D,EAAW0K,KAAO,EACzB1G,MAAOtB,IACN6B,KAAK,QAAQmC,KAAK,CACnBtG,GAAIJ,EAAWI,GAAKJ,EAAW1B,EAAI,KACnC+B,GAAIL,EAAWK,KG7GjByR,CAAQjN,EAASO,GAAKpF,GAAY0M,IHkH7B,SAAoBhJ,EAAO5D,EAAOE,OMpQV+R,EAAYC,EAGnC7B,ENkQAlQ,EAAQ7B,EAAgB0B,EAAOE,EAAW1B,EAAG0B,EAAWzB,GACxD6R,EAAQpQ,EAAWI,GAAK,KACxB6R,GMvQuBF,ENuQCrP,EMvQWsP,ENuQctP,GMpQjDyN,ENoQiBzM,EMpQTG,SAEZ4F,KACA,gMACAlF,KAAKwN,GAAYvN,UAAU,CAC3BlG,EAAG,EAAGC,EAAG,EAAG2T,EAAG,EAAGC,EAAG,EAAGC,EAAG,SAAUC,EAAG,WAE1ClC,EAAE1G,KACA,wpsBACAlF,KAAKyN,GAAWxN,UAAU,CAC1BlG,EAAG,EAAGC,EAAG,EAAG2T,EAAG,EAAGC,EAAG,EAAGC,EAAG,SAAUC,EAAG,WAE1ClC,EAAE1G,KACA,0gCACAlF,KAAKyN,GAAWxN,UAAU,CAC1B8L,UAAW,CAAC,SAAU,YAExBH,EAAE1G,KACA,0cACAlF,KAAKyN,GAAWxN,UAAU,CAC1B8L,UAAW,CAAC,QAAS,YAEvBH,EAAE1G,KACA,gfACAlF,KAAKyN,GAAWxN,UAAU,CAC1B8L,UAAW,CAAC,SAAU,YAExBH,EAAE1G,KACA,mhBACAlF,KAAKyN,GAAWxN,UAAU,CAC1B8L,UAAW,CAAC,SAAU,YAExBH,EAAE1G,KACA,mrBACAlF,KAAKyN,GAAWxN,UAAU,CAC1B8L,UAAW,CAAC,SAAU,YAGjBH,GNgODmC,EAAU,GAAwB,GAAlB7T,KAAKa,IAAIQ,GACzByS,EAAU,GAAwB,GAAlB9T,KAAKW,IAAIU,GAEzBmD,EAAWS,EAAMT,SAAS,UAAU,SAAUC,GAClDA,EAAIC,KAAK,CACP7B,OAAQ,EACR0C,MAAOtB,EACPiC,QAAS,IAEXzB,EAAIC,KAAK,CACP7B,OAAQ,IACR0C,MAAOtB,EACPiC,QAAS,KAEXzB,EAAIC,KAAK,CACP7B,OAAQ,EACR0C,MAAOtB,EACPiC,QAAS,QAEVvB,KAAKkP,EAASC,GAASlP,GAAGiP,EAASC,GAEtCN,EAAMJ,OAAO,IAAK,KAAKtN,KAAKtB,GAAUc,OAAO,CAC3CH,MAAO5D,EAAW2K,SAAWyF,EAC7BpM,MAAOtB,IACN8B,UAAU,CACX8L,UAAW,CACT,IAAK,OAGT2B,EAAMzN,UAAU,CACd4L,MAAOA,EACPjM,KAAM,IACNM,OAAQ,EACR6L,UAAW,CACT7R,KAAKa,IAAIW,IAAUD,EAAW1B,EAAI0B,EAAWyK,MAAQ,GACrDhM,KAAKW,IAAIa,IAAUD,EAAWzB,EAAIyB,EAAWyK,MAAQ,IAGvD/F,OAAQ,CAAC1E,EAAWI,GAAK,GAAKJ,EAAWI,GAAK,GAAIJ,EAAWK,GAAK,GAAKL,EAAWK,GAAK,MG1JzFmS,CAAUpN,GP5IL,SAAmBzF,EAAMyL,EAAMpL,WAC9ByS,EAhBD,SAAqB9S,EAAME,WAE1BrB,EAAIqB,EAAKS,UACX8K,EAAO,EACF9I,EAAI,EAAGA,EAAI3C,EAAKwI,OAAQ7F,IAAK,IAEhC9D,KADJ4M,EAAOzL,EAAK2C,GAAG,WAENA,EACF,GAAI9D,EAAI4M,SACN9I,EAAI,SAGP,EAIQoQ,CAAW/S,EAAMyL,GAC3BuH,EAAOF,EAAU,IAAM9S,EAAKwI,OAAS,EAAIsK,EAAU,EACnDlR,EAAa5B,EAAK8S,GAAS,GAE7BG,EAAOrR,EADM5B,EAAKgT,GAAM,GAErBC,EAAO,GACZA,GAAkB,EAAVnU,KAAKK,UAGRyC,EAAcqR,IADHxH,EAAKyH,YAAczH,EAAK0H,aAAe1H,EAAK2H,aAAe,IAAM,IAAM,IOmI1EC,CAASrT,GAAMyL,IAAOpL,QAG/BiT,GAAS,CACbxO,QAAqB,IAAXvF,GAAiBT,KAAKK,GAChC4F,OAAQ,CAAC1E,GAAWI,GAAIJ,GAAWK,YAErCwD,GAAMW,UAAUyO,IAChB7N,GAAIZ,UAAUyO,IH2hBT,SAAyBpO,EAASjC,EAAK1D,EAAU+M,EAAWjM,EAAY0M,GAE7EtG,EAAYvB,EAAS,cAAe,oBAAqB6H,EAAKC,YAC9DvG,EAAYvB,EAAS,kBAAmB,0BAA2B6H,EAAKE,gBACxExG,EAAYvB,EAAS,gBAAiB,yBAA0B6H,EAAKG,cACrEzG,EAAYvB,EAAS,gBAAiB,wBAAyB6H,EAAKI,cACpE1G,EAAYvB,EAAS,iBAAkB,aAAc6H,EAAKO,WAC1D7G,EAAYvB,EAAS,mBAAoB,eAAgB6H,EAAKM,aAE9DpK,EAAI6C,GAAG,aAAa,SAACO,MAEfpD,EAAIoC,KAAK,aAEXpC,EAAIwE,MAAM,eAKN9F,EAASiC,EAAEsB,GAASvD,SAEpB4R,EAAS3P,EAAEoE,QAAQwL,YAGrBnU,EAAIgH,EAAMoN,QAAU9R,EAAO+D,KAAOrF,EAAWI,GAC7CnB,EAAI+G,EAAMqN,QAAU/R,EAAO8D,IAAM8N,EAASlT,EAAWK,GAGnD8G,EAAUvE,EAAIuE,UACdmM,EAASnM,EAAQvD,QAAU5D,EAAW4D,MACxC0P,IACFtU,EAAKmI,EAAQ/G,GAAKJ,EAAWI,GAAMpB,EAAImI,EAAQvD,MAAQ5D,EAAW4D,MAClE3E,EAAKkI,EAAQ9G,GAAKL,EAAWK,GAAMpB,EAAIkI,EAAQ2C,OAAS9J,EAAW8J,YAI/DyJ,EAASvU,EAAI,EACbwU,EAAQvU,EAAI,EACd8F,EAAUnC,EAAIoC,KAAK,QACnByO,EAAS,GAGTC,EAAkB3U,EAAiBC,EAAGC,EAAGe,EAAW1B,EAAG0B,EAAWzB,EAAGW,GACrEwU,IAAoBJ,GAAsB,gBAAZvO,IASxB0O,EANJ1U,EAAiBC,EAAGC,EAAGe,EAAW1B,EAAI0B,EAAWyK,MAAOzK,EAAWzB,EAAIyB,EAAWyK,MAAOvL,GAEvFH,EAAiBC,EAAGC,EAAGe,EAAW1B,EAAuB,EAAnB0B,EAAWyK,MAAWzK,EAAWzB,EAAuB,EAAnByB,EAAWyK,MAAWvL,GAE/FqU,EACEC,EACO,gBAEA,gBAGPA,EACO,kBAEA,cAKJ,iBAIF,oBAKTzO,GAAWA,IAAY0O,GAAsB,gBAAZ1O,IACnCE,EAAQrC,EAAKiC,EAASE,GACtBA,EAAUnC,EAAIoC,KAAK,UAIhBD,GAAW0O,GACd7O,EAAQhC,EAAKiC,EAAS4O,EAAQzN,EAAME,MAAQ5E,EAAO+D,KAAMW,EAAMG,MAAQ7E,EAAO8D,SAI1E2B,EAAQnE,EAAIoC,KAAK,SACjBiB,EAAOrD,EAAIoC,KAAK,QAElB0O,EACEzN,GAEFrD,EAAIwE,MAAM,MACVxE,EAAIuC,IAAI,QACI,cAIZvC,EAAIuC,IAAI,QACI,YAERoO,EACEC,GAAmB,IAAVzM,EACXG,EAAgBtE,EAAKiC,EAAS,EAAG,CAC/B,EACA,EACA7E,EAAWI,GAAKJ,EAAWyK,MAC3BzK,EAAWK,GAAKL,EAAWyK,QAEnB+I,GAAmB,IAAVzM,GACnBG,EAAgBtE,EAAKiC,EAAS,EAAG,CAC/B,EACA7E,EAAWK,GAAKL,EAAWyK,MAC3BzK,EAAWI,GAAKJ,EAAWyK,MAC3BzK,EAAWK,GAAKL,EAAWyK,QAI3B+I,GAAmB,IAAVzM,EACXG,EAAgBtE,EAAKiC,EAAS,EAAG,CAC/B7E,EAAWI,GAAKJ,EAAWyK,MAC3B,EACAzK,EAAWI,GAAKJ,EAAWyK,MAC3BzK,EAAWK,GAAKL,EAAWyK,QAEnB+I,GAAmB,IAAVzM,GACnBG,EAAgBtE,EAAKiC,EAAS,EAAG,CAC/B7E,EAAWI,GAAKJ,EAAWyK,MAC3BzK,EAAWK,GAAKL,EAAWyK,MAC3BzK,EAAWI,GAAKJ,EAAWyK,MAC3BzK,EAAWK,GAAKL,EAAWyK,SAM/BxE,GAEFrD,EAAIuC,IAAI,QACI,YAEZvC,EAAIoC,KAAK,QAAS,GAClBpC,EAAIwE,MAAM,MACVxE,EAAIwE,OAAM,WACRxE,EAAIqE,QAAQ,KACTE,QAAQ,EAAG,EAAGnH,EAAW4D,MAAO5D,EAAW8J,QAC3CzC,OAAM,WACLzE,EAAIoC,KAAK,YAAa,SAE1BpC,EAAIoC,KAAK,YAAa,GACtBpC,EAAIoC,KAAK,OAAQ,QAInBpC,EAAIuC,IAAI,QACI,YAEZ2B,EAAkBlE,EAAK,GACvBA,EAAIwE,MAAM,MACVxE,EAAIoC,KAAK,QAAS,GAClBC,EAAQrC,EAAKiC,EAASE,QGvrB5B4O,CAAe9O,EAAS+F,GAAM1L,GAAU+M,EAAWjM,GAAY0M,IAExD9B"}