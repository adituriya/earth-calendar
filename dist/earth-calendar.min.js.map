{"version":3,"file":"earth-calendar.min.js","sources":["../src/data.js","../src/calendar.js"],"sourcesContent":["\n/**\n * Data adapted from http://astropixels.com/ephemeris/soleq2001.html\n * and http://astropixels.com/ephemeris/perap2001.html\n * and https://www.yourzodiacsign.com/calendar/2021/\n * \n * Each year includes 14 dates: 12 sign cusps beginning with Aquarius,\n * followed by Perihelion and finally Aphelion. Times in UTC.\n */\nexport const yearlyData = {\n  '2021': [\n    '2021-01-19T20:39:00Z',\n    '2021-02-18T10:43:00Z',\n    '2021-03-20T09:37:00Z',\n    '2021-04-19T20:33:00Z',\n    '2021-05-20T19:37:00Z',\n    '2021-06-21T03:32:00Z',\n    '2021-07-22T14:26:00Z',\n    '2021-08-22T21:34:00Z',\n    '2021-09-22T19:21:00Z',\n    '2021-10-23T04:51:00Z',\n    '2021-11-22T02:33:00Z',\n    '2021-12-21T15:59:00Z',\n    '2021-01-02T13:51:00Z',\n    '2021-07-05T22:27:00Z'\n  ],\n  '2022': [\n    '2022-01-20T02:39:00Z',\n    '2022-02-18T16:42:00Z',\n    '2022-03-20T15:33:00Z',\n    '2022-04-20T02:24:00Z',\n    '2022-05-21T01:22:00Z',\n    '2022-06-21T09:13:00Z',\n    '2022-07-22T20:06:00Z',\n    '2022-08-23T03:16:00Z',\n    '2022-09-23T01:03:00Z',\n    '2022-10-23T10:35:00Z',\n    '2022-11-22T08:20:00Z',\n    '2022-12-21T21:48:00Z',\n    '2022-01-04T06:55:00Z',\n    '2022-07-04T07:11:00Z'\n  ],\n  // '2023': [\n  //   '2023-03-20T21:25:00Z',\n  //   '2023-06-21T14:58:00Z',\n  //   '2023-09-23T06:50:00Z',\n  //   '2023-12-22T03:28:00Z',\n  //   '2023-01-04T16:17:00Z',\n  //   '2023-07-06T20:07:00Z'\n  // ],\n  // '2024': [\n  //   '2024-03-20T03:07:00Z',\n  //   '2024-06-20T20:51:00Z',\n  //   '2024-09-22T12:44:00Z',\n  //   '2024-12-21T09:20:00Z',\n  //   '2024-01-03T00:39:00Z',\n  //   '2024-07-05T05:06:00Z'\n  // ],\n  // '2025': [\n  //   '2025-03-20T09:02:00Z',\n  //   '2025-06-21T02:42:00Z',\n  //   '2025-09-22T18:20:00Z',\n  //   '2025-12-21T15:03:00Z',\n  //   '2025-01-04T13:28:00Z',\n  //   '2025-07-03T19:55:00Z'\n  // ],\n  // '2026': [\n  //   '2026-03-20T14:46:00Z',\n  //   '2026-06-21T08:25:00Z',\n  //   '2026-09-23T00:06:00Z',\n  //   '2026-12-21T20:50:00Z',\n  //   '2026-01-03T17:16:00Z',\n  //   '2026-07-06T17:31:00Z'\n  // ],\n  // '2027': [\n  //   '2027-03-20T20:25:00Z',\n  //   '2027-06-21T14:11:00Z',\n  //   '2027-09-23T06:02:00Z',\n  //   '2027-12-22T02:43:00Z',\n  //   '2027-01-03T02:33:00Z',\n  //   '2027-07-05T05:06:00Z'\n  // ],\n  // '2028': [\n  //   '2028-03-20T02:17:00Z',\n  //   '2028-06-20T20:02:00Z',\n  //   '2028-09-22T11:45:00Z',\n  //   '2028-12-21T08:20:00Z',\n  //   '2028-01-05T12:28:00Z',\n  //   '2028-07-03T22:18:00Z'\n  // ],\n  // '2029': [\n  //   '2029-03-20T08:01:00Z',\n  //   '2029-06-21T01:48:00Z',\n  //   '2029-09-22T17:37:00Z',\n  //   '2029-12-21T14:14:00Z',\n  //   '2029-01-02T18:13:00Z',\n  //   '2029-07-06T05:12:00Z'\n  // ],\n  // '2030': [\n  //   '2030-03-20T13:51:00Z',\n  //   '2030-06-21T07:31:00Z',\n  //   '2030-09-22T23:27:00Z',\n  //   '2030-12-21T20:09:00Z',\n  //   '2030-01-03T10:12:00Z',\n  //   '2030-07-04T12:58:00Z'\n  // ]\n}\n","import { SVG } from '@svgdotjs/svg.js'\nimport { yearlyData } from './data.js'\n\nfunction isLeapYear (year) {\n  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)\n}\n\n/**\n * Calculate the length of the radius of an ellipse at a given angle\n * relative to the major axis.\n * \n * https://en.wikipedia.org/wiki/Ellipse#Polar_form_relative_to_center\n * \n * @param {Number} major Radius of major axis\n * @param {Number} minor Radius of minor axis\n * @param {Number} angle Angle in radians relative to major axis\n */\nfunction ellipticRadius (major, minor, angle) {\n  const aSinThetaSquared = Math.pow(major * Math.sin(angle), 2)\n  const bCosThetaSquared = Math.pow(minor * Math.cos(angle), 2)\n  return major * minor / Math.sqrt(aSinThetaSquared + bCosThetaSquared)\n}\n\n/**\n * Find the linear distance between two points.\n * \n * @param {Array} p1 x, y\n * @param {Array} p2 x, y\n * @returns Number\n */\nfunction linearDistance (p1, p2) {\n  const xd = Math.abs(p2[0] - p1[0])\n  const yd = Math.abs(p2[1] - p1[1])\n  return Math.sqrt(xd * xd + yd * yd)\n}\n\nfunction generatePoints (n, a, b, cx, cy, start, time) {\n  const total = n\n  const points = new Array(total)\n  const duration = 86400000\n  const limit = 2 * Math.PI\n  const step = limit / total\n  let x = 0\n  let y = 0\n  let s = 0\n  let d = 0\n  let avg = 0\n  let t = start\n  let prev = null\n  for (let i = 0; i < total; i++) {\n    x = Math.cos(t) * a\n    y = Math.sin(t) * b\n    x = cx + x\n    y = cy + y\n    s = time + i * duration\n    d = prev ? linearDistance(prev, [x, y]) : 0\n    avg += d\n    points[i] = [s, t, x, y, d, step]\n    prev = [x, y]\n    t -= step\n    if (t < 0) {\n      t += Math.PI * 2\n    }\n  }\n  d = linearDistance(prev, [points[0][2], points[0][3]])\n  points[0][4] = d\n  avg += d\n  avg /= total\n\n  return {\n    points: points,\n    spacing: avg\n  }\n}\n\nfunction equalizeSpacing (points, a, b, cx, cy) {\n\n  const p = points.points\n  const spacing = points.spacing\n  const limit = p.length\n  const step = Math.PI * 2 / limit\n  // const last = p[limit - 1]\n  const first = p[0]\n  let t = first[1]\n  let prev = [first[2], first[3]]\n  let ref = first[1]\n  let delta = 0\n  let current = null\n  let avgDelta = 0\n  let x = 0\n  let y = 0\n  let gap = 0\n  let avg = 0\n  let adjust = 0\n  for (let i = 1; i < limit; i++) {\n    current = p[i]\n    // console.log(current)\n    delta = (spacing - current[4]) / spacing\n    // console.log(delta)\n    avgDelta += Math.abs(delta)\n    // t -= step + delta * step\n    adjust = current[5] + current[5] * delta\n    // console.log(adjust)\n    t = ref - adjust\n    // console.log((current[1] - ref))\n    if (t < 0) {\n      t += Math.PI * 2\n    }\n    x = cx + Math.cos(t) * a\n    y = cy + Math.sin(t) * b\n    gap = linearDistance(prev, [x, y])\n    // console.log(gap)\n    avg += gap\n    current[1] = t\n    current[2] = x\n    current[3] = y\n    current[4] = gap\n    current[5] = adjust\n    prev = [x, y]\n    ref = t\n  }\n  current = p[0]\n  delta = (spacing - current[4]) / spacing\n  avgDelta += Math.abs(delta)\n  gap = linearDistance(prev, [current[2], current[3]])\n  current[4] = gap\n  avg += gap\n  points.spacing = avg / limit\n  return avgDelta / limit\n}\n\nfunction createDegrees (rotation, a, b, cx, cy) {\n\n  // Create a reference grid of 360 degrees\n  const degrees = generatePoints(360, a, b, cx, cy, rotation, 0)\n\n  // Equalize the spacing between points along the edge of the ellipse\n  let deviance = equalizeSpacing(degrees, a, b, cx, cy)\n  // Repeat until average deviance from equal spacing is less than 0.01%\n  while (deviance > 0.0001) {\n    deviance = equalizeSpacing(degrees, a, b, cx, cy)\n  }\n  \n  return degrees\n}\n\nfunction timesFromDates (yearData) {\n  return [\n    (new Date(yearData[0])).getTime(),\n    (new Date(yearData[1])).getTime(),\n    (new Date(yearData[2])).getTime(),\n    (new Date(yearData[3])).getTime(),\n    (new Date(yearData[4])).getTime(),\n    (new Date(yearData[5])).getTime(),\n    (new Date(yearData[6])).getTime(),\n    (new Date(yearData[7])).getTime(),\n    (new Date(yearData[8])).getTime(),\n    (new Date(yearData[9])).getTime(),\n    (new Date(yearData[10])).getTime(),\n    (new Date(yearData[11])).getTime(),\n    (new Date(yearData[12])).getTime(),\n    (new Date(yearData[13])).getTime()\n  ]\n}\n\nfunction createDays (year, yearData, degrees, rotation, a, b, cx, cy) {\n  const daysInYear = isLeapYear(year) ? 366 : 365\n  // Extract times from yearData\n  const times = timesFromDates(yearData)\n  const points = degrees.points\n  // let cardinal = points[180]\n  const newYear = new Date(year, 0, 1)\n  const newYearTime = newYear.getTime()\n  const nextYear = new Date(year + 1, 0, 1)\n  const nextYearTime = nextYear.getTime()\n  const delta1 = nextYearTime - times[11]\n  const delta2 = times[12] - newYearTime\n  // Estimate angle between new year's day and perihelion\n  const offset = rotation * delta2 / (delta1 + delta2)\n  // console.log(offset)\n  // console.log(rotation)\n  let initialTime = newYearTime\n  let startAngle = Math.PI + offset\n\n  // Degrees array currently starts at summer solstice\n  // So 0 degrees Aquarius is 210 degrees later (index 209)\n  let degreeIndex = 209\n  let nextCuspAngle = points[degreeIndex][1]\n  let prevCuspDegreeAngle = 0\n  let startDelta = 0\n  let startAngleDelta = 0\n  let t = 0\n  const days = []\n  let cutoff = 0\n  let distance = 0\n  let fullAngle = 0\n  let actualAngle = 0\n  let nDays = 0\n  let increment = 0\n  let date = newYear\n\n  for (let i = 0; i < 12; i++) {\n\n    if (i > 0) {\n      // Fraction of day from previous cusp to start of first day in present sign\n      startDelta = (initialTime - times[i - 1]) / 86400000\n      startAngleDelta = startDelta * prevCuspDegreeAngle\n    }\n\n    // Local time of next sign cusp\n    cutoff = new Date(times[i])\n    // Local start of day of next sign cusp\n    const earlyCutoff = new Date(cutoff.getFullYear(), cutoff.getMonth(), cutoff.getDate())\n    // Milliseconds between start of day and sign cusp\n    const cutoffDelta = times[i] - earlyCutoff.getTime()\n\n    const cutoffFraction = cutoffDelta / 86400000\n\n    const degreeAngle = points[degreeIndex][5]\n\n    const cutoffAngle = degreeAngle * cutoffFraction * 360 / daysInYear\n\n    // Total milliseconds of current period\n    distance = times[i] - initialTime + startDelta\n    // cutoffDelta as a fraction of the total distance\n    const adjust = (startDelta + cutoffDelta) / distance\n    fullAngle = startAngle - nextCuspAngle\n    if (fullAngle < 0) {\n      fullAngle += Math.PI * 2\n    }\n    // actualAngle = fullAngle - fullAngle * adjust\n    actualAngle = fullAngle - cutoffAngle - startAngleDelta\n\n    nDays = Math.round((earlyCutoff.getTime() - initialTime) / 86400000)\n    increment = actualAngle / nDays\n    startAngle -= startAngleDelta\n    for (let j = 0; j <= nDays; j++) {\n      t = startAngle - increment * j\n      days.push([\n        t,\n        cx + Math.cos(t) * a,\n        cy + Math.sin(t) * b,\n        date.getDate() === 1 ? 1 : 0\n      ])\n      date.setDate(date.getDate() + 1)\n    }\n\n    // Advance to next pair of cusps\n    startAngle = nextCuspAngle\n    prevCuspDegreeAngle = degreeAngle\n    degreeIndex += 30\n    degreeIndex %= 360\n    nextCuspAngle = points[degreeIndex][1]\n    // Advance cutoff date by one day\n    earlyCutoff.setDate(earlyCutoff.getDate() + 1)\n    // Reset initial time to start of first day in next sign\n    initialTime = earlyCutoff.getTime()\n  }\n  // Finally, position the days between winter solstice and following new year\n  startDelta = (initialTime - times[11]) / 86400000\n  startAngleDelta = startDelta * prevCuspDegreeAngle\n  distance = nextYearTime - initialTime + startDelta\n  nextCuspAngle = Math.PI + offset\n  fullAngle = startAngle - nextCuspAngle\n  if (fullAngle < 0) {\n    fullAngle += Math.PI * 2\n  }\n  actualAngle = fullAngle - startAngleDelta\n  nDays = Math.round((nextYearTime - initialTime) / 86400000)\n  increment = actualAngle / nDays\n  startAngle -= startAngleDelta\n  for (let j = 0; j < nDays; j++) {\n    t = startAngle - increment * j\n    days.push([\n      t,\n      cx + Math.cos(t) * a,\n      cy + Math.sin(t) * b,\n      date.getDate() === 1 ? 1 : 0\n    ])\n    date.setDate(date.getDate() + 1)\n  }\n\n  return days\n}\n\nexport function drawCalendar (element) {\n  const container = document.querySelector(element)\n  const w = container.clientWidth\n  const h = Math.max(container.clientHeight, w * 0.8)\n  const cx = w / 2\n  const cy = h / 2\n  const padding = Math.round(w / 30)\n  const thickness = w / 450\n  const inset = padding * 0.75\n  const draw = SVG().addTo(element).size(w, h)\n\n  const time = new Date()\n  // time.setFullYear(time.getFullYear() + 1)\n  const currentYear = time.getFullYear() // local time\n  const daysInYear = isLeapYear(currentYear) ? 366 : 365\n  const yearData = yearlyData[currentYear]\n  const cardinal0 = new Date(yearData[2])\n  const cardinal1 = new Date(yearData[5])\n  const cardinal2 = new Date(yearData[8])\n  const cardinal3 = new Date(yearData[11])\n  const perihelion = new Date(yearData[12])\n  const aphelion = new Date(yearData[13])\n  const cardinal0Time = cardinal0.getTime()\n  const cardinal1Time = cardinal1.getTime()\n  const cardinal2Time = cardinal2.getTime()\n  const cardinal3Time = cardinal3.getTime()\n  const perihelionTime = perihelion.getTime()\n  const aphelionTime = aphelion.getTime()\n  const aphelionDays = (aphelionTime - cardinal1Time) / 86400000\n\n  // Approximate orbital rotation for the current year (summer solstice relative to aphelion)\n  const rotation = 360 * aphelionDays / daysInYear\n  const rotationRad = rotation * Math.PI / 180\n\n  const outerDiameterX = w - padding * 2\n  const outerDiameterY = h - padding * 2\n  const innerDiameterX = outerDiameterX - inset * 2\n  const innerDiameterY = outerDiameterY - inset * 2\n  const a = outerDiameterX / 2\n  const b = outerDiameterY / 2\n\n  const rings = draw.group()\n\n  const degrees = createDegrees(rotationRad, a, b, cx, cy)\n  const degreePoints = degrees.points\n\n  const days = createDays(currentYear, yearData, degrees, rotationRad, a, b, cx, cy)\n\n  // Draw days\n  for (let i = 0; i < days.length; i++) {\n    if (days[i][3] === 1) {\n      rings.line(cx, cy, days[i][1], days[i][2]).stroke({ width: thickness / 2, color: '#c54' })\n    } else {\n      rings.line(cx, cy, days[i][1], days[i][2]).stroke({ width: thickness / 2, color: '#bbb' })\n    }\n  }\n\n  // Draw outer rings\n  rings.ellipse(outerDiameterX, outerDiameterY).stroke({ width: thickness, color: '#333' }).fill('none').move(padding, padding)\n  rings.ellipse(innerDiameterX, innerDiameterY).stroke({ width: thickness, color: '#333' }).fill('none').move(padding + inset, padding + inset)\n  \n\n  // Draw sign cusps\n  for (let i = 0; i < 180; i += 30) {\n    let degree0 = degreePoints[i]\n    let degree180 = degreePoints[i + 180]\n    rings.line(degree0[2], degree0[3], degree180[2], degree180[3]).stroke({ width: thickness, color: '#37b' })\n  }\n\n  // Draw sun\n  rings.circle(h / 5).stroke({ width: thickness, color: '#333' }).fill('#f9f3df').attr({\n    cx: cx - w/4,\n    cy: cy\n  })\n\n  // Draw cardinal Earths\n  for (let i = 0; i < 360; i += 90) {\n    const cardinalAngle = degreePoints[i][1]\n    rings.circle(h / 10).stroke({ width: thickness, color: '#333' }).fill('#ffffff').attr({\n      cx: cx + Math.cos(cardinalAngle) * (a - padding / 2),\n      cy: cy + Math.sin(cardinalAngle) * (b - padding / 2)\n    })\n  }\n\n  rings.transform({\n    rotate: -rotation\n  })\n\n  return draw\n}\n"],"names":["yearlyData","isLeapYear","year","linearDistance","p1","p2","xd","Math","abs","yd","sqrt","equalizeSpacing","points","a","b","cx","cy","p","spacing","limit","length","first","t","prev","ref","delta","current","avgDelta","x","y","gap","avg","adjust","i","PI","cos","sin","createDegrees","rotation","degrees","n","start","time","total","Array","step","s","d","generatePoints","deviance","createDays","yearData","daysInYear","times","Date","getTime","timesFromDates","newYear","newYearTime","nextYearTime","delta1","delta2","offset","initialTime","startAngle","degreeIndex","nextCuspAngle","prevCuspDegreeAngle","startAngleDelta","days","cutoff","fullAngle","nDays","increment","date","earlyCutoff","getFullYear","getMonth","getDate","cutoffFraction","degreeAngle","cutoffAngle","round","j","push","setDate","element","container","document","querySelector","w","clientWidth","h","max","clientHeight","padding","thickness","inset","draw","SVG","addTo","size","currentYear","cardinal0","cardinal1","cardinal2","cardinal3","perihelion","aphelion","cardinal1Time","rotationRad","outerDiameterX","outerDiameterY","innerDiameterX","innerDiameterY","rings","group","degreePoints","line","stroke","width","color","ellipse","fill","move","degree0","degree180","circle","attr","cardinalAngle","transform","rotate"],"mappings":"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"}