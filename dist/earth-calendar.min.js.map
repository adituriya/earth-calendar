{"version":3,"file":"earth-calendar.min.js","sources":["../src/ellipse.js","../src/data.js","../src/days.js","../src/time.js","../src/calendar.js","../src/net.js","../src/cusps.js"],"sourcesContent":["/**\n * Convert a target angle, relative to the centre of the ellipse,\n * to the corresponding parametric ellipse angle.\n *\n * https://www.petercollingridge.co.uk/tutorials/computational-geometry/finding-angle-around-ellipse/\n *\n * @param {Number} target Target angle (relative to centre), in radians\n * @param {Number} a Length of semimajor axis\n * @param {Number} b Length of semimimor axis\n * @returns Parametric angle in radians\n */\nexport function parametricAngle (target, a, b) {\n\n  // Convert target angle to parametric angle\n  let t = Math.atan(Math.tan(target) * a / b)\n\n  // Determine what quarter the angle is in\n  const quarter = Math.ceil(target / (Math.PI / 2))\n\n  // Rotate result into the correct quarter\n  if (quarter === 2 || quarter === 3) {\n    t += Math.PI\n  } else if (quarter === 4) {\n    t += 2 * Math.PI\n  }\n\n  return t\n}\n\n/**\n * Calculate the length of the radius of an ellipse at a given angle\n * relative to the major axis.\n *\n * https://en.wikipedia.org/wiki/Ellipse#Polar_form_relative_to_center\n *\n * @param {Number} major Radius of major axis\n * @param {Number} minor Radius of minor axis\n * @param {Number} angle Angle in radians relative to major axis\n */\n export function ellipticRadius (major, minor, angle) {\n  const aSinThetaSquared = Math.pow(major * Math.sin(angle), 2)\n  const bCosThetaSquared = Math.pow(minor * Math.cos(angle), 2)\n  return major * minor / Math.sqrt(aSinThetaSquared + bCosThetaSquared)\n}\n\n\n/**\n * Find the linear distance between two points.\n *\n * @param {Array} p1 x, y\n * @param {Array} p2 x, y\n * @returns Number\n */\n// function linearDistance (p1, p2) {\n//   const xd = Math.abs(p2[0] - p1[0])\n//   const yd = Math.abs(p2[1] - p1[1])\n//   return Math.sqrt(xd * xd + yd * yd)\n// }\n","\n/**\n * Data adapted from http://astropixels.com/ephemeris/soleq2001.html\n * and http://astropixels.com/ephemeris/perap2001.html\n * and https://www.yourzodiacsign.com/calendar/2021/\n * \n * Each year includes 14 dates: 12 sign cusps beginning with Aquarius,\n * followed by Perihelion and finally Aphelion. Times in UTC.\n */\nexport const yearlyData = {\n  '2021': [\n    '2021-01-19T20:39:00Z',\n    '2021-02-18T10:43:00Z',\n    '2021-03-20T09:37:00Z',\n    '2021-04-19T20:33:00Z',\n    '2021-05-20T19:37:00Z',\n    '2021-06-21T03:32:00Z',\n    '2021-07-22T14:26:00Z',\n    '2021-08-22T21:34:00Z',\n    '2021-09-22T19:21:00Z',\n    '2021-10-23T04:51:00Z',\n    '2021-11-22T02:33:00Z',\n    '2021-12-21T15:59:00Z',\n    '2021-01-02T13:51:00Z',\n    '2021-07-05T22:27:00Z'\n  ],\n  '2022': [\n    '2022-01-20T02:39:00Z',\n    '2022-02-18T16:42:00Z',\n    '2022-03-20T15:33:00Z',\n    '2022-04-20T02:24:00Z',\n    '2022-05-21T01:22:00Z',\n    '2022-06-21T09:13:00Z',\n    '2022-07-22T20:06:00Z',\n    '2022-08-23T03:16:00Z',\n    '2022-09-23T01:03:00Z',\n    '2022-10-23T10:35:00Z',\n    '2022-11-22T08:20:00Z',\n    '2022-12-21T21:48:00Z',\n    '2022-01-04T06:55:00Z',\n    '2022-07-04T07:11:00Z'\n  ],\n  // '2023': [\n  //   '2023-03-20T21:25:00Z',\n  //   '2023-06-21T14:58:00Z',\n  //   '2023-09-23T06:50:00Z',\n  //   '2023-12-22T03:28:00Z',\n  //   '2023-01-04T16:17:00Z',\n  //   '2023-07-06T20:07:00Z'\n  // ],\n  // '2024': [\n  //   '2024-03-20T03:07:00Z',\n  //   '2024-06-20T20:51:00Z',\n  //   '2024-09-22T12:44:00Z',\n  //   '2024-12-21T09:20:00Z',\n  //   '2024-01-03T00:39:00Z',\n  //   '2024-07-05T05:06:00Z'\n  // ],\n  // '2025': [\n  //   '2025-03-20T09:02:00Z',\n  //   '2025-06-21T02:42:00Z',\n  //   '2025-09-22T18:20:00Z',\n  //   '2025-12-21T15:03:00Z',\n  //   '2025-01-04T13:28:00Z',\n  //   '2025-07-03T19:55:00Z'\n  // ],\n  // '2026': [\n  //   '2026-03-20T14:46:00Z',\n  //   '2026-06-21T08:25:00Z',\n  //   '2026-09-23T00:06:00Z',\n  //   '2026-12-21T20:50:00Z',\n  //   '2026-01-03T17:16:00Z',\n  //   '2026-07-06T17:31:00Z'\n  // ],\n  // '2027': [\n  //   '2027-03-20T20:25:00Z',\n  //   '2027-06-21T14:11:00Z',\n  //   '2027-09-23T06:02:00Z',\n  //   '2027-12-22T02:43:00Z',\n  //   '2027-01-03T02:33:00Z',\n  //   '2027-07-05T05:06:00Z'\n  // ],\n  // '2028': [\n  //   '2028-03-20T02:17:00Z',\n  //   '2028-06-20T20:02:00Z',\n  //   '2028-09-22T11:45:00Z',\n  //   '2028-12-21T08:20:00Z',\n  //   '2028-01-05T12:28:00Z',\n  //   '2028-07-03T22:18:00Z'\n  // ],\n  // '2029': [\n  //   '2029-03-20T08:01:00Z',\n  //   '2029-06-21T01:48:00Z',\n  //   '2029-09-22T17:37:00Z',\n  //   '2029-12-21T14:14:00Z',\n  //   '2029-01-02T18:13:00Z',\n  //   '2029-07-06T05:12:00Z'\n  // ],\n  // '2030': [\n  //   '2030-03-20T13:51:00Z',\n  //   '2030-06-21T07:31:00Z',\n  //   '2030-09-22T23:27:00Z',\n  //   '2030-12-21T20:09:00Z',\n  //   '2030-01-03T10:12:00Z',\n  //   '2030-07-04T12:58:00Z'\n  // ]\n}\n","import { parametricAngle } from './ellipse.js'\nimport { timesFromDates } from './time.js'\n\nfunction createSubDays (days, n, date, angle, increment, a, b, cx, cy) {\n  let theta = 0\n  for (let j = 0; j <= n; j++, angle -= increment) {\n    theta = parametricAngle(angle, a, b)\n    days.push([\n      angle,\n      theta,\n      cx + Math.cos(theta) * a,\n      cy + Math.sin(theta) * b,\n      date.getDate() === 1 ? 1 : 0\n    ])\n    date.setDate(date.getDate() + 1)\n  }\n}\n\nexport function createDays (year, yearData, cusps, rotation, a, b, cx, cy) {\n  \n  // Extract times from yearData\n  const times = timesFromDates(yearData)\n  const newYear = new Date(year, 0, 1)\n  const newYearTime = newYear.getTime()\n  const nextYear = new Date(year + 1, 0, 1)\n  const nextYearTime = nextYear.getTime()\n\n  // Time between winter solstice and next new year\n  const delta1 = nextYearTime - times[11]\n  // Time between new year and perihelion\n  const delta2 = times[12] - newYearTime\n  // Estimate angle between new year's day and perihelion\n  let offset = rotation * delta2 / (delta1 + delta2)\n\n  let startAngle = Math.PI + offset\n\n  // Cusps array starts at winter solstice\n  let degreeIndex = 1\n  let endAngle = cusps[degreeIndex][0] // target angle\n  const days = []\n\n  let startTimeCusp = newYearTime\n  let startTimeMidnight = newYearTime\n  let endDateCusp = null\n  let endDateMidnight = null\n  let endTimeCusp = 0\n  let endTimeMidnight = 0\n\n  let totalPeriod = 0\n\n  let fullAngle = 0\n  let actualAngle = 0\n  let nDays = 0\n  let increment = 0\n  let date = newYear\n  // let theta = 0\n  let startOffset = 0\n  let startFraction = 0\n  let endOffset = 0\n  let endFraction = 0\n\n  for (let i = 0; i < 12; i++) {\n\n    // Timestamp of next cusp\n    endTimeCusp = times[i]\n    // Local time of next cusp\n    endDateCusp = new Date(endTimeCusp)\n    // Local start of day before next cusp\n    endDateMidnight = new Date(endDateCusp.getFullYear(), endDateCusp.getMonth(), endDateCusp.getDate())\n    // Timestamp of local start of day before next cusp\n    endTimeMidnight = endDateMidnight.getTime()\n\n    // Total milliseconds of current period\n    totalPeriod = endTimeCusp - startTimeCusp\n\n    // Offset in ms between start cusp and start of next day\n    startOffset = startTimeMidnight - startTimeCusp\n    // Start offset as a fraction of the total period\n    startFraction = startOffset / totalPeriod\n    // Offset in ms between end cusp and start of that day\n    endOffset = endTimeCusp - endTimeMidnight\n    // End offset as a fraction of the total period\n    endFraction = endOffset / totalPeriod\n\n    // Full angle from cusp to cusp\n    fullAngle = startAngle - endAngle\n    while (fullAngle < 0) {\n      fullAngle += Math.PI * 2\n    }\n\n    // Actual angle from start calendar day to end calendar day\n    actualAngle = fullAngle - fullAngle * startFraction - fullAngle * endFraction\n\n    nDays = Math.round((endTimeMidnight - startTimeMidnight) / 86400000)\n    increment = actualAngle / nDays\n    startAngle -= fullAngle * startFraction\n\n    createSubDays (days, nDays, date, startAngle, increment, a, b, cx, cy)\n\n    // Advance to next pair of cusps\n    startAngle = endAngle\n\n    // Reset cusp angle\n    degreeIndex += 1\n    degreeIndex %= 12\n    endAngle = cusps[degreeIndex][0]\n\n    // Reset initial time to start of first day in next sign\n    endDateMidnight.setDate(endDateMidnight.getDate() + 1)\n    startTimeMidnight = endDateMidnight.getTime()\n    startTimeCusp = endTimeCusp\n  }\n\n  // New year of the following year\n  endTimeCusp = nextYearTime\n\n  // One day before the new year\n  nextYear.setDate(nextYear.getDate() - 1)\n  endTimeMidnight = nextYear.getTime()\n\n  // Total period\n  totalPeriod = endTimeCusp - startTimeCusp\n\n  // Offset in ms between start cusp and start of next day\n  startOffset = startTimeMidnight - startTimeCusp\n  // Start offset as a fraction of the total period\n  startFraction = startOffset / totalPeriod\n  // Offset in ms between end cusp and start of that day\n  endOffset = 86400000\n  // End offset as a fraction of the total period\n  endFraction = endOffset / totalPeriod\n\n  endAngle = Math.PI + offset\n\n  // Full angle from cusp to cusp\n  fullAngle = startAngle - endAngle\n  while (fullAngle < 0) {\n    fullAngle += Math.PI * 2\n  }\n\n  // Actual angle from start calendar day to end calendar day\n  actualAngle = fullAngle - fullAngle * startFraction - fullAngle * endFraction\n\n  nDays = Math.round((endTimeMidnight - startTimeMidnight) / 86400000)\n  increment = actualAngle / nDays\n  startAngle -= fullAngle * startFraction\n\n  createSubDays (days, nDays, date, startAngle, increment, a, b, cx, cy)\n\n  return days\n}\n","\n/**\n * Determine whether the provided year is a leap year in the Gregorian calendar\n * \n * @param {Integer} year \n * @returns Boolean\n */\nexport function isLeapYear (year) {\n  return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)\n}\n\n/**\n * Convert dates to timestamps.\n * \n * @param {Array} yearData Astronomical data for a single year (from `data.js`)\n * @returns Array\n */\nexport function timesFromDates (yearData) {\n  return [\n    (new Date(yearData[0])).getTime(),\n    (new Date(yearData[1])).getTime(),\n    (new Date(yearData[2])).getTime(),\n    (new Date(yearData[3])).getTime(),\n    (new Date(yearData[4])).getTime(),\n    (new Date(yearData[5])).getTime(),\n    (new Date(yearData[6])).getTime(),\n    (new Date(yearData[7])).getTime(),\n    (new Date(yearData[8])).getTime(),\n    (new Date(yearData[9])).getTime(),\n    (new Date(yearData[10])).getTime(),\n    (new Date(yearData[11])).getTime(),\n    (new Date(yearData[12])).getTime(),\n    (new Date(yearData[13])).getTime()\n  ]\n}","import { createCusps } from './cusps.js'\nimport { yearlyData } from './data.js'\nimport { createDays } from './days.js'\nimport { svgEarth } from './earth.js'\nimport { rootUrl } from './net.js'\nimport { isLeapYear } from './time.js'\n\nimport { SVG } from '@svgdotjs/svg.js'\nimport jQuery from 'jquery'\nconst $ = jQuery\n\n/**\n * Render the Earth Calendar using SVG.js\n *\n * @param {String} element CSS query selector for target element\n * @returns {Object} SVG.js object\n */\nexport function drawCalendar (element) {\n\n  const container = document.querySelector(element)\n  const w = container.clientWidth\n  const h = Math.max(container.clientHeight, w * 0.8)\n  const cx = w / 2\n  const cy = h / 2\n  const padding = Math.round(w / 30)\n  const thickness = w / 450\n  const inset = padding * 0.75\n  const draw = SVG().addTo(element).size(w, h)\n\n  const outerDiameterX = w - padding * 2\n  const outerDiameterY = h - padding * 2\n  const innerDiameterX = outerDiameterX - inset * 2\n  const innerDiameterY = outerDiameterY - inset * 2\n  const a = outerDiameterX / 2\n  const b = outerDiameterY / 2\n\n  const time = new Date()\n  // time.setFullYear(time.getFullYear() + 1)\n  const currentYear = time.getFullYear() // local time\n  const daysInYear = isLeapYear(currentYear) ? 366 : 365\n  const yearData = yearlyData[currentYear]\n  // const cardinal0 = new Date(yearData[2])\n  // const cardinal1 = new Date(yearData[5])\n  // const cardinal2 = new Date(yearData[8])\n  const cardinal3 = new Date(yearData[11])\n  const perihelion = new Date(yearData[12])\n  // const aphelion = new Date(yearData[13])\n  // const cardinal0Time = cardinal0.getTime()\n  // const cardinal1Time = cardinal1.getTime()\n  // const cardinal2Time = cardinal2.getTime()\n  const cardinal3Time = cardinal3.getTime()\n  const perihelionTime = perihelion.getTime()\n  // const aphelionTime = aphelion.getTime()\n  // const aphelionDays = (aphelionTime - cardinal1Time) / 86400000\n  // Calculate the number of days between the winter solstice and the perihelion (projected forward a year)\n  const perihelionDays = (perihelionTime + daysInYear * 86400000 - cardinal3Time) / 86400000\n\n  // console.log(perihelionDays)\n\n  // Approximate orbital rotation for the current year (summer solstice relative to aphelion)\n  // let rotation = 360 * aphelionDays / daysInYear\n  // let rotationRad = rotation * Math.PI / 180\n\n  const offsetDeg = 360 * perihelionDays / daysInYear\n  const offsetRad = offsetDeg * Math.PI / 180\n  // const rotationRad = parametricAngle(offsetRad, a, b)\n  // const rotationDeg = rotationRad * 180 / Math.PI\n  const rotationRad = offsetRad\n  const rotationDeg = offsetDeg\n\n  const cusps = createCusps(rotationRad, a, b, cx, cy)\n\n  const rings = draw.group()\n\n  const days2 = createDays(currentYear, yearData, cusps, rotationRad, a, b, cx, cy)\n\n  const wpRoot = rootUrl()\n\n  // Look up all years (custom taxonomy for calendar_date post type)\n  $.ajax({\n    // url: wpRoot + '/wp-json/wp/v2/calendar_date?year=2'\n    url: wpRoot + '/wp-json/wp/v2/year'\n    // url: wpRoot + '/wp-json/'\n  }).done(function (data) {\n\n    let yearId = 0\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].slug == currentYear) {\n        yearId = data[i].id\n        break\n      }\n    }\n\n    $.ajax({\n      url: wpRoot + '/wp-json/wp/v2/calendar_date?year=' + yearId\n    })\n\n  })\n\n\n  for (let i = 0; i < days2.length; i++) {\n    if (days2[i][4] === 1) {\n      rings.line(cx, cy, days2[i][2], days2[i][3]).stroke({ width: thickness / 2, color: '#c54' })\n    } else {\n      rings.line(cx, cy, days2[i][2], days2[i][3]).stroke({ width: thickness / 2, color: '#bbb' })\n    }\n  }\n\n  // Draw outer rings\n  rings.ellipse(outerDiameterX, outerDiameterY).stroke({ width: thickness, color: '#333' }).fill('none').move(padding, padding)\n  rings.ellipse(innerDiameterX, innerDiameterY).stroke({ width: thickness, color: '#333' }).fill('none').move(padding + inset, padding + inset)\n\n  // Draw sign cusps\n  for (let i = 0; i < 6; i++) {\n    let degree0 = cusps[i]\n    let degree180 = cusps[i + 6]\n    rings.line(degree0[2], degree0[3], degree180[2], degree180[3]).stroke({ width: thickness, color: '#37b' })\n  }\n\n  // Draw sun\n  rings.circle(h / 5).stroke({ width: thickness, color: '#643' }).fill('#f9f3df').attr({\n    cx: cx - w/4,\n    cy: cy\n  })\n\n  // Draw cardinal Earths\n  // for (let i = 0; i < 360; i += 90) {\n  //   const cardinalAngle = degreePoints[i][1]\n  //   rings.circle(h / 10).stroke({ width: thickness, color: '#333' }).fill('#ffffff').attr({\n  //     cx: cx + Math.cos(cardinalAngle) * (a - padding / 2),\n  //     cy: cy + Math.sin(cardinalAngle) * (b - padding / 2)\n  //   })\n  // }\n\n  // const globe = svgEarth(rings, cx, cy, rotationDeg, '#93d0d9', '#598742')\n\n  // globe.transform({\n  //   // translate: [cx, cy]\n  // })\n\n  rings.transform({\n    rotate: -rotationDeg\n  })\n\n  return draw\n}\n","\n\n/**\n * Look up the root URL for the current site (will not work if WordPress\n * is installed in a subdirectory).\n * \n * @returns WordPress site root url\n */\n export function rootUrl () {\n    let url = window.location.protocol + '//' + window.location.hostname\n    if (window.location.port) {\n      url += ':' + window.location.port\n    }\n    return url\n  }","import { parametricAngle } from './ellipse.js'\n\nexport function createCusps (offset, a, b, cx, cy) {\n  const cusps = new Array(12)\n  const step = Math.PI / 6\n  let target = Math.PI + offset\n  let actual = target\n\n  for (let i = 0; i < 12; i++, target -= step) {\n    if (target < 0) {\n      target += Math.PI * 2\n    }\n    actual = parametricAngle(target, a, b)\n    cusps[i] = [\n      target,\n      actual,\n      cx + Math.cos(actual) * a,\n      cy + Math.sin(actual) * b\n    ]\n  }\n  return cusps\n}\n"],"names":["parametricAngle","target","a","b","t","Math","atan","tan","quarter","ceil","PI","yearlyData","createSubDays","days","n","date","angle","increment","cx","cy","theta","j","push","cos","sin","getDate","setDate","createDays","year","yearData","cusps","rotation","times","Date","getTime","timesFromDates","newYear","newYearTime","nextYear","nextYearTime","delta1","delta2","offset","startAngle","degreeIndex","endAngle","startTimeCusp","startTimeMidnight","endDateCusp","endDateMidnight","endTimeCusp","endTimeMidnight","totalPeriod","fullAngle","actualAngle","nDays","startFraction","endFraction","i","getFullYear","getMonth","round","$","element","url","container","document","querySelector","w","clientWidth","h","max","clientHeight","padding","thickness","inset","draw","SVG","addTo","size","outerDiameterX","outerDiameterY","innerDiameterX","innerDiameterY","currentYear","daysInYear","cardinal3","perihelion","cardinal3Time","offsetDeg","rotationRad","rotationDeg","Array","step","actual","createCusps","rings","group","days2","wpRoot","window","location","protocol","hostname","port","ajax","done","data","yearId","length","slug","id","line","stroke","width","color","ellipse","fill","move","degree0","degree180","circle","attr","transform","rotate"],"mappings":"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"}